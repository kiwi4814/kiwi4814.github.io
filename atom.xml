<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><title type="text">客驿风尘面，花坐墨痕枝</title><subtitle type="html">这是kiwi4814的个人博客！</subtitle><updated>2023-03-24T09:22:18+00:00</updated><id>https://kiwi4814.github.io/</id><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/"/><link rel="self" type="application/atom+xml" href="https://kiwi4814.github.io/atom.xml"/><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><generator uri="https://gohugo.io/" version="0.111.3">Hugo</generator><entry><title type="text">使用ZeroTier实现内网穿透教程</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2023/zerotier/"/><id>https://kiwi4814.github.io/posts/2023/zerotier/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2023-03-11T15:05:47+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、前言 上一篇文章主要讲解了如何使用 VPS + frp 搭建内网穿透服务以实现在外面随时访问家里的……</summary><content type="html">&lt;h2 id="一前言">一、前言&lt;/h2>
&lt;p>上一篇文章主要讲解了如何使用 &lt;code>VPS + frp&lt;/code> 搭建内网穿透服务以实现在外面随时访问家里的设备（NAS、路由器等），虽然最终实现了效果，但是使用下来后发现了一些弊端：&lt;/p>
&lt;ul>
&lt;li>速度受限于VPS本身的网络带宽，即使VPS带宽很足，也有可能因为网络高峰期而出现明显的卡顿&lt;/li>
&lt;li>所有流量都经过VPS服务器中转，如果有流量限制，那么就不能使用一些流量大的服务，比如网盘同步或者看电影&lt;/li>
&lt;/ul>
&lt;p>虽然 frp 对客户端没有限制，而且可以分享给任何人使用，但是对于我这种只有几台固定设备需要互联并且有大数据量传输要求的人来说显然是不够的，于是一顿检索后发现了另外一个内网穿透工具 —— ZeroTier。&lt;/p>
&lt;p>ZeroTier 是一个专门用来建立点对点虚拟专用网（P2P VPN）的工具，可以简单理解为局域网，不同网络中的机器可以像在局域网里那样互相访问，而且是点对点直连，数据传输并不经由第三方服务器中转。相比于frp需要第三方服务器转发具有更稳定的速度和连接性，但是需要每个加入局域网的客户端安装zerotier，所以更适合固定的设备使用，比如在公司访问家里的NAS、在家里远程办公或者组建稳定的多人游戏局域网。&lt;/p>
&lt;p>接下来，本文将从安装、使用、配置moon节点加速几个版块详细介绍下如何在各个设备使用zerotier并实现互联。&lt;/p>
&lt;h2 id="二下载和安装使用">二、下载和安装使用&lt;/h2>
&lt;h3 id="21-注册">2.1 注册&lt;/h3>
&lt;p>在 &lt;a href="https://www.zerotier.com/">ZeroTier的官网&lt;/a> 注册一个账号，注册完成后会提示你 &lt;code>Create A Network&lt;/code>:&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230313172246503.webp" alt="image-20230313172246503" style="zoom: 40%;" />
&lt;p>按照提示创建一个网络，会给你生成一个NETWORK ID，&lt;strong>请记下这个ID&lt;/strong>（后文中统一使用 &lt;code>&amp;lt;NETWORK_ID&amp;gt;&lt;/code> 来表示，不再赘述），后面在配置中我们将会多次使用它。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230313172427783.webp" alt="image-20230313172427783" style="zoom:40%;" />
&lt;p>点击记录进入详情后，我们可以看到 &lt;code>Settings&lt;/code>、&lt;code>Members&lt;/code>、 &lt;code>Flow Rules&lt;/code>、 &lt;code>Administrators&lt;/code> 四个配置，我们一般只需要关心前两项即可。&lt;/p>
&lt;p>&lt;code>Settings&lt;/code> 中我们可以设置网络的名称、描述和权限（私有or公有），在 &lt;code>Settings -&amp;gt; Advanced&lt;/code> 中我们可以选择局域网IP的号段。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230314123006272.webp" alt="image-20230314123006272" style="zoom: 33%;" />
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230314122230010.webp" alt="image-20230314122230010" style="zoom: 33%;" />
&lt;p>&lt;code>Members&lt;/code>中则会展示所有加入过此网络的客户端以及相关的设置信息，但是目前应该会显示 &amp;quot;No devices have joined this network&amp;quot;， 表示目前没有任何客户端加入。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230314131753967.webp" alt="image-20230314131753967" style="zoom: 33%;" />
&lt;h3 id="22-安装客户端">2.2 安装客户端&lt;/h3>
&lt;p>下载页：https://www.zerotier.com/download/&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230314123741898.webp" alt="image-20230314123741898" style="zoom:50%;" />
&lt;p>zerotier的官网提供了多种类型的客户端方便下载和安装，下面将以其中最典型的几种来展示下如何安装和使用。&lt;/p>
&lt;h4 id="221-windows--mac">2.2.1 Windows &amp;amp; Mac&lt;/h4>
&lt;p>Windows和Mac下客户端的安装方式大同小异，下载对应的安装包双击安装即可，安装完成后在托盘图标上选择 Join New Network，然后输入刚才创建好的 &lt;code>&amp;lt;NETWORK_ID&amp;gt;&lt;/code> 即可。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230314124219810.webp" alt="image-20230314124219810" style="zoom:50%;" />
&lt;p>当然了，安装完成后也可以选择使用命令行进行操作————&lt;/p>
&lt;p>对于windows系统，使用管理员身份打开Windows PowerShell，然后进入到 &lt;code> C:\Windows\system32&amp;gt;&lt;/code> 文件夹下（一般打开Windows PowerShell后默认就是此路径），然后执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">zerotier-cli join &amp;lt;NETWORK_ID&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于Mac系统比较简单，进入命令行执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo zerotier-cli join &amp;lt;NETWORK_ID&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行完成后可以在zerotier的管理界面查看客户端是否已经在Members列表中了。&lt;/p>
&lt;h4 id="222-linux">2.2.2 Linux&lt;/h4>
&lt;p>笔者的Linux服务器为CentOS Linux release 7.9.2009，接下来依此系统为例展示如何安装zerotier：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>执行一键安装脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl -s https://install.zerotier.com &lt;span class="p">|&lt;/span> sudo bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动 ZeroTier 服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo systemctl &lt;span class="nb">enable&lt;/span> zerotier-one
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start zerotier-one
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>加入 ZeroTier 网络：&lt;/p>
&lt;p>将 ZeroTier 网络的 ID 添加到 moon 节点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo zerotier-cli join &amp;lt;NETWORK_ID&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre tabindex="0">&lt;code>200 join OK
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>等待 moon 节点加入 ZeroTier 网络：&lt;/p>
&lt;p>等待一段时间，直到 moon 节点加入了 ZeroTier 网络。可以使用以下命令检查 moon 节点是否已经加入了 ZeroTier 网络：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo zerotier-cli info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在输出中，可以查看 moon 节点的节点 ID 和 ZeroTier 网络的状态信息。&lt;/p>
&lt;pre tabindex="0">&lt;code>200 info a4cf307835 1.10.5 ONLINE
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h4 id="223-nas">2.2.3 NAS&lt;/h4>
&lt;p>NAS的安装方式比较简单，在NAS的套件中心中增加&lt;a href="https://spk7.imnks.com/">矿神群晖 SPK 套件源&lt;/a>，然后在套件中心安装即可，安装完成后可SSH进入群晖的管理界面操作即可（操作命令与2.2.2小节中大同小异）。&lt;/p>
&lt;h3 id="23-网页配置">2.3 网页配置&lt;/h3>
&lt;p>安装完客户端后，我们再回来zerotier的管理页面上，可以看到 &lt;code>Members&lt;/code> 下面已经多出了几行，分别是我们刚刚添加的那些客户端，下图是一个示例，已经标注了关键信息：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230314120947302.webp" alt="image-20230314120947302" style="zoom:50%;" />
&lt;p>为了方便记忆，我们在 Name/Description 列中可以增加名称和描述，在 Auth 列中勾选复选框后，就意味着对应的机器已经加入到局域网中了，Managed IPs 就是这个机器的IP（可以是多个）。&lt;/p>
&lt;p>在上面的图中，目前有三台在线的设备，分别是Mac（192.168.196.233）、腾讯云（192.168.196.110）和NAS（192.168.196.88），这三台机器的物理位置分别在公司、腾讯云以及家里，按照图中设置勾选后，我就可以在Mac机器上直接访问 http://192.168.196.88 来访问家里的NAS了。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230314131226639.webp" alt="image-20230314131226639" style="zoom:50%;" />
&lt;h2 id="三搭建和使用moon节点">三、搭建和使用moon节点&lt;/h2>
&lt;p>尽管 ZeroTier 是一个点对点的网络，但在网络中仍然需要至少一个中心节点来协调和管理网络中的设备，这个中心节点被称为 &amp;quot;moon&amp;quot; 节点。ZeroTier 虚拟网络默认情况下是使用 ZeroTier 公司的 Moon 节点来提供网络控制和管理功能，所以使用公共的 Moon 节点可能存在网络延迟和带宽限制等问题，如果你恰好有闲置的VPS或者静态服务器，可以搭建一个自己的 moon 节点来改善连接体验。&lt;/p>
&lt;p>下面将演示如何创建一个moon节点，仍然以Centos7为例来演示。&lt;/p>
&lt;p>系统版本为 CentOS Linux release 7.9.2009， &lt;code>&amp;lt;SERVER_IP&amp;gt;&lt;/code> 代表你的公网服务器的IP。&lt;/p>
&lt;h3 id="31-配置moon节点">3.1 配置moon节点&lt;/h3>
&lt;h4 id="311-服务器安装zerotier">3.1.1 服务器安装ZeroTier&lt;/h4>
&lt;p>参见2.2.2小节。&lt;/p>
&lt;h4 id="312-配置-moon-节点">3.1.2 配置 moon 节点&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>生成 moon.json 配置文件，zerotier的默认安装目录为 /var/lib/zerotier-one&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /var/lib/zerotier-one
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo zerotier-idtool initmoon identity.public &amp;gt;&amp;gt; moon.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此命令会在安装路径下生成一个 moon.json 配置文件，文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;c6c353f860&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;objtype&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;roots&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;identity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;c6c353f860:0:5d43b7fc40d85eed2aeeed069ee972fbdb2fc565c7c38186ff7a09a1b0736a9ff2ce342b7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;stableEndpoints&amp;#34;&lt;/span>&lt;span class="p">:[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;signingKey&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;c2b31df775502fd78f39a0e43b87891098dedcb0304e54d6e9eacfc317039b5f4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;signingKey_SECRET&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;87c44c52271ef2433dcff7cdd1a5528d86786d2b2ef625a06413b2f01b83cbdc26a8c2b72f2ae39840bf73b9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;updatesMustBeSignedBy&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;c2b31df775502fd78f39a0e43b87891098719c054e09b931820dce0f48dedcb0304e54d6e9eacfc317039b5f4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;worldType&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;moon&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>编辑 moon.json 配置文件&lt;/p>
&lt;p>将配置文件中的 &lt;code>&amp;quot;stableEndpoints&amp;quot;: []&lt;/code> 修改成 &lt;code>&amp;quot;stableEndpoints&amp;quot;: [&amp;quot;&amp;lt;SERVER_IP&amp;gt;/9993&amp;quot;]&lt;/code>，将 &lt;code>&amp;lt;SERVER_IP&amp;gt;&lt;/code> 替换成云服务器的公网 IP。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开放 9993 UDP端口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo firewall-cmd --permanent --add-port&lt;span class="o">=&lt;/span>9993/udp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo firewall-cmd --reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这步骤也可以自己修改成自己想要的端口，在安装目录下创建 local.conf 文件，文件内容配置如下，primaryPort 即为想要配置的端口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;settings&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;primaryPort&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">9994&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关于端口，UDP官方文档注明了会使用三类端口：&lt;/p>
&lt;blockquote>
&lt;p>What ports does ZeroTier use?&lt;/p>
&lt;p>It listens on three 3 UDP ports:&lt;/p>
&lt;ul>
&lt;li>9993 - The default&lt;/li>
&lt;li>A random, high numbered port derived from your ZeroTier address&lt;/li>
&lt;li>A random, high numbered port for use with UPnP/NAT-PMP mappings&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>9993端口是一定要开的，至于其他端口，目前我也还没搞清楚是否一定要开放，等后面研究研究再来更新，原文地址&lt;a href="https://docs.zerotier.com/zerotier/troubleshooting/">在这里&lt;/a>，可以自行查阅下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成签名文件 &lt;code>.moon&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="err">sudo&lt;/span> &lt;span class="err">zerotier-idtool&lt;/span> &lt;span class="err">genmoon&lt;/span> &lt;span class="err">moon.json&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此命令会在当前路径下生成一个名为 &lt;code>00000xxxxxxxxxx.moon&lt;/code> 的签名文件，其中 &lt;code>xxxxxxxxxx&lt;/code> 为你的 moon 节点ID，安装zerotier后会分配给你。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>加入moon网络&lt;/p>
&lt;p>在安装目录下创建 moons.d 文件夹并将生成的签名文件移动到此文件夹中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo mkdir moons.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo mv 000000xxxxxxxxxx.moon moons.d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>重启zerotier&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo systemctl restart zerotier-one
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="32-其他设备使用此-moon-节点">3.2 其他设备使用此 Moon 节点&lt;/h3>
&lt;p>网络内的其他成员使用 moon 节点有两种方法， 第一种方法是在安装目录下创建 &lt;code>moons.d&lt;/code> 文件夹，然后将刚才生成的 &lt;code>00000xxxxxxxxxx.moon&lt;/code> 复制到文件夹内，然后重启zerotier。&lt;/p>
&lt;p>各系统默认的安装目录如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>Windows: C:\ProgramData\ZeroTier\One
Macintosh: /Library/Application Support/ZeroTier/One (在 Terminal 中应为 /Library/Application\ Support/ZeroTier/One)
Linux: /var/lib/zerotier-one
FreeBSD/OpenBSD: /var/db/zerotier-one
&lt;/code>&lt;/pre>&lt;p>第二种方法较为简单，在加入同一个网络后使用 &lt;code>zerotier-cli orbit&lt;/code> 命令直接添加 Moon 节点 ID。&lt;/p>
&lt;p>Linux内核（群晖NAS、Mac、CentOS等）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo zerotier-cli orbit xxxxxxxxxx xxxxxxxxxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Windows系统（在 C:\Windows\system32&amp;gt; 路径下以管理员方式打开PowelShell后执行）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">zerotier-cli.bat orbit xxxxxxxxxx xxxxxxxxxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 &lt;code>xxxxxxxxxx&lt;/code> 替换为 Moon 节点的ID，节点ID如果没记录可以用命令 &lt;code>sudo zerotier-cli info&lt;/code> 查看。&lt;/p>
&lt;p>&lt;strong>无论哪种方式，完成后可以执行下面的命令检查是否加入成功&lt;/strong>：&lt;/p>
&lt;p>Linux内核（群晖NAS、Mac、CentOS等）执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo zerotier-cli listpeers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">或
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo zerotier-cli listpeers &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;MOON&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Windows下执行（在 C:\Windows\system32&amp;gt; 路径下以管理员方式打开PowelShell后）:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">zerotier-cli.bat listpeers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>列出的信息中如果包含我们自己的 moon 节点，即加入成功。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230313170749856.webp" alt="image-20230313170749856">&lt;/p>
&lt;h2 id="参考链接">参考链接&lt;/h2>
&lt;p>&lt;a href="https://docs.zerotier.com/getting-started/getting-started">ZeroTier Documentation&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.zczc.cz/2018/03/14/ZeroTier-moon-%E8%AE%BE%E7%BD%AE%E6%95%99%E7%A8%8B/">ZeroTier moon 设置教程&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tvtv.fun/vps/001.html">简单搭建 Zerotier Moon 为虚拟网络加速&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2023/03/nas/" term="NAS" label="NAS"/></entry><entry><title type="text">VPS + FRP 实现内网穿透及域名反向代理</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2023/frp/"/><id>https://kiwi4814.github.io/posts/2023/frp/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2023-03-09T16:01:35+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">最近入手了一个搬瓦工 CN2 GIA 服务器，目的之一是打算给家里的黑群晖做内网穿透用，稍微比较了……</summary><content type="html">&lt;p>最近入手了一个搬瓦工 CN2 GIA 服务器，目的之一是打算给家里的黑群晖做内网穿透用，稍微比较了下目前内网穿透的一些方案，最后决定使用 frp 来实现。此外，我在NameSilo上注册了一个域名&lt;/p>
&lt;p>&lt;code>xxx.com&lt;/code>，最终想实现的效果是，当我访问 &lt;code>dsm.xxx.com&lt;/code> 的时候自动跳转到群晖管理入口，而当我访问 &lt;code>plex.xxx.com&lt;/code> 跳转到家庭影院系统，等等以此类推。&lt;/p>
&lt;p>下面记录下安装的过程，仅供参考。&lt;/p>
&lt;p>&lt;strong>VPS公网IP：111.22.33.44&lt;/strong>&lt;/p>
&lt;p>&lt;strong>VPS系统信息：CentOS Linux release 7.9.2009&lt;/strong>&lt;/p>
&lt;p>&lt;strong>群晖系统版本：DSM 6.2-23739&lt;/strong>&lt;/p>
&lt;p>&lt;strong>安装的 frp 版本：0.48.0&lt;/strong>&lt;/p>
&lt;h2 id="一frp-介绍">一、frp 介绍&lt;/h2>
&lt;p>frp 全称为 &amp;quot;Fast Reverse Proxy&amp;quot;，是一种可以将内网服务暴露到外网的工具。通常情况下，如果我们想要从外部访问内网中的服务（比如在公司网络访问家里的设备），需要将内网中的设备（比如路由器）进行端口映射，让外网的请求能够被正确转发到内网中的对应设备上。但是这样做存在一些问题，比如安全性较差、配置复杂等。&lt;/p>
&lt;p>而 frp 则提供了一种更加便捷、安全的方法。它可以将内网中的服务通过一个代理服务器暴露到外网，而无需进行端口映射。具体来说，frp 会在内网设备上运行一个客户端程序，将内网服务的请求发送给代理服务器，代理服务器再将请求转发给外网的访问者。这样就能够实现外网访问内网服务的目的。&lt;/p>
&lt;p>frp 还具有一些其他的功能，比如支持 TCP/UDP 流量转发、支持多种协议等。它的配置相对简单，且性能较为优秀，因此被广泛应用于内网穿透、反向代理等场景中。&lt;/p>
&lt;p>以下是官网对于 frp 的更为专业的介绍：&lt;/p>
&lt;blockquote>
&lt;p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。&lt;/p>
&lt;h4 id="为什么使用-frp-">为什么使用 frp ？&lt;/h4>
&lt;p>通过在具有公网 IP 的节点上部署 frp 服务端，可以轻松地将内网服务穿透到公网，同时提供诸多专业的功能特性，这包括：&lt;/p>
&lt;ul>
&lt;li>客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。&lt;/li>
&lt;li>采用 TCP 连接流式复用，在单个连接间承载更多请求，节省连接建立时间。&lt;/li>
&lt;li>代理组间的负载均衡。&lt;/li>
&lt;li>端口复用，多个服务通过同一个服务端端口暴露。&lt;/li>
&lt;li>多个原生支持的客户端插件（静态文件查看，HTTP、SOCK5 代理等），便于独立使用 frp 客户端完成某些工作。&lt;/li>
&lt;li>高度扩展性的服务端插件系统，方便结合自身需求进行功能扩展。&lt;/li>
&lt;li>服务端和客户端 UI 页面。&lt;/li>
&lt;/ul>
&lt;h4 id="原理">原理&lt;/h4>
&lt;p>frp 主要由 &lt;strong>客户端 (frpc)&lt;/strong> 和 &lt;strong>服务端 (frps)&lt;/strong> 组成，服务端通常部署在具有公网 IP 的机器上，客户端通常部署在需要穿透的内网服务所在的机器上。&lt;/p>
&lt;p>内网服务由于没有公网 IP，不能被非局域网内的其他用户访问。&lt;/p>
&lt;p>用户通过访问服务端的 frps，由 frp 负责根据请求的端口或其他信息将请求路由到对应的内网机器，从而实现通信。&lt;/p>
&lt;/blockquote>
&lt;p>接下来我们将分别在具有公网IP的服务器上和内网NAS设备上安装 frp 的服务端和客户端，以实现外网和内网机器（本文中就是NAS）的通信。&lt;/p>
&lt;h2 id="二服务端frps安装">二、服务端（frps）安装&lt;/h2>
&lt;p>&lt;font color = "red">【注意】：在本节中安装 frps 的时候使用了 frp 默认的80端口，这里建议改为其他端口号，因为Nginx默认也会使用80端口，启动过程中会与 frp 冲突。&lt;/font>&lt;/p>
&lt;p>关于如何安装和使用示例 &lt;a href="https://gofrp.org/docs/">frp官方中文文档&lt;/a> 有比较详细的介绍了，此外官网还有很多不同场景下的使用方法，本文主要是入门使用，故对更加深入的使用方法感兴趣的可以自行跳转研究。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317155233056.webp" alt="image-20230317155233056" style="zoom:50%;" />
&lt;p>此外，想要省事一点的可以直接使用&lt;a href="https://github.com/MvsCode/frps-onekey">一键安装脚本&lt;/a>来进行安装，以下内容引用自安装脚本主页的介绍，感谢原作者的无私奉献。&lt;/p>
&lt;blockquote>
&lt;h3 id="frps-服务端一键配置脚本frp-最新版本0480">Frps 服务端一键配置脚本，Frp 最新版本：0.48.0&lt;/h3>
&lt;p>&lt;em>Frp 是一个高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务，支持 tcp, http, https 等协议类型，并且 web 服务支持根据域名进行路由转发。&lt;/em>&lt;/p>
&lt;ul>
&lt;li>详情：fatedier (&lt;a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp&lt;/a>)&lt;/li>
&lt;li>此脚本原作者：clangcn (&lt;a href="https://github.com/clangcn/onekey-install-shell">https://github.com/clangcn/onekey-install-shell&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h4 id="install安装">Install（安装）&lt;/h4>
&lt;h5 id="gitee">Gitee&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget https://gitee.com/mvscode/frps-onekey/raw/master/install-frps.sh -O ./install-frps.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">700&lt;/span> ./install-frps.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./install-frps.sh install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="github">Github&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget https://raw.githubusercontent.com/MvsCode/frps-onekey/master/install-frps.sh -O ./install-frps.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">700&lt;/span> ./install-frps.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./install-frps.sh install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="uninstall卸载">Uninstall（卸载）&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./install-frps.sh uninstall
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="update更新">Update（更新）&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./install-frps.sh update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="server-management服务管理器">Server management（服务管理器）&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Usage: /etc/init.d/frps &lt;span class="o">{&lt;/span>start&lt;span class="p">|&lt;/span>stop&lt;span class="p">|&lt;/span>restart&lt;span class="p">|&lt;/span>status&lt;span class="p">|&lt;/span>config&lt;span class="p">|&lt;/span>version&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;p>安装过程中，根据提示输入或选择自己想要配置的值即可。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317163306465.webp" alt="image-20230317163306465" style="zoom:50%;" />
&lt;p>另外，这里选择的接口需要在防火墙中放开（centos7 使用 firewalld 管理防火墙）,防火墙相关的命令参考如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看防火墙状态&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl status firewalld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 开启防火墙&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start firewalld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 临时关闭防火墙&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl stop firewalld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 永久关闭防火墙&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl disable firewalld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 开放指定端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo firewall-cmd --zone&lt;span class="o">=&lt;/span>public --add-port&lt;span class="o">=&lt;/span>82/tcp --permanent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 重载配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo firewall-cmd --reload
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看当前开放的端口及服务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo firewall-cmd --list-ports
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此外，如果你使用的是国内运营商的服务器或者安装了iptables，还需要在防火墙管理页面允许对应的端口通过：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317172328845.webp" alt="image-20230317172328845" style="zoom:50%;" />
&lt;p>最终生成的配置文件如下：（路径在 &lt;code>/usr/local/frps/frps.ini&lt;/code> ）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># [common] is integral section&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[common]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># A literal address or host name for IPv6 must be enclosed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># in square brackets, as in &amp;#34;[::1]:80&amp;#34;, &amp;#34;[ipv6-host]:http&amp;#34; or &amp;#34;[ipv6-host%zone]:80&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">bind_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">0.0.0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">bind_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">5443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># udp port used for kcp protocol, it can be same with &amp;#39;bind_port&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># if not set, kcp is disabled in frps&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">kcp_bind_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">5443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># if you want to configure or reload frps by dashboard, dashboard_port must be set&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">dashboard_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">6443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># dashboard assets directory(only for debug mode)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">dashboard_user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">dashboard_pwd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">6pH3CLS6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># assets_dir = ./static&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">vhost_http_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">82&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">vhost_https_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># console or real logFile path like ./frps.log&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">log_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">./frps.log&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># debug, info, warn, error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">log_level&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">info&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">log_max_days&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># auth token&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">EA6QYpVmefiBsPRe&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># It is convenient to use subdomain configure for http、https type when many people use one frps server together.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">subdomain_host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">111.22.33.44&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># only allow frpc to bind ports you list, if you set nothing, there won&amp;#39;t be any limit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#allow_ports = 1-65535&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pool_count in each proxy will change to max_pool_count if they exceed the maximum value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">max_pool_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">50&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># if tcp stream multiplexing is used, default is true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">tcp_mux&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完成后，启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">frps start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动成功后即可在浏览器中直接访问 http://111.22.33.44:6443 来打开管理界面。&lt;/p>
&lt;h2 id="三客户端frpc安装">三、客户端（frpc）安装&lt;/h2>
&lt;p>首先要说明的一点是，这里的客户端其实可以是所有你需要穿透出去的设备，比如家里的主机、服务器等等，另外各个系统安装的方式可能会有所差异，比如在Mac电脑下可以很方便使用HomeBrew安装： &lt;code>brew install frpc&lt;/code>，这里以群晖NAS系统下的Docker环境来演示安装方法，其他平台使用Docker也可以照此方式安装。&lt;/p>
&lt;p>这里演示两种安装方法，第一种是命令式安装，群晖的话需要开启 ssh root 后，进入到后台安装，如何开启可以看前面的文章，第二种是直接在群晖的Docker软件可视化界面上操作，Docker镜像用的是snowdreamtech 大神封装的 &lt;a href="https://hub.docker.com/r/snowdreamtech/frpc">docker镜像&lt;/a> 。&lt;/p>
&lt;h3 id="第一种-命令">第一种 命令&lt;/h3>
&lt;p>按照下面的步骤操作即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1. 创建配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo mkdir -p /etc/frp &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo touch /etc/frp/frpc.ini
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2. 编辑配置文件（配置文件示例见本节末尾）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vi /etc/frp/frpc.ini
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 3. 拉取镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker pull snowdreamtech/frpc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 4. 运行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run --network host -d -v /etc/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在启动完成后，我们可以使用Docker的相关命令查看日志和管理：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 查看启动日志&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>docker logs frpc&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 启动&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>docker start frpc&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 停止&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>docker stop frpc&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第二种-gui">第二种 GUI&lt;/h3>
&lt;p>在NAS下推荐使用此种方式，比较简单也方便统一管理，当然其实使用第一种方式这里也能展示出来，只是配置文件的位置不同罢了。&lt;/p>
&lt;p>（1）打开 &lt;code>filestation&lt;/code> ，创建或者上传配置文件 &lt;code>frpc.ini&lt;/code> , 配置文件的内容和配置项参见本节末尾。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317175234625.webp" alt="image-20230317175234625" style="zoom:50%;" />
&lt;p>（2）打开 &lt;code>Docker套件&lt;/code>， 在注册表中搜索frpc，选择第一个 &lt;code>snowdreamtech/frpc&lt;/code> 双击选择 latest 并下载&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317175712133.webp" alt="image-20230317175712133" style="zoom:50%;" />
&lt;p>（3）在 映像 中双击刚才下载的&lt;code>snowdreamtech/frpc:lastest&lt;/code> 并双击，开始创建容器，并打开高级设置&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317175621520.webp" alt="image-20230317175621520" style="zoom: 50%;" />
&lt;p>（4）高级配置按照下面的步骤操作即可，要点：自启动、映射配置文件、使用与 Docker Host 相同的网络&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317175523854.webp" alt="image-20230317175523854" style="zoom:50%;" />
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317175507025.webp" alt="image-20230317175507025" style="zoom:50%;" />
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317175541261.webp" alt="image-20230317175541261" style="zoom:50%;" />
&lt;p>（5）应用后就会自动运行 frpc&lt;/p>
&lt;h3 id="客户端参考配置">客户端参考配置&lt;/h3>
&lt;p>下面的截图中列出了客户端配置及含义：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317181102512.webp" alt="image-20230317181102512" style="zoom:50%;" />
&lt;p>完整的配置如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[common]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">server_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">111.22.33.44&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">server_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">5443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">EA6QYpVmefiBsPRe&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[80]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">local_ip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">192.168.50.100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">local_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">remote_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">82&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[dsm]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">local_ip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">192.168.50.100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">local_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">5000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">remote_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">5000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[drive_web]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">local_ip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">192.168.50.100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">local_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">6690&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">remote_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">6690&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[plex]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">local_ip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">192.168.50.100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">local_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">32400&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">remote_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">32400&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动成功后，如果客户端配置正确，且服务端和客户端之间的网络连接畅通，我们就可以通过 http://111.22.33.44:5000/ 来访问群晖的管理页面了，其他服务的地址以此类推即可。&lt;/p>
&lt;p>但是这样的地址，首先我们可能根本记不住自己的服务器IP，也搞不清楚这么多域名映射关系，所以最好的方法是，我们把这几个地址反代成一个个方便的二级域名，就像文章开头说的那样，当我访问 &lt;a href="http://dsm.xxx.com/">http://dsm.xxx.com/&lt;/a> 的时候，就能跳转到 http://111.22.33.44:5000/ 了，这样的映射，实现方法又很多，下面记录一下我自己的实现方式，仅供参考。&lt;/p>
&lt;h2 id="四域名配置">四、域名配置&lt;/h2>
&lt;p>首先我们要去注册一个域名，提供商有很多，腾讯云、阿里云、GoDaddy、Namecheap、Namesilo等等，我是在Namesilo上注册的域名，在购买域名的时候要注意初次购买价格和续费价格，有的域名第一年很便宜，但是续费很贵，最好买续费价格不变的，然后域名的后缀可以选冷门一点的 xyz、club、top等等。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230319150117132.webp" alt="image-20230319150117132" style="zoom:50%;" />
&lt;p>注册完成后我们访问 &lt;a href="https://www.namesilo.com/account_home.php">个人账户管理主页&lt;/a>，然后点击右上角 Manage My Domains ,打开域名的管理界面。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230319150555414.webp" alt="image-20230319150555414" style="zoom:50%;" />
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230319150728119.webp" alt="image-20230319150728119" style="zoom:50%;" />
&lt;p>按照下图中的方式增加A记录：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230319151311076.webp" alt="image-20230319151311076" style="zoom:50%;" />
&lt;p>域名相关的设置就到这里，至于具体配置的含义和原理，笔者本身也是一知半解，就不做展开了。&lt;/p>
&lt;p>接下来我们回到VPS服务器，使用Nginx来反向代理我们的应用。&lt;/p>
&lt;h2 id="五nginx映射">五、Nginx映射&lt;/h2>
&lt;p>这里 Nginx 的安装位置与第二节相同，在VPS上服务器上安装，由于官方 yum 包是没有 Nginx 的，所以我们需要先安装三方软件源 —— EPEL-RELEASE。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo yum install epel-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo yum install nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动并确认启动状态：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 启动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看启动状态，显示为 active（running）的时候则代表启动成功了&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl status nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，我们来编辑配置文件 &lt;code>vim /etc/nginx/nginx.conf&lt;/code>（默认的位置）：&lt;/p>
&lt;p>找到server的位置：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230319153604893.webp" alt="image-20230319153604893" style="zoom:50%;" />
&lt;p>将其替换为我们需要映射的域名和服务，其他的服务继续在底下增加新的server配置即可。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230319153807057.webp" alt="image-20230319153807057" style="zoom:50%;" />
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">## 群晖控制面板&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">listen 80;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server_name dsm.xxx.com;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">root /usr/share/nginx/html;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">include /etc/nginx/default.d/*.conf;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">error_page 404 /404.html;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/404.html {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> }&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">error_page 500 502 503 504 /50x.html;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/50x.html {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> }&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">location / {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">proxy_pass http://111.22.33.44:5000/;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">proxy_set_header Host $host;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">proxy_set_header X-Real-IP $remote_addr;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后重新载入nginx配置使其生效：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="line">&lt;span class="cl">&lt;span class="k">nginx&lt;/span> &lt;span class="s">-s&lt;/span> &lt;span class="s">reload&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>稍等一会，我们就可以在浏览器中通过 &lt;a href="http://drive.xxx.com/">http://drive.xxx.com/&lt;/a> 来访问到我们的群晖管理界面了。&lt;/p>
&lt;h2 id="六群晖网盘">六、群晖网盘&lt;/h2>
&lt;p>最后，简单介绍下群晖网盘的同步，首选我们在群晖的控制面板中去开启群晖Drive的web管理：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230319155046586.webp" alt="image-20230319155046586" style="zoom:50%;" />
&lt;p>然后需要注意的是 frp 中映射的端口为 6690 （PC端）而不是上图中的 7006，然后在群晖初始化连接的时候，可以直接填域名或者IP，这是由于群晖的默认设置造成的。这里的默认设置端口是指，&lt;strong>NAS 端的 Drive 服务对 PC 端 Drive 程序开放的默认访问端口为 6690，对移动端的 App 开放的默认访问端口为 5000&lt;/strong>。此外，Drive 客户端程序在你输入域名后，会检测你输入的域名是不是带有端口号，如果没有填写端口号，客户端程序会自动添加上默认的访问端口去访问 NAS 端的 Drive，PC 端就自动添加 6690，移动端就自动添加 5000。但如果你自己填写了端口号，就会使用你填写的端口号去访问 NAS 端的 Drive。所以在局域网中直接输入群晖的 IP，加不加 6690 端口都能连接上 Drive 服务，但在外网下就需要用一个端口转发到群晖所在 IP 的 6690 端口。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230319154737684.webp" alt="image-20230319154737684" style="zoom:50%;" />
&lt;h2 id="七总结">七、总结&lt;/h2>
&lt;p>本文简要介绍了如何使用一台VPS，在外网服务器和家里的NAS服务器分别安装 frp 进行通信并且绑定到指定的二级域名的过程。但是经过实际的测试，由于这种方式所有的流量都要依赖于这个第三方服务器，所以网速势必不会太理想，尤其是晚高峰时期，但是优势在于任何时候都可以直接访问到我们的内网服务而没有设备上的限制。由于笔者本人需要进行内网穿透访问家中设备的场景有限并且设备也很固定，所以下一篇文章中我们将使用另一种方式来实现稳定高速的内网穿透。&lt;/p></content><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2023/03/nas/" term="NAS" label="NAS"/></entry><entry><title type="text">群晖开启ssh root</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2023/nas-ssh-root/"/><id>https://kiwi4814.github.io/posts/2023/nas-ssh-root/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2023-03-07T21:05:47+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">1、控制面板—-终端机和SNMP里，开启SSH功能 2、登陆群晖的SSH，用系统默认用……</summary><content type="html">&lt;h5 id="1控制面板-终端机和snmp里开启ssh功能">1、控制面板—-终端机和SNMP里，开启SSH功能&lt;/h5>
&lt;h5 id="2登陆群晖的ssh用系统默认用户登陆">2、登陆群晖的SSH，用系统默认用户登陆&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh admin@192.168.50.100
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="3登陆后输入以下命令切换至root账号这时还需在输入一次你的群晖登陆密码">3、登陆后输入以下命令切换至root账号，这时还需在输入一次你的群晖登陆密码&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo -i
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="4输入以下命令进入到ssh的目录">4、输入以下命令进入到ssh的目录&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /etc/ssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="5给sshd_config赋予755的权限">5、给sshd_config赋予755的权限&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">755&lt;/span> sshd_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="6修改config配置文件内容">6、修改config配置文件内容&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vi /etc/ssh/sshd_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考下面的修改，将&lt;code>#PermitRootLogin prohibit-password&lt;/code>那一行的注释取消，然后后面的值改为yes&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="na">&amp;#34;/etc/ssh/sshd_config&amp;#34; 127L, 3398C&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># $OpenBSD: sshd_config,v 1.100 2016/08/15 12:32:04 naddy Exp $&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># This is the sshd server system-wide configuration file. See&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># sshd_config(5) for more information.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># The strategy used for options in the default sshd_config shipped with&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># OpenSSH is to specify options with their default value where&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># possible, but leave them commented. Uncommented options override the&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># default value.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Port 22&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#AddressFamily any&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#ListenAddress 0.0.0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#ListenAddress ::&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#HostKey /etc/ssh/ssh_host_rsa_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#HostKey /etc/ssh/ssh_host_dsa_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#HostKey /etc/ssh/ssh_host_ecdsa_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#HostKey /etc/ssh/ssh_host_ed25519_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Ciphers and keying&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#RekeyLimit default none&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Logging&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#SyslogFacility AUTH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#LogLevel INFO&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Authentication:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#LoginGraceTime 2m&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">PermitRootLogin yes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#StrictModes yes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#MaxAuthTries 6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#MaxSessions 10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#PubkeyAuthentication yes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># but this is overridden so installations will only check .ssh/authorized_keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#AuthorizedKeysFile .ssh/authorized_keys&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="7重启群晖">7、重启群晖&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="8重启完成再次以系统默认账户登录群晖ssh">8、重启完成再次以系统默认账户登录群晖SSH&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh admin@192.168.50.100
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="9再次输入以下命令切换至root账号这时还需在输入一次你的群晖登陆密码">9、再次输入以下命令切换至root账号，这时还需在输入一次你的群晖登陆密码&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo -i
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="10输入下面命令修改root默认密码xxx改为你要设置的密码回车没有任何提示即可">10、输入下面命令修改root默认密码，xxx改为你要设置的密码，回车没有任何提示即可&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">synouser --setpw root xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="11这时再从新以root权限就可以登陆到ssh了ip记得改为你群晖的ip哦">11、这时再从新以root权限就可以登陆到ssh了，ip记得改为你群晖的ip哦。&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh root@192.168.50.100
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="附录群晖的内核版本">附录（群晖的内核版本）&lt;/h3>
&lt;p>查看命令：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>cat /etc/issue&lt;/code>：这个命令会输出当前系统的版本信息，包括发行版名称和版本号。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>uname -a&lt;/code>：这个命令会输出当前系统的内核版本信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>cat /proc/version&lt;/code>：这个命令会输出当前系统的版本信息，包括内核版本、gcc版本和发行版信息等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>uname -a 的执行结果是 &lt;code>Linux kiwinas 4.4.59+ #23739 SMP PREEMPT Tue Jul 3 19:51:03 CST 2018 x86_64 GNU/Linux synology_apollolake_918+&lt;/code>，具体含义为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Linux&lt;/code>：操作系统的内核类型，这里表示当前系统使用的是 Linux 内核。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>kiwinas&lt;/code>：系统的主机名，也就是机器的名称。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>4.4.59+&lt;/code>：当前系统使用的 Linux 内核版本号。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>#23739 SMP PREEMPT Tue Jul 3 19:51:03 CST 2018&lt;/code>：内核编译的时间和日期，以及所使用的编译选项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>x86_64&lt;/code>：系统的处理器架构类型，这里表示当前系统使用的是 64 位处理器架构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>GNU/Linux&lt;/code>：系统的操作系统名称，这里表示当前系统是一个基于 GNU 工具集的 Linux 操作系统。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>synology_apollolake_918+&lt;/code>：这是群晖 NAS 所使用的芯片型号，Apollolake 代表芯片架构，918 + 代表机型号。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在群晖系统的命令中，需要使用 &lt;code>synopkg&lt;/code> 命令来管理软件包。&lt;code>synopkg&lt;/code> 命令是群晖自带的软件包管理工具，它可以用来安装、升级和删除软件包。以下是一些常用的 &lt;code>synopkg&lt;/code> 命令：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>synopkg list&lt;/code>：列出所有已安装的软件包。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>synopkg install &amp;lt;package-name&amp;gt;&lt;/code>：安装指定的软件包。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>synopkg remove &amp;lt;package-name&amp;gt;&lt;/code>：删除指定的软件包。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>synopkg upgrade &amp;lt;package-name&amp;gt;&lt;/code>：升级指定的软件包。&lt;/p>
&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2023/03/nas/" term="NAS" label="NAS"/></entry><entry><title type="text">centos 安装及配置 oh-my-zsh</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2023/linux-zsh/"/><id>https://kiwi4814.github.io/posts/2023/linux-zsh/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2023-02-03T15:42:09+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">上篇文章主要演示了如何在Mac电脑的iTerm2软件上安装和配置 oh-my-zsh , 本文将演示如何在……</summary><content type="html">&lt;p>上篇文章主要演示了如何在Mac电脑的iTerm2软件上安装和配置 &lt;code>oh-my-zsh&lt;/code> , 本文将演示如何在云服务器上安装 &lt;code>oh-my-zsh&lt;/code> , 由于整体过程大同小异，所以只记录安装命令以及执行结果，然后重点记录与上篇文章中不太一样的地方。&lt;/p>
&lt;p>系统版本：CentOS Linux release 7.9.2009&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;p>查看当前shell：&lt;code>echo $SHELL&lt;/code>&lt;/p>
&lt;p>安装git：&lt;code>yum install -y git&lt;/code>&lt;/p>
&lt;p>安装zsh：&lt;code>yum install -y zsh&lt;/code>&lt;/p>
&lt;p>切换为zsh：&lt;code>chsh -s /bin/zsh&lt;/code>&lt;/p>
&lt;p>&lt;strong>✨✨✨✨说明：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>在安装过程中可能需要克隆很多github项目，如果你使用的是国内服务器，可能会卡在这一步，这时候可以采用另一种思路，使用&lt;a href="https://gitee.com/">gitee&lt;/a>的镜像项目替换，本文中所有安装以github项目为例，无特殊情况外不再说明，相信在阅读本文的你肯定能找到合适的办法。&lt;/strong>&lt;/p>
&lt;h2 id="安装oh-my-zsh">安装oh-my-zsh&lt;/h2>
&lt;p>使用curl或者wget的方式进行安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># curl 安装方式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># wget 安装方式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230309132920921.webp" alt="image-20230309132920921" style="zoom: 50%;" />
&lt;p>由于网络问题，国内的服务器（如阿里云、腾讯云等）可能无法访问github，可以克隆&lt;a href="https://gitee.com/mirrors/oh-my-zsh">gitee的镜像&lt;/a>，然后在tools中找到&lt;code>install.sh&lt;/code>脚本，并在脚本目录下执行安装命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo sh ./install.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装powerline">安装powerline&lt;/h2>
&lt;p>执行命令（python3）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip3 install powerline-status --user
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230309133852565.webp" alt="image-20230309133852565" style="zoom:50%;" />
&lt;h2 id="安装主题powerlevel10k">安装主题Powerlevel10k&lt;/h2>
&lt;p>克隆项目&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone --depth&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> https://github.com/romkatv/powerlevel10k.git &lt;span class="nv">$ZSH_CUSTOM&lt;/span>/themes/powerlevel10k
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后编辑配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1. 编辑配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vi ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2. 按照下图的方式修改为：ZSH_THEME=&amp;#34;powerlevel10k/powerlevel10k&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 3. 使配置文件生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317142345658.webp" alt="image-20230317142345658" style="zoom:50%;" />
&lt;p>这时候可能会提示：&lt;code>You are using ZSH version 5.0.2. The minimum required version for Powerlevel10k is 5.1.&lt;/code>&lt;/p>
&lt;p>这是因为 yum 中 zsh 的最新版本5.0.2，而我们要安装的 Powerlevel10k 主题对版本的最低要求是 5.1 ，然后在github的issues中找到了&lt;a href="https://github.com/Powerlevel9k/powerlevel9k/issues/1355">解决方案&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo yum update -y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo yum install -y git make ncurses-devel gcc autoconf man
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone -b zsh-5.8.1 https://github.com/zsh-users/zsh.git /tmp/zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /tmp/zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./Util/preconfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./configure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo make -j &lt;span class="m">20&lt;/span> install.bin install.modules install.fns
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在执行完上面的过程，可以通过命令 &lt;code>zsh --version&lt;/code> 查看版本，这时候大概率仍然是 5.0.2 ，需要我们重新登录下系统。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317141927648.webp" alt="image-20230317141927648" style="zoom:50%;" />
&lt;p>重新登录后，出现以下提示，按照提示操作切换为最新版本即可。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317145430715.webp" alt="image-20230317145430715" style="zoom:50%;" />
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> /usr/local/bin/zsh &lt;span class="p">|&lt;/span> sudo tee -a /etc/shells
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chsh -s /usr/local/bin/zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行完成后发现版本已经切换到最新版本 5.8.1 了，这时候再次登录系统，发现会自动进入主题Powerlevel10k的配置界面，按照提示选择自己想要的样式即可。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317145809815.webp" alt="image-20230317145809815">&lt;/p>
&lt;h2 id="安装插件">安装插件&lt;/h2>
&lt;p>插件的安装方式几乎都一样，同上篇文章，命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ~/.oh-my-zsh/custom/plugins/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-autosuggestions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完成后仍然像修改主题那样修改配置文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1. 编辑配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vi ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2. 按照下图的方式修改为:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">plugins&lt;/span>&lt;span class="o">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zsh-autosuggestions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zsh-syntax-highlighting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 3. 使配置文件生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230317150822467.webp" alt="image-20230317150822467">&lt;/p>
&lt;p>至此，安装完成。&lt;/p></content><category scheme="https://kiwi4814.github.io/tags/2023/02/linux/" term="Linux" label="Linux"/><category scheme="https://kiwi4814.github.io/tags/2023/02/oh-my-zsh/" term="oh-my-zsh" label="oh-my-zsh"/></entry><entry><title type="text">Mac环境搭建之iTerm2折腾之路</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2023/mac-iterm2/"/><id>https://kiwi4814.github.io/posts/2023/mac-iterm2/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2023-02-01T22:50:03+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">最近Mac电脑送修重做了系统，在搭建环境的过程中记录了一些软件的折腾记录，本文为iT……</summary><content type="html">&lt;p>最近Mac电脑送修重做了系统，在搭建环境的过程中记录了一些软件的折腾记录，本文为iTerm2的相关设置。&lt;/p>
&lt;p>本文默认读者已经自行安装HomeBrew、Git以及Python等开发常用工具，另外笔者所用系统版本为 macOS Ventura 13.2。&lt;/p>
&lt;h3 id="一iterm2软件设置">一、iTerm2软件设置&lt;/h3>
&lt;p>iTerm2的安装很简单，去&lt;a href="https://iterm2.com/">官网&lt;/a>下载或者使用HomBbrew安装均可，这里不做展开，将重点放在初始化的一些设置上。&lt;/p>
&lt;p>iTerm2的主要设置都在 Settings -&amp;gt; Profiles里面，打开后可以设置字体、配色方案、窗口样式、ssh等，并且可以导入导出为JSON（建议设置完成后导出进行备份）。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230201144115407.webp" alt="image-20230201144115407" style="zoom: 33%;" />
&lt;p>在iTerm2初始化的过程中，我主要修改了代码字体、配色方案、初始化窗口的大小（默认打开iTerm界面时的窗口大小，稍微改大了一些）以及背景壁纸等外观方面的改动。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230201150934590.webp" alt="image-20230201150934590" style="zoom: 33%;" />
&lt;p>&lt;strong>1.字体&lt;/strong>&lt;/p>
&lt;p>在字体的选择上，建议使用针对icon字符做了补全的&lt;a href="https://www.nerdfonts.com/">Nerd Fonts&lt;/a>作为主要显示字体，官网提供了50多种程序员常用的字体打了补丁，并提供了下载，我选择了其中的Hack Nerd Font以及MesloLG Nerd Font，并使用HomeBrew进行了安装，安装命令为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">brew tap homebrew/cask-fonts &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install --cask font-&amp;lt;FONT NAME&amp;gt;-nerd-font
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将上面的&lt;code>&amp;lt;FONT NAME&amp;gt;&lt;/code>换成想要安装的字体名称即可，比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">brew tap homebrew/cask-fonts &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install --cask font-meslo-lg-nerd-font
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在Profiles中的Text下面选择下载好的字体即可。&lt;/p>
&lt;p>&lt;strong>2.主题&lt;/strong>&lt;/p>
&lt;p>iTerm2最常用的主题是&lt;a href="https://github.com/altercation/solarized">Solarized&lt;/a>，官网是：https://ethanschoonover.com/solarized/&lt;/p>
&lt;p>下载后解压文件夹，在文件夹中找到 &lt;code>iterm2-colors-solarized&lt;/code> ，然后安装里面的 &lt;code>Solarized Dark.itermcolors&lt;/code> 和 &lt;code>Solarized Light.itermcolors&lt;/code> ，也可以在 Profiles 的 Colors 标签下面选择导入安装，安装完成选择对应的主题即可，当然根据自己的背景壁纸和字体颜色可以对主题做一些定制化的修改，自己看着舒服即可。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230201154934113.webp" alt="image-20230201154934113" style="zoom: 33%;" />
&lt;h3 id="二安装oh-my-zshhttpsgithubcomohmyzshohmyzsh">二、安装&lt;a href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh&lt;/a>&lt;/h3>
&lt;p>经常使用终端的程序员肯定都知道，相比于bash，zsh的功能强大很多，可以自动补全命令、参数、文件名、进程、用户名、变量、权限符等等。在Mac系统中，从 macOS Catalina 开始，就已经使用 zsh 作为默认登录 Shell 和交互式 Shell 了，如果你是更早的版本，可以参照&lt;a href="https://support.apple.com/zh-cn/HT208050">官网的文章&lt;/a>将zsh设置为默认shell。&lt;/p>
&lt;p>而Oh My Zsh 是一款社区驱动的命令行工具，正如它的主页上说的，Oh My Zsh 是一种生活方式。它基于 zsh 命令行，提供了主题配置，插件机制，已经内置的便捷操作。给我们一种全新的方式使用命令行。&lt;/p>
&lt;p>下面来逐步安装和配置oh-my-zsh。&lt;/p>
&lt;p>使用curl或者wget的方式进行安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># curl 安装方式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># wget 安装方式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于网络问题，可能会出现如下报错：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-log" data-lang="log">https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh
正在解析主机 raw.githubusercontent.com (raw.githubusercontent.com)... 0.0.0.0
正在连接 raw.githubusercontent.com (raw.githubusercontent.com)|0.0.0.0|:443... 失败：Connection refused。
&lt;/code>&lt;/pre>&lt;p>这里再提供一种离线安装的方法，使用&lt;a href="https://gitee.com/mirrors/oh-my-zsh">gitee上的镜像项目&lt;/a>，然后在tools中找到&lt;code>install.sh&lt;/code>脚本，并在脚本目录下执行安装命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo sh ./install.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后按照提示操作即可（Y），安装成功后显示如下界面：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230131151313028.webp" alt="image-20230131151313028" style="zoom:50%;" />
&lt;h3 id="三安装powerlinehttpspowerlinereadthedocsioenlatestinstallationhtml">三、安装&lt;a href="https://powerline.readthedocs.io/en/latest/installation.html">PowerLine&lt;/a>&lt;/h3>
&lt;p>Powerline 是一个极棒的 Vim 编辑器的状态行插件，主要用于显示状态行和提示信息，适用于很多软件，比如 bash、zsh、tmux 等等。&lt;/p>
&lt;p>PowerLine是基于python开发的，所以需要使用pip安装，如果你的电脑里安装的事python2，那么命令为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install powerline-status --user
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>python3把pip改成pip3即可:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip3 install powerline-status --user
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后等待安装成功即可。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230131152454149.webp" alt="image-20230131152454149" style="zoom:50%;" />
&lt;h3 id="四配置oh-my-zsh主题">四、配置oh-my-zsh主题&lt;/h3>
&lt;p>oh-my-zsh支持配置丰富的主题，本文使用当下最流行的&lt;a href="https://github.com/romkatv/powerlevel10k">powerlevel10k&lt;/a>主题来做演示，想要寻找更多好看的主题，可以去&lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">社区&lt;/a>或者参考&lt;a href="https://www.slant.co/topics/7553/~theme-for-oh-my-zsh">此文&lt;/a>中的投票。&lt;/p>
&lt;p>执行安装命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone --depth&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> https://github.com/romkatv/powerlevel10k.git &lt;span class="nv">$ZSH_CUSTOM&lt;/span>/themes/powerlevel10k
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下载完成后需要修改 &lt;code>.zshrc&lt;/code> 来配置oh-my-zsh使用powerlevel10k主题：&lt;/p>
&lt;p>（1）执行 &lt;code>vi ~/.zshrc&lt;/code> 编辑配置文件，修改主题：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230131161302199.webp" alt="image-20230131161302199" style="zoom: 50%;" />
&lt;p>（2）将图中主体部分修改为：&lt;code>ZSH_THEME=&amp;quot;powerlevel10k/powerlevel10k&amp;quot;&lt;/code>，退出VIM编辑界面后（:wq）执行 &lt;code>source ~/.zshrc&lt;/code> ，然后自动进入powerlevel10k初始化设置界面：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230131162633820.webp" alt="image-20230131162633820" style="zoom: 50%;" />
&lt;p>第一步是安装推荐的字体，这里推荐选n，因为网络原因大概率会安装失败，最好是手动安装需要的字体。&lt;/p>
&lt;p>从第二步开始，就是选择界面的一些风格样式，基本都是界面美化相关的（毕竟是主题设置嘛），这里不多做介绍了，大家按照提示选择对应的选项即可。&lt;/p>
&lt;p>如果后续想要修改配置，再次执行 &lt;code>p10k configure&lt;/code> 命令即可。&lt;/p>
&lt;h3 id="五安装oh-my-zsh插件">五、安装oh-my-zsh插件&lt;/h3>
&lt;p>oh-my-zsh支持非常多插件，都在 &lt;code>~/.oh-my-zsh/plugins&lt;/code> 路径下，可以根据&lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">官网文档&lt;/a>选择合适的启用。除了官方提供的插件之外，还支持自定义插件，这些插件可以安装在 &lt;code>~/.oh-my-zsh/custom/plugins/&lt;/code> 路径下，这里演示其中两个插件的安装。&lt;/p>
&lt;p>&lt;strong>1.zsh-autosuggestions&lt;/strong>&lt;/p>
&lt;p>&lt;strong>命令自动提示插件&lt;/strong>，能够记住你平时输入的命令，下次再输入的时候就会有相应的提示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ~/.oh-my-zsh/custom/plugins/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-autosuggestions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>2.zsh-syntax-highlighting&lt;/strong>&lt;/p>
&lt;p>&lt;strong>语法高亮插件&lt;/strong>，为zsh语法提供突出展示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ~/.oh-my-zsh/custom/plugins/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>如果你使用的是 &lt;code>Solarized Dark&lt;/code> 主题，并且使用深色壁纸的话，高亮显示的语法可能不是很清晰，这时候可以将修改配置项的值：&lt;/p>
&lt;p>（1）找到并编辑 &lt;code>.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh&lt;/code>&lt;/p>
&lt;p>（2）修改 &lt;code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=30'&lt;/code> 的配置值为30（默认是8）&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230201164334524.webp" alt="image-20230201164334524" style="zoom:33%;" />
&lt;/blockquote>
&lt;p>安装完成后，需要编辑 &lt;code>.zshrc&lt;/code> 配置文件来启用插件（与前面安装主题的步骤相同）。&lt;/p>
&lt;p>找到原本plugins的位置，将其替换为&lt;/p>
&lt;pre tabindex="0">&lt;code>plugins=(
git
zsh-autosuggestions
zsh-syntax-highlighting
)
&lt;/code>&lt;/pre>&lt;p>至此，关于iTerm2的安装和配置就大公告成了，最终效果如下（不喜欢彩虹图标以及各类配色的可以选择更简洁的主题或者配置）。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20230201164529759.webp" alt="image-20230201164529759" style="zoom:50%;" />
&lt;h3 id="参考链接">参考链接&lt;/h3>
&lt;p>&lt;a href="https://mrseawave.github.io/blogs/articles/2021/08/29/oh-my-zsh/">oh-my-zsh - Sea's Blog&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000014992947">iTerm2 + Oh My Zsh 打造舒适终端体验&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/tags/2023/02/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/><category scheme="https://kiwi4814.github.io/tags/2023/02/mac/" term="Mac" label="Mac"/><category scheme="https://kiwi4814.github.io/tags/2023/02/oh-my-zsh/" term="oh-my-zsh" label="oh-my-zsh"/></entry><entry><title type="text">Redis实战之分布式锁</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/redis-distributed-locks/"/><id>https://kiwi4814.github.io/posts/2022/redis-distributed-locks/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-09-13T20:13:58+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">接下来的几篇文章，会学习一下Redis除了用做缓存之外的一些实际使用方法。这篇文章主……</summary><content type="html">&lt;p>接下来的几篇文章，会学习一下Redis除了用做缓存之外的一些实际使用方法。这篇文章主要探讨了分布式锁的几种实现机制和原理。&lt;/p>
&lt;h2 id="本文涉及到的redis指令及语法">本文涉及到的Redis指令及语法&lt;/h2>
&lt;h4 id="set-key-value-ex-seconds-px-milliseconds-nxxx">&lt;code>SET key value [EX seconds] [PX milliseconds] [NX|XX]&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>EX seconds&lt;/code> ： 将键的过期时间设置为 &lt;code>seconds&lt;/code> 秒。 执行 &lt;code>SET key value EX seconds&lt;/code> 的效果等同于执行 &lt;code>SETEX key seconds value&lt;/code> 。&lt;/li>
&lt;li>&lt;code>PX milliseconds&lt;/code> ： 将键的过期时间设置为 &lt;code>milliseconds&lt;/code> 毫秒。 执行 &lt;code>SET key value PX milliseconds&lt;/code> 的效果等同于执行 &lt;code>PSETEX key milliseconds value&lt;/code> 。&lt;/li>
&lt;li>&lt;code>NX&lt;/code> ： 只在键不存在时， 才对键进行设置操作。 执行 &lt;code>SET key value NX&lt;/code> 的效果等同于执行 &lt;code>SETNX key value&lt;/code> 。&lt;/li>
&lt;li>&lt;code>XX&lt;/code> ： 只在键已经存在时， 才对键进行设置操作。&lt;/li>
&lt;/ul>
&lt;h2 id="什么是分布式锁">什么是分布式锁？&lt;/h2>
&lt;p>所谓分布式锁，指的是当多个进程不在同一个系统中，当访问共享资源时，需要使用分布式锁来控制这些不同的进程对资源的访问。&lt;/p>
&lt;h3 id="分布式锁的设计原则安全性和有效性">分布式锁的设计原则——安全性和有效性&lt;/h3>
&lt;p>&lt;a href="https://redis.io/docs/reference/patterns/distributed-locks/">Redis官网&lt;/a>上对分布式锁提出至少需要满足以下三个要求：&lt;/p>
&lt;ol>
&lt;li>互斥（属于安全性）—— 在任何给定时刻，只有一个客户端可以持有锁。&lt;/li>
&lt;li>无死锁（属于有效性）—— 即使锁定资源的客户端奔溃或者被分区，也总是可以获得锁（通常通过超时机制实现）。&lt;/li>
&lt;li>容错性（属于有效性）—— 只要大多数Redis节点都启动，客户端就可以获取和释放锁。&lt;/li>
&lt;/ol>
&lt;p>此外，分布式锁的设计中还需要考虑：&lt;/p>
&lt;ol>
&lt;li>加锁解锁的&lt;strong>同源性&lt;/strong>：A加的锁，不能被B解锁&lt;/li>
&lt;li>获取锁是&lt;strong>非阻塞&lt;/strong>的：如果获取不到锁，不能无限期等待&lt;/li>
&lt;li>&lt;strong>高性能&lt;/strong>：加锁和解锁是高性能的&lt;/li>
&lt;/ol>
&lt;h2 id="分布式锁的实现方案">分布式锁的实现方案&lt;/h2>
&lt;p>分布式锁有很多种实现方案，基于不同的体系，比如基于数据库乐观锁和悲观锁实现、基于Redis实现、基于zookeeper实现等等，本文主要聊聊基于Redis实现的分布式锁。&lt;/p>
&lt;h3 id="方案一单实例redis">方案一：单实例Redis&lt;/h3>
&lt;p>所谓的分布式锁，其本质就是在分布式的系统中，当访问指定的资源时在Redis中占一个坑，当其他进程要来访问的时候，发现已经有其他进程访问了，只好放弃或者稍后重试。&lt;/p>
&lt;p>一般使用 &lt;code>setnx&lt;/code> 命令来”占坑“，用完之后使用 &lt;code>del&lt;/code> 删除。&lt;/p>
&lt;p>但是这种逻辑假如出现了异常，导致 &lt;code>del&lt;/code> 没有被执行，那么就会陷入死锁不是么？所以为了解决这个问题，我们一般还会使用 &lt;code>expire&lt;/code> 给锁加上一个过期时间，这样中间即使出现异常也可以自动释放锁。&lt;/p>
&lt;p>这时候又出现问题了，假如在 &lt;code>setnx&lt;/code> 和 &lt;code>expire&lt;/code> 命令之间断电了导致进程挂掉了，那不也会造成死锁吗？&lt;/p>
&lt;p>是的，这个问题的根源不在于设置过期时间，而是 &lt;code>setnx&lt;/code> 和 &lt;code>expire&lt;/code> 这两个命令不是原子性的，当然我们可以使用一些三方库来解决这个问题，但是这样未免有点大题小作。为了彻底解决这个问题，在Redis 2.8版本中，作者加入了 &lt;code>set&lt;/code> 指令的扩展参数，即命令 &lt;code>SET key value [EX seconds] [PX milliseconds] [NX|XX]&lt;/code> ，彻底解决了单实例下Redis分布式锁的乱象。&lt;/p>
&lt;p>我们通过一个例子来看看这种方案具体是怎么实现分布式锁的。&lt;/p>
&lt;h4 id="单实例redis分布式锁的解决方案">单实例Redis分布式锁的解决方案&lt;/h4>
&lt;h5 id="1-加锁">1. 加锁&lt;/h5>
&lt;p>首先，当我们需要分布式锁的时候，向Redis发起如下命令：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-redis" data-lang="redis">SET scanId:lock a947a56f9b40402b9db6e6be657cb9af NX PX 10000
&lt;/code>&lt;/pre>&lt;p>其中，&lt;code>scanId:lock&lt;/code> 是自己定义的，再细分的话，scanId可以代指某次扫描任务的ID，而 &lt;code>:lock&lt;/code> 中的&lt;code>:&lt;/code>只是一种写法，代表这个key是用来做分布式锁的。&lt;code>a947a56f9b40402b9db6e6be657cb9af&lt;/code>是一个随机生成的字符，必须保证全局唯一。&lt;code>NX&lt;/code>即&lt;code>setnx&lt;/code>，只有当&lt;code>scanId:lock&lt;/code> 不存在时才执行成功。&lt;code>PX 10000&lt;/code> 指的是过期时间10秒。执行此命令后成功则表明服务成功的获得了锁。&lt;/p>
&lt;h5 id="2-解锁">2. 解锁&lt;/h5>
&lt;p>在加锁的时候，我们注意到value是一个随机的字符串，这么设计的原因是我们需要保证加锁和解锁的一定是同一个进程。那么我们在解锁的时候需要对这一点进行校验，也就是判断进程持有的value和Redis内存储的value是不是一致的。由于这个校验需要两个命令，所以我们使用lua脚本来解决（lua脚本可以保证连续多个指令的原子性执行）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">if&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">ARGV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kr">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">return&lt;/span> &lt;span class="n">redis.call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">KEYS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但这也不是一个完美的方案，只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其他线程也会乘虚而入。当然我们可以考虑引入可重入锁来解决，但是大部分情况下没有必要，这增加了客户端的复杂性。&lt;/p>
&lt;h3 id="方案二redis集群模式">方案二：Redis集群模式&lt;/h3>
&lt;p>假设有两个服务A、B都希望获得锁，有一个包含了5个redis master的Redis Cluster，执行过程大致如下:&lt;/p>
&lt;ol>
&lt;li>客户端获取当前时间戳，单位: 毫秒&lt;/li>
&lt;li>服务A轮寻每个master节点，尝试创建锁。(这里锁的过期时间比较短，一般就几十毫秒) RedLock算法会尝试在大多数节点上分别创建锁，假如节点总数为n，那么大多数节点指的是n/2+1。&lt;/li>
&lt;li>客户端计算成功建立完锁的时间，如果建锁时间小于超时时间，就可以判定锁创建成功。如果锁创建失败，则依次(遍历master节点)删除锁。&lt;/li>
&lt;li>只要有其它服务创建过分布式锁，那么当前服务就必须轮寻尝试获取锁。&lt;/li>
&lt;/ol>
&lt;h4 id="进一步理解">进一步理解&lt;/h4>
&lt;ol>
&lt;li>借助Redis实现分布式锁时，有一个共同的缺陷: 当获取锁被拒绝后，需要不断的循环，重新发送获取锁(创建key)的请求，直到请求成功。这就造成空转，浪费宝贵的CPU资源。&lt;/li>
&lt;li>RedLock算法本身有争议，具体看这篇文章&lt;a href="https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html">How to do distributed locking&lt;/a> 以及作者的回复&lt;a href="http://antirez.com/news/101">Is Redlock safe?&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>有人可能要进一步问了，那该怎么做才能保证锁的绝对安全呢？&lt;/p>
&lt;p>对此我只能说，鱼和熊掌不可兼得，我们之所以用Redis作为分布式锁的工具，很大程度上是因为Redis本身效率高且单进程的特点，即使在高并发的情况下也能很好的保证性能，但很多时候，性能和安全不能完全兼顾，如果你一定要保证锁的安全性的话，可以用其他的中间件如db、zookeeper来做控制，这些工具能很好的保证锁的安全，但性能方面只能说是差强人意，否则大家早就用上了。&lt;/p>
&lt;p>一般来说，用Redis控制共享资源并且还要求数据安全要求较高的话，最终的保底方案是对业务数据做幂等控制，这样一来，即使出现多个客户端获得锁的情况也不会影响数据的一致性。当然，也不是所有的场景都适合这么做，具体怎么取舍就需要各位看官自己处理啦，毕竟，没有完美的技术，只有适合的才是最好的。&lt;/p>
&lt;h2 id="基于客户端的实现方式">基于客户端的实现方式&lt;/h2>
&lt;p>待续..&lt;/p></content><category scheme="https://kiwi4814.github.io/series/2022/09/redis%E5%AE%9E%E6%88%98/" term="Redis实战" label="Redis实战"/><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2022/09/redis/" term="Redis" label="Redis"/></entry><entry><title type="text">Redis缓存相关问题总结</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/redis-cache/"/><id>https://kiwi4814.github.io/posts/2022/redis-cache/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-09-12T08:50:47+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本文为阅读笔记，主要内容源自极客时间蒋德均老师的《Redis核心技术与实战》。 我们知……</summary><content type="html">&lt;blockquote>
&lt;p>本文为阅读笔记，主要内容源自极客时间蒋德均老师的《Redis核心技术与实战》。&lt;/p>
&lt;/blockquote>
&lt;p>我们知道，我们使用Redis的主要用途就是做缓存，一般来说，根据Redis缓存是否接受读写请求，我们可以把它分为只读缓存和读写缓存。&lt;/p>
&lt;p>所谓的&lt;strong>只读缓存&lt;/strong>，指的是查询数据的时候先从Redis查询，如果未命中那么才会从数据库查询并SET到Redis缓存中，而在对数据进行删改的时候，除了本身操作数据库之外，还会把相应的缓存数据删除，保证Redis下次查询的时候不会命中。而&lt;strong>读写缓存&lt;/strong>指的是对数据的所有读请求和写请求都会发送到缓存中，在缓存中对数据进行增删改操作。另外，对于读写缓存来说，还存在同步直写和异步写回两种策略，具体的区别可以根据下图理解。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img009d055bb91d42c28b9316c649f87f66.jpg" alt="img" style="zoom:50%;" />
&lt;p>但是在实际的应用过程中，我们经常会遇到一些异常问题，总结下来有以下几点：&lt;/p>
&lt;ul>
&lt;li>缓存和数据库的一致性问题&lt;/li>
&lt;li>缓存雪崩&lt;/li>
&lt;li>缓存击穿&lt;/li>
&lt;li>缓存穿透&lt;/li>
&lt;/ul>
&lt;p>本文将对这几个问题进行展开，具体讲讲 什么时候下会引起这些问题 以及解决的方案是什么。&lt;/p>
&lt;h2 id="数据一致性问题">数据一致性问题&lt;/h2>
&lt;p>所谓的数据一致性问题，就是因为某些原因导致的Redis缓存中数据与数据库数据不一致的问题。&lt;/p>
&lt;p>对于读写缓存来说，如果缓存的数据本身对数据一致性要求不高，是可以采用性能更好的异步写回策略的；对于其他数据，想要保证数据一致性，那么就要采用同步直写策略。&lt;/p>
&lt;p>但是无论是只读缓存还是读写缓存的同步直写策略，都必须保证对Redis和数据库的操作必须是原子性的，两者有任何一边失败，都会带来数据一致性问题。
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img2c376b536aff9d14d8606499f401cdac.jpg" alt="img" style="zoom:50%;" />&lt;/p>
&lt;p>对于上面这两种情况，我们可以根据实际情况（是否有并发请求）来决定采用什么方案。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img11ae5e620c63de76448bc658fe6a496f.jpg" alt="img" style="zoom:50%;" />
&lt;p>在大多数业务场景下，我们会把 Redis 作为只读缓存使用。针对只读缓存来说，我们既可以先删除缓存值再更新数据库，也可以先更新数据库再删除缓存。我的建议是，优先使用先更新数据库再删除缓存的方法，原因主要有两个：&lt;/p>
&lt;ul>
&lt;li>先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力；&lt;/li>
&lt;li>如果业务应用中读取数据库和写缓存的时间不好估算，那么，延迟双删中的等待时间就不好设置。&lt;/li>
&lt;/ul>
&lt;p>不过，当使用先更新数据库再删除缓存时，也有个地方需要注意，如果业务层要求必须读取一致的数据，那么，我们就需要在更新数据库时，先在 Redis 缓存客户端暂存并发读请求，等数据库更新完、缓存值删除后，再读取数据，从而保证数据一致性。&lt;/p>
&lt;h2 id="缓存雪崩">缓存雪崩&lt;/h2>
&lt;h3 id="定义">定义&lt;/h3>
&lt;p>所谓缓存雪崩，指的是大量的应用请求无法在Redis缓存中进行处理，从而导致大量请求发到数据库层，导致数据库层的压力激增。&lt;/p>
&lt;h3 id="原因及处理方案">原因及处理方案&lt;/h3>
&lt;p>一般由两个原因导致，针对两种原因的处理方案也不一样。&lt;/p>
&lt;p>&lt;strong>第一种，缓存中有大量数据同时过期，导致应用直接去请求数据库。&lt;/strong>&lt;/p>
&lt;p>针对这种情况，我们可以通过避免给大量数据设置同样的过期时间，如果确实有需求要求缓存同时失效，也可以给失效时间加上一个随机数（比如1~3分钟）。&lt;/p>
&lt;p>此外，我们还可以通过服务降级来应对缓存雪崩。&lt;/p>
&lt;p>所谓服务降级，是指发生缓存雪崩时，针对不同的数据采取不同的处理方式。例如，针对非核心数据，可以暂时停止查询缓存，直接返回预定义信息或者错误信息；针对核心数据，仍然允许查缓存并且读取数据库，这样数据库的压力就不会那么大了。&lt;/p>
&lt;p>&lt;strong>第二种，Redis缓存实例发生故障宕机了。&lt;/strong>&lt;/p>
&lt;p>如果是重度依赖Redis缓存的系统，由于Redis的吞吐量和数据库相比远远超出，所以这种情况下数据库很可能因为压力过大而崩溃。&lt;/p>
&lt;p>如果出现这种情况，我们可以在业务系统中实现服务熔断或请求限流机制。通过限制Redis缓存请求或者限制请求的频率，避免过多的请求到达数据库来临时应对；当然了，为了防止这种情况的发生，最重要的还是要做好事前预防。比如通过哨兵、集群来尽量保证Redis的高可用。&lt;/p>
&lt;h2 id="缓存击穿">缓存击穿&lt;/h2>
&lt;p>缓存击穿指的是，针对某些访问特别频繁的热点数据的请求，无法在缓存中处理，紧接着全部到达了后端数据库，导致数据库压力激增而影像处理其他请求。对于这种情况，建议不要给热点数据设置过期时间了，这样一来，对热点数据的访问请求，都可以在缓存中进行处理，而 Redis 数万级别的高吞吐量可以很好地应对大量的并发请求访问。&lt;/p>
&lt;h2 id="缓存穿透">缓存穿透&lt;/h2>
&lt;h3 id="定义-1">定义&lt;/h3>
&lt;p>缓存穿透是指要访问的数据既不在Redis中，也不在数据库中，导致每次这样的请求都会先访问缓存，再去访问数据库，如果短时间内有大量这样的请求，那么就会同时给缓存和数据库带来压力。&lt;/p>
&lt;h3 id="原因及处理方案-1">原因及处理方案&lt;/h3>
&lt;p>一般来说，有两种情况：第一种是业务层误操作，误删除了数据，导致缓存和数据库中都没有数据，第二种是有人恶心攻击，即专门访问数据库中没有的数据。&lt;/p>
&lt;p>这里提供三种处理方案。&lt;/p>
&lt;p>**第一种方案是，缓存空值或者缺省值。**这个很好理解，当出现这种数据时，在Redis中缓存空值或者缺省值，这样就避免了大量请求到数据库了。&lt;/p>
&lt;p>&lt;strong>第二种方案是，使用布隆过滤器快速判断数据是否存在，避免从数据库中查询。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>第三种方案是，在请求入口的前端进行请求检测。&lt;/strong> 缓存穿透的一个原因是有大量的恶意数据请求访问不存在的数据，这时候可以在前端对请求进行合法性检测，过滤恶意的请求（例如参数不合理、非法值等等），这样就不会出现缓存穿透问题了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>针对缓存雪崩、缓存击穿、缓存穿透这三种缓存异常，对应的原因处理方案，整理在下图了，方便快速复习。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//imgb5bd931239be18bef24b2ef36c70e9e1.jpg" alt="img" style="zoom:50%;" />
&lt;p>其中，服务熔断、服务降级、请求限流这些方法都是属于“有损”方案，在保证数据库和整体系统稳定的同时，会对业务应用带来负面影响。所以，在实际开发中，尽量使用”预防式方案“：&lt;/p>
&lt;ul>
&lt;li>针对缓存雪崩，合理设置数据过期时间以及搭建高可用的集群&lt;/li>
&lt;li>针对缓存击穿，不要给热点数据设置过期时间&lt;/li>
&lt;li>针对缓存穿透，提前在入口前端实现恶意请求检测，或者规范删除操作防止误删除&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/series/2022/09/redis%E5%AE%9E%E6%88%98/" term="Redis实战" label="Redis实战"/><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2022/09/redis/" term="Redis" label="Redis"/></entry><entry><title type="text">Redis常用数据结构小结</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/redis-data-structures/"/><id>https://kiwi4814.github.io/posts/2022/redis-data-structures/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-09-11T22:50:47+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本文的内容为阅读笔记，主要内容源自图解 Redis 数据结构以及Redis核心技术与实战 | 数据结……</summary><content type="html">&lt;blockquote>
&lt;p>本文的内容为阅读笔记，主要内容源自&lt;a href="https://xiaolincoding.com/Redis/data_struct/data_struct.html">图解 Redis 数据结构&lt;/a>以及&lt;a href="https://time.geekbang.org/column/article/268253">Redis核心技术与实战 | 数据结构&lt;/a>，仅为了总结和方便理解。&lt;/p>
&lt;/blockquote>
&lt;p>如果被问到Redis支持哪些数据结构，我们一般都会脱口而出这五种：String、List、Hash、Set、Sorted Set，但其实严格来说这五种只是Redis键值对种值得数据类型，也就是数据得保存形式。而我们所说的数据结构，其实是Redis底层的实现，如下图所示，Redis底层的实现有很多种，在不同的版本也在不断的迭代，而这些数据结构正是【Redis为什么这么快】这个问题的主要原因之一。&lt;/p>
&lt;blockquote>
&lt;p>【题外话】&lt;/p>
&lt;p>我们经常能看到有序列表（Sorted Set）也被称作为Zset，这种叫法的直接来源是因为有序列表的命令就是zset，而设计者为什么这么命名的原因其实并不复杂，只是一种文化而已，在redis的issue中有人提到了&lt;a href="https://github.com/redis/redis/issues/4024">这个问题&lt;/a>，感兴趣的可以看看原答案。&lt;/p>
&lt;/blockquote>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img202208161405062.png" alt="img" style="zoom: 50%;" />
&lt;p>接下来，让我们具体分析下Redis底层的数据结构，当然，在分析键值对种“值”的底层结构之前，我们需要先了解下键和值是如何映射的。&lt;/p>
&lt;h2 id="键和值的结构组织">键和值的结构组织&lt;/h2>
&lt;p>为了实现从键到值得快速访问，Redis使用了一个hash表来保存所有键值对。hash表中的每一个元素叫hash桶，hash桶中包含两个指针，分别指向实际的键和值，这样即使值是一个集合，也可以被查找到。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img1cc8eaed5d1ca4e3cdbaa5a3d48dfb5f.jpg" alt="img" style="zoom: 50%;" />
&lt;p>&lt;strong>第一个问题：hash冲突&lt;/strong>&lt;/p>
&lt;p>我们知道Hash表查找的时间复杂度是O(1)，其查找过程主要依赖哈希计算，但是我们知道hash计算是会有冲突的，所以当Redis中被写入越来越多的数据时，hash冲突就在所难免。&lt;/p>
&lt;p>解决的方法很简单，Redis采用了链式哈希，类似Java 8之前的HashMap的数据结构，当哈希冲突时，落到同一个Hash桶的数据用一个链表保存。但是，这样仍然有问题，随着数据越来越多，链表上的数据也会越来越多，会导致某些元素的查找时间会变长，这对于追求快的Redis来说是不可接受的。&lt;/p>
&lt;p>&lt;strong>第二个问题：链表过长导致查询效率降低&lt;/strong>&lt;/p>
&lt;p>首先说解决方案：Redis会对哈希表做rehash操作，也就是增加现有的哈希桶数量，让元素分散保存。为了让rehash操作更高效，Redis默认使用两个全局哈希表，一开始插入数据时只会使用哈希表1，随着数据逐渐增多，Redis开始进行rehash操作：&lt;/p>
&lt;ul>
&lt;li>给哈希表2分配更大的空间&lt;/li>
&lt;li>将哈希表1的数据拷贝到哈希表2&lt;/li>
&lt;li>释放哈希表1的空间&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第三个问题：rehash导致的线程阻塞&lt;/strong>&lt;/p>
&lt;p>rehash的过程中涉及到大量的数据拷贝，这时候是会导致线程阻塞，为了解决这个问题，redis采用了&lt;strong>渐进式 rehash&lt;/strong>。&lt;/p>
&lt;p>简单来说，拷贝数据时，redis仍然正常处理客户端请求，但是每处理一个请求时，都会将哈希表1中的对应索引位置的数据拷贝到哈希表2，这样就巧妙的将一次拷贝的开销，分摊到了多次处理请求的过程中，避免了耗时操作。&lt;/p>
&lt;h2 id="底层数据结构">底层数据结构&lt;/h2>
&lt;p>对于String来说，找到哈希桶就可以直接进行增删改查操作了，所以复杂度仍然是O(1)。但是对于集合类型来说，其操作效率取决于集合底层的数据结构。&lt;/p>
&lt;p>对于集合类型而言，底层的数据结构主要包括：&lt;strong>整数数组、双向链表、哈希表、压缩列表和跳表&lt;/strong>，redis新版本中还引入了quicklist和listpack，用来替换双向链表和压缩链表。接下来，让我们逐一分析下这几种数据结构的特点。&lt;/p>
&lt;h3 id="哈希表">哈希表&lt;/h3>
&lt;p>哈希表的特质在键值对的结构组织中基本已经说过了，这里有几点需要注意下。&lt;/p>
&lt;ol>
&lt;li>当我们存入的数据类型为hash对象时，底层编码不一定是hash。当哈希中的元素个数比较少并且每个元素的值占用空间比较小的时候，Redis就会使用压缩列表做为哈希的内部编码。&lt;/li>
&lt;li>rehash是一个过程，在这个过程中，查找值的时候会先去哈希表1查再去哈希表2查，因为新增的数据会增加到哈希表2，哈希表1的数据会越来越少，直到完成rehash操作。&lt;/li>
&lt;/ol>
&lt;h3 id="整数数组">整数数组&lt;/h3>
&lt;p>整数集合是 Set 对象的底层实现之一。当一个 Set 对象只包含整数值元素，并且元素数量不大时，就会使用整数集这个数据结构作为底层实现。&lt;/p>
&lt;p>整数集合本质上是一块连续的内存空间，整数数组有个扩容升级的过程，当你存入超过阈值大小的数据时触发且不会降级。&lt;/p>
&lt;h3 id="双向链表">双向链表&lt;/h3>
&lt;p>在Redis 3.0 的版本中，Redis 的 List 对象的底层实现之一就是双向链表。&lt;/p>
&lt;p>双向链表的优点在于获取表头节点、表尾节点，以及任意节点的前置节点和后置节点的时候时间复杂度只需要O(1)，并且由于redis的链表结构存储了节点数量，所以获取链表的节点数量也仅需要O(1)的时间复杂度。&lt;/p>
&lt;p>但是链表的缺点也很明显，链表每个节点之间的内存是不连续的，意味着无法很好地利用CPU缓存。因此，Redis 3.0 的 List 对象在数据量比较少的情况下，会采用「压缩列表」作为底层数据结构的实现，它的优势是节省内存空间，并且是内存紧凑型的数据结构。而在Redis3.2之后，List 对象的底层改由 「&lt;strong>quicklist&lt;/strong>」数据结构实现。&lt;/p>
&lt;h3 id="压缩列表">压缩列表&lt;/h3>
&lt;p>压缩列表是由一个&lt;strong>连续内存组成的顺序型数据结构&lt;/strong>。一个压缩列表可以包含任意多个节点，每个节点上可以保存一个字节数组或整数值。它是Redis为了节省内存空间而开发的。与数组不同的是，压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img9587e483f6ea82f560ff10484aaca4a0.jpg" alt="img" style="zoom:50%;" />
&lt;p>在压缩列表中，如果我们要查找定位第一个元素和最后一个元素，可以通过表头三个字段的长度直接定位，复杂度是 O(1)。而查找其他元素时，就没有这么高效了，只能逐个查找，此时的复杂度就是 O(N) 了。&lt;/p>
&lt;p>在redis中，下面的这些情况都会使用到压缩列表：&lt;/p>
&lt;ul>
&lt;li>当哈希（hash）中的元素个数比较少并且每个元素的值占用空间比较小的时候，Redis就会使用压缩列表做为哈希的内部编码。&lt;/li>
&lt;li>当有序集合（zset）中的元素个数比较少并且每个元素的值占用空间比较小的时候，Redis也会使用压缩列表做为有序集合的内部编码。&lt;/li>
&lt;/ul>
&lt;h3 id="quicklist">quicklist&lt;/h3>
&lt;p>在 Redis 3.2 的时候，List 对象的底层改由 quicklist 数据结构实现。&lt;/p>
&lt;p>其实 quicklist 就是「双向链表 + 压缩列表」组合，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表。结构如下所示：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//imgf46cbe347f65ded522f1cc3fd8dba549.png" alt="img" style="zoom: 88%;" />
&lt;p>在向 quicklist 添加一个元素的时候，不会像普通的链表那样，直接新建一个链表节点。而是会检查插入位置的压缩列表是否能容纳该元素，如果能容纳就直接保存到 quicklistNode 结构里的压缩列表，如果不能容纳，才会新建一个新的 quicklistNode 结构。&lt;/p>
&lt;h3 id="跳表">跳表&lt;/h3>
&lt;p>跳表是有序列表（zset）的内部编码之一，也是一种重要的数据结构。&lt;/p>
&lt;p>我们知道zset可以将元素及其score值加到有序集中，那么作为底层数据结构的跳表，具体是怎么实现的呢？&lt;/p>
&lt;p>首先，我们知道对于有序数组，我们可以使用二分查找的方式快速定位一个数字，是因为数组具有随机查找的特性，每次找中位数比较即可。但如果对于一个有序的链表，二分查找就不适用了。所以对于链表，出现了一种跳表的数据结构，其原理就是在有序链表上面增加了多级索引，下图演示了在跳表的结构下查找数据的过程：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img1eca7135d38de2yy16681c2bbc4f3fb4.jpg" alt="img" style="zoom:50%;" />
&lt;p>Redis对于增加到zset中的每一个元素，其层数都是随机分配的。跳表采取了一种空间换时间的方法，将链表的时间复杂度降到了O(logN)。至于为什么不采用平衡树？主要是基于以下几点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>从内存占用上来比较，跳表比平衡树更灵活一些&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>在做范围查找的时候，跳表比平衡树操作要简单&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>从算法实现难度上来比较，跳表比平衡树要简单得多&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Redis 之所以能快速操作键值对，一方面是因为 O(1) 复杂度的哈希表被广泛使用，包括 String、Hash 和 Set，它们的操作复杂度基本由哈希表决定，另一方面，Sorted Set 也采用了 O(logN) 复杂度的跳表。不过，集合类型的范围操作，因为要遍历底层数据结构，复杂度通常是 O(N)。这里，我的建议是：用其他命令来替代，例如可以用 SCAN 来代替，避免在 Redis 内部产生费时的全集合遍历操作。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//imgfb7e3612ddee8a0ea49b7c40673a0cf0.jpg" alt="img" style="zoom:50%;" />
&lt;p>当然，我们不能忘了复杂度较高的 List 类型，它的两种底层实现结构：双向链表和压缩列表的操作复杂度都是 O(N)。因此，我的建议是：因地制宜地使用 List 类型。例如，既然它的 POP/PUSH 效率很高，那么就将它主要用于 FIFO 队列场景，而不是作为一个可以随机读写的集合。&lt;/p></content><category scheme="https://kiwi4814.github.io/series/2022/09/redis%E5%AE%9E%E6%88%98/" term="Redis实战" label="Redis实战"/><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2022/09/redis/" term="Redis" label="Redis"/></entry><entry><title type="text">腾讯云服务器安装MySQL 5.7</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/centos-mysql/"/><id>https://kiwi4814.github.io/posts/2022/centos-mysql/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-09-08T23:24:20+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">操作系统： CentOS 7.6 64bit 安装步骤 1. 下载MySQL yum包 1 wget http://repo.mysql.com/mysql57-community-release-el7-11.noarch.rpm 安装日志： --2022-09-08 22:55:04-- http://repo.mysql.com/mysql57-community-release-el7-11.noarch.rpm Resolving repo.mysql.com (repo.mysql.com)... 23.206.160.230 Connecting to repo.mysql.com……</summary><content type="html">&lt;p>操作系统： CentOS 7.6 64bit&lt;/p>
&lt;h3 id="安装步骤">安装步骤&lt;/h3>
&lt;h4 id="1-下载mysql-yum包">1. 下载MySQL yum包&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget http://repo.mysql.com/mysql57-community-release-el7-11.noarch.rpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装日志：&lt;/p>
&lt;pre tabindex="0">&lt;code>--2022-09-08 22:55:04-- http://repo.mysql.com/mysql57-community-release-el7-11.noarch.rpm
Resolving repo.mysql.com (repo.mysql.com)... 23.206.160.230
Connecting to repo.mysql.com (repo.mysql.com)|23.206.160.230|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 25680 (25K) [application/x-redhat-package-manager]
Saving to: ‘mysql57-community-release-el7-11.noarch.rpm’
100%[=========================================================================================================================================================================&amp;gt;] 25,680 31.8KB/s in 0.8s
2022-09-08 22:55:06 (31.8 KB/s) - ‘mysql57-community-release-el7-11.noarch.rpm’ saved [25680/25680]
&lt;/code>&lt;/pre>&lt;h4 id="2-安装mysql源">2. 安装MySQL源&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rpm -Uvh mysql57-community-release-el7-11.noarch.rpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装日志：&lt;/p>
&lt;pre tabindex="0">&lt;code>warning: mysql57-community-release-el7-11.noarch.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY
Preparing... ################################# [100%]
Updating / installing...
1:mysql57-community-release-el7-11 ################################# [100%]
&lt;/code>&lt;/pre>&lt;h4 id="3-安装mysql服务端需要等待一段时间">3. 安装MySQL服务端（需要等待一段时间）&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">yum install -y mysql-community-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装过程报错：&lt;/p>
&lt;pre tabindex="0">&lt;code>......
Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql
Importing GPG key 0x5072E1F5:
Userid : &amp;#34;MySQL Release Engineering &amp;lt;mysql-build@oss.oracle.com&amp;gt;&amp;#34;
Fingerprint: a4a9 4068 76fc bd3c 4567 70c8 8c71 8d3b 5072 e1f5
Package : mysql57-community-release-el7-11.noarch (installed)
From : /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql
Public key for mysql-community-client-5.7.39-1.el7.x86_64.rpm is not installed
Failing package is: mysql-community-client-5.7.39-1.el7.x86_64
GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql
&lt;/code>&lt;/pre>&lt;p>原因是Mysql的GPG升级了，需要重新获取:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后再次执行&lt;code>yum install -y mysql-community-server&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>......
Total size: 210 M
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
Warning: RPMDB altered outside of yum.
Installing : mysql-community-common-5.7.39-1.el7.x86_64 1/6
Installing : mysql-community-libs-5.7.39-1.el7.x86_64 2/6
Installing : mysql-community-client-5.7.39-1.el7.x86_64 3/6
Installing : mysql-community-server-5.7.39-1.el7.x86_64 4/6
Installing : mysql-community-libs-compat-5.7.39-1.el7.x86_64 5/6
Erasing : 1:mariadb-libs-5.5.68-1.el7.x86_64 6/6
Verifying : mysql-community-client-5.7.39-1.el7.x86_64 1/6
Verifying : mysql-community-server-5.7.39-1.el7.x86_64 2/6
Verifying : mysql-community-common-5.7.39-1.el7.x86_64 3/6
Verifying : mysql-community-libs-5.7.39-1.el7.x86_64 4/6
Verifying : mysql-community-libs-compat-5.7.39-1.el7.x86_64 5/6
Verifying : 1:mariadb-libs-5.5.68-1.el7.x86_64 6/6
Installed:
mysql-community-libs.x86_64 0:5.7.39-1.el7 mysql-community-libs-compat.x86_64 0:5.7.39-1.el7 mysql-community-server.x86_64 0:5.7.39-1.el7
Dependency Installed:
mysql-community-client.x86_64 0:5.7.39-1.el7 mysql-community-common.x86_64 0:5.7.39-1.el7
Replaced:
mariadb-libs.x86_64 1:5.5.68-1.el7
Complete!
&lt;/code>&lt;/pre>&lt;h4 id="4-启动mysql">4. 启动MySQL&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">systemctl start mysqld.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="5-检查是否启动成功">5. 检查是否启动成功&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">systemctl status mysqld.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre tabindex="0">&lt;code> mysqld.service - MySQL Server
Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)
Active: active (running) since Thu 2022-09-08 23:08:46 CST; 7s ago
Docs: man:mysqld(8)
http://dev.mysql.com/doc/refman/en/using-systemd.html
Process: 22378 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)
Process: 22290 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)
Main PID: 22381 (mysqld)
Tasks: 27
Memory: 327.0M
CGroup: /system.slice/mysqld.service
└─22381 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid
Sep 08 23:08:35 VM-12-8-centos systemd[1]: Starting MySQL Server...
Sep 08 23:08:46 VM-12-8-centos systemd[1]: Started MySQL Server.
&lt;/code>&lt;/pre>&lt;h4 id="6-获取临时密码mysql57为root用户随机生成了一个密码">6. 获取临时密码（MySQL5.7为root用户随机生成了一个密码）&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep &lt;span class="s1">&amp;#39;temporary password&amp;#39;&lt;/span> /var/log/mysqld.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>2022-09-08T15:08:41.707233Z 1 [Note] A temporary password is generated for root@localhost: 5I:Mpir0*Vco
&lt;/code>&lt;/pre>&lt;h4 id="7-通过临时密码登录mysql进行修改密码操作">7. 通过临时密码登录MySQL，进行修改密码操作&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mysql -uroot -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用临时密码登录后，不能进行其他的操作，否则会报错，这时候我们进行修改密码操作。&lt;/p>
&lt;p>&lt;strong>因为MySQL的密码规则需要很复杂，我们一般自己设置的不会设置成这样，所以我们全局修改一下。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">global&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">validate_password_policy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">global&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">validate_password_length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时候我们就可以自己设置想要的密码了：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IDENTIFIED&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;yourpassword&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，授权其他机器远程登录：&lt;/p>
&lt;pre tabindex="0">&lt;code>ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;yourpassword&amp;#39;;
&lt;/code>&lt;/pre>&lt;h4 id="8-开机自启动">8. 开机自启动&lt;/h4>
&lt;p>先退出mysql命令行，然后输入以下命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">systemctl &lt;span class="nb">enable&lt;/span> mysqld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl daemon-reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="9-修改mysql配置">9. 修改MySQL配置&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vim /etc/my.cnf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改成如下配置：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cnf" data-lang="cnf"># For advice on how to change settings please see
# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html
[mysql]
default-character-set=utf8
[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
default-storage-engine=INNODB
character_set_server=utf8
symbolic-links=0
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
&lt;/code>&lt;/pre>&lt;p>重启：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">service mysqld restart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="10-防火墙开放3306端口">10. 防火墙开放3306端口&lt;/h4>
&lt;pre tabindex="0">&lt;code>firewall-cmd --state
firewall-cmd --zone=public --add-port=3306/tcp --permanent
firewall-cmd --reload
&lt;/code>&lt;/pre>&lt;p>这一步骤服务器警告：&lt;/p>
&lt;pre tabindex="0">&lt;code>➜ / firewall-cmd --state
not running
&lt;/code>&lt;/pre>&lt;p>改为在腾讯云控制台增加防火墙规则，同样生效：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//imgimage-20220908233313450.png" alt="image-20220908233313450">&lt;/p>
&lt;h4 id="11-卸载mysql仓库">11. 卸载MySQL仓库&lt;/h4>
&lt;p>一开始的时候我们安装的yum，每次yum操作都会更新一次，耗费时间，我们把他卸载掉&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rpm -qa &lt;span class="p">|&lt;/span> grep mysql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>卸载日志:&lt;/p>
&lt;pre tabindex="0">&lt;code>➜ / rpm -qa | grep mysql
mysql-community-common-5.7.39-1.el7.x86_64
mysql-community-server-5.7.39-1.el7.x86_64
mysql-community-client-5.7.39-1.el7.x86_64
mysql57-community-release-el7-11.noarch
mysql-community-libs-5.7.39-1.el7.x86_64
mysql-community-libs-compat-5.7.39-1.el7.x86_64
&lt;/code>&lt;/pre>&lt;p>然后执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">yum -y remove mysql57-community-release-el7-11.noarch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>日志：&lt;/p>
&lt;pre tabindex="0">&lt;code>Loaded plugins: fastestmirror, langpacks
Resolving Dependencies
--&amp;gt; Running transaction check
---&amp;gt; Package mysql57-community-release.noarch 0:el7-11 will be erased
--&amp;gt; Finished Dependency Resolution
Dependencies Resolved
===================================================================================================================================================================================================================
Package Arch Version Repository Size
===================================================================================================================================================================================================================
Removing:
mysql57-community-release noarch el7-11 installed 31 k
Transaction Summary
===================================================================================================================================================================================================================
Remove 1 Package
Installed size: 31 k
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
Erasing : mysql57-community-release-el7-11.noarch 1/1
Verifying : mysql57-community-release-el7-11.noarch 1/1
Removed:
mysql57-community-release.noarch 0:el7-11
Complete!
&lt;/code>&lt;/pre>&lt;h3 id="数据库操作小结">数据库操作小结&lt;/h3>
&lt;p>（1）查看mysql是否启动：service mysqld status&lt;/p>
&lt;p>启动mysql：service mysqld start&lt;/p>
&lt;p>停止mysql：service mysqld stop&lt;/p>
&lt;p>重启mysql：service mysqld restart&lt;/p>
&lt;p>（2）查看临时密码：grep password /var/log/mysqld.log&lt;/p></content><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2022/09/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库"/></entry><entry><title type="text">再读JDK8中的函数式编程</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/java8-functional-programming/"/><id>https://kiwi4814.github.io/posts/2022/java8-functional-programming/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-07-26T21:40:15+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">用了好几年的JDK8 “函数式编程”，类似stream流、lambda等语法都用的“炉……</summary><content type="html">&lt;p>用了好几年的JDK8 “函数式编程”，类似stream流、lambda等语法都用的“炉火纯青”了，却仍然还是免不了有时候还是需要检索一些复杂的语法，比如&lt;code>flatmap&lt;/code>、&lt;code>mapreduce&lt;/code>等平时很少用到的语法。想起来自己也好像只是粗略的读过，并没有任何精读，于是便有了这篇文章，在这次重新去了解函数式编程的过程中，记录了一些知识要点以及疑惑。&lt;/p>
&lt;p>如果想要完整的了解JDK8的新特性，推荐&lt;a href="https://wizardforcel.gitbooks.io/java8-new-features/content/index.html">读这里&lt;/a>。当然在下文中也会摘录很多其他文章，都是在看的过程中针对自己的疑问检索的，对相关章节感兴趣的也可以跳转查看。&lt;/p>
&lt;h2 id="1-函数式编程">1. 函数式编程&lt;/h2>
&lt;p>对于函数式编程，能讲的有很多，我自己也没有完全理解，想要深入研究的小伙伴可以参见&lt;a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/">函数式编程指北&lt;/a>。&lt;/p>
&lt;p>下面是结合一些文章总结出来的概述：&lt;/p>
&lt;p>**Java语言的面向对象编程是对数据进行抽象；而函数式编程是对行为本身进行抽象。**其核心思想是: 使用不可变值和函数，函数对一个值进行处理，映射成另一个值。&lt;/p>
&lt;p>我们知道lambda表达式本质上就是一个匿名函数，而Java8引入这一点：&lt;strong>把函数行为本身作为参数往下传递&lt;/strong>，才正式开始让Java走向函数式编程。&lt;/p>
&lt;blockquote>
&lt;p>扩展阅读 —— 《架构整洁之道》对于这几种编程方式的总结&lt;/p>
&lt;ul>
&lt;li>结构化编程是对程序控制权的直接转移的限制（Structured programming is discipline imposed upon direct transfer of control.）&lt;/li>
&lt;li>面向对象编程是对程序控制权的间接转移的限制（Object-oriented programming is discipline imposed upon indirect transfer of control.）&lt;/li>
&lt;li>函数式编程是对程序中赋值操作的限制（Functional programming is discipline imposed upon variable assignment.）&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="2函数式接口">2.函数式接口&lt;/h2>
&lt;h3 id="default方法">default方法&lt;/h3>
&lt;p>在说函数式接口之前，我觉得有必要说说Java8中新增的关键字 —— default。其定义很简单，接口可以有默认的实现，不需要其实现类去实现这个方法，只需要在这个方法之前加上default关键字即可。&lt;/p>
&lt;p>&lt;strong>那么，为什么Java8中要增加这个关键字呢？&lt;/strong>&lt;/p>
&lt;p>首先，最直接的原因，Java8中增加了lambda表达式，需要在原本的接口中增加新的方法（比如 foreach 方法），然而接口的规范要求其实现类必须实现所有的方法，所以没办法无缝兼容之前的发布版本；其次，以前只有抽象类可以增加方法体，所以当一个接口需要有一个通用的方法的时候，需要为每个实现类都复制一份相同的实现，或者写一个抽象方法去继承，但是这种方式破坏了接口设计的初衷（抽象类表示”is-a“，接口表示”like-a“）。&lt;/p>
&lt;h3 id="函数式接口">函数式接口&lt;/h3>
&lt;p>我们知道接口中的方法一定是抽象的，默认情况下可以省略 public 和 abstract 。平时在开发功能的时候，一般会在一个接口中定义不少抽象方法（拿一个最简单的功能来说至少有增删改查对吧），但是如果我们定义一个仅包含单个抽象方法的接口，那么这个接口就可以被称为函数式接口（&lt;strong>Functional Interface&lt;/strong>），也叫做单抽象方法接口（SAM, &lt;strong>Single Abstract Method interfaces&lt;/strong>）。&lt;/p>
&lt;p>在 &lt;code>FunctionalInterface&lt;/code> 的源码中，清晰的列出了以下说明：&lt;/p>
&lt;blockquote>
&lt;p>An informative annotation type used to indicate that an interface type declaration is intended to be a functional interface as defined by the Java Language Specification. Conceptually, a functional interface has exactly one abstract method. Since default methods have an implementation, they are not abstract. If an interface declares an abstract method overriding one of the public methods of java.lang.Object, that also does not count toward the interface's abstract method count since any implementation of the interface will have an implementation from java.lang.Object or elsewhere.&lt;/p>
&lt;p>Note that instances of functional interfaces can be created with lambda expressions, method references, or constructor references.&lt;/p>
&lt;p>If a type is annotated with this annotation type, compilers are required to generate an error message unless:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The type is an interface type and not an annotation type, enum, or class.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The annotated type satisfies the requirements of a functional interface.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>However, the compiler will treat any interface meeting the definition of a functional interface as a functional interface regardless of whether or not a FunctionalInterface annotation is present on the interface declaration.&lt;/p>
&lt;/blockquote>
&lt;p>上面的这段注释中包含了以下几点：&lt;/p>
&lt;ul>
&lt;li>创建函数式接口的实例可以通过 &lt;strong>lambda 表达式&lt;/strong>、方法引用或者构造器引用&lt;/li>
&lt;li>除了唯一的抽象方法外，函数式接口中还可以包含 &lt;strong>default 方法&lt;/strong>（有自己的实现，并不算抽象方法）或者重写了 Object 类的方法&lt;/li>
&lt;li>函数式接口并不需要强制加上 &lt;code>@FunctionalInterface&lt;/code> 注解，但是加了这个注解后，编译器会去检查代码是否符合函数式接口的要求&lt;/li>
&lt;/ul>
&lt;p>另外，上面的注释中没有提到的，&lt;strong>static方法也是允许存在的&lt;/strong>，对此我们可以看下Java中&lt;code>Comparator&lt;/code>接口的源码：（类似的还有 Runnable、Comparable 或者 Callable 接口）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@FunctionalInterface&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 此方法即为唯一的抽象方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">var1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">var2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 此方法继承自Object类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">var1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// default方法，有默认的实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">thenComparing&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">super&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">var1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requireNonNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">var1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Comparator&lt;/span>&lt;span class="o">)((&lt;/span>&lt;span class="n">Serializable&lt;/span>&lt;span class="o">)((&lt;/span>&lt;span class="n">var2x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">var3&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">var4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">var2x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">var3&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">var4&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">var4&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">var1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">var2x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">var3&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...这里省略了其他default方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// static方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">super&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">reverseOrder&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">reverseOrder&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...这里省略了其他static类型的方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然了，我们也可以自己实现自己的函数式接口，最简单的实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 接口，@FunctionalInterface注解其实只要满足规范是可有可无的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nd">@FunctionalInterface&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">TestInterface&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 实际使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">TestInterface&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外，JDK8本身新增了四个函数式接口，&lt;/p>
&lt;h3 id="参考文档">参考文档&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://howtodoinjava.com/java8/default-methods-in-java-8/">Java Default Methods&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://howtodoinjava.com/java/stream/functional-interface-tutorial/">Functional Interfaces in Java&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="3-lambda表达式">3. lambda表达式&lt;/h2>
&lt;p>首先我们还是继续以上一节中 Comparator 接口为例简单讲一下 lambda 的语法。&lt;/p>
&lt;p>对于 Comparator 接口，我们可以像下面这样使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 下面的comparator1、2、3、4完全是等效的写法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">comparator1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">o1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">o2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">o1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">o2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">comparator2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">o1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">o2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">o1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">o2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">comparator3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Comparator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">comparingInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">comparator4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Comparator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">comparingInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 下面的comparator5、6、7、8也完全是等效的写法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">comparator5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Student&lt;/span> &lt;span class="n">student1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="n">student2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">student1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">student2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">comparator6&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">student1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">student2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">student1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">student2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">comparator7&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Comparator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">comparing&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">comparator8&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Comparator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">comparing&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JbxxVO&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意到其中的区别了吗，其中comparator1的写法是完整的，&lt;code>(String o1, String o2)&lt;/code>代表函数的入参，箭头符号 &lt;code>-&amp;gt;&lt;/code> 则是固定的格式，后面的&lt;code>{}&lt;/code>括起来的部分则是函数的方法体。&lt;/p>
&lt;p>而第二种写法则表明入参的类型是可以省略的，而且如果方法体只有一行，那么&lt;code>{}&lt;/code>也是可以省略的。&lt;/p>
&lt;p>至于comparator3和comparator4的写法是因为Comparator接口中封装了一个&lt;code>comparingInt&lt;/code>的静态方法，进一步简化了写法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">comparingInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ToIntFunction&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">super&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">keyExtractor&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requireNonNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keyExtractor&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Serializable&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">c1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">c2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keyExtractor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applyAsInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c1&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">keyExtractor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applyAsInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c2&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而3和4的区别则是因为Java8中引入了**方法引用（method references）**的简写，可以通过这种形式访问静态方法、实例方法以及构造函数。具体格式为：&lt;/p>
&lt;ol>
&lt;li>如果是静态方法，则是 &lt;code>ClassName::methodName&lt;/code>，如 &lt;code>Object::equals&lt;/code>&lt;/li>
&lt;li>如果是实例方法，则 是 &lt;code>Instance::methodName&lt;/code> ，如&lt;code>Object obj=new Object(); obj::equals; &lt;/code>&lt;/li>
&lt;li>如果是构造函数，则是 &lt;code>ClassName::new&lt;/code>，如&lt;code>Student::new&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="有效最终effectively-final">有效最终（effectively final）&lt;/h3>
&lt;p>我们知道lambda表达式中如果要使用局部变量的话，这个变量必须是最终（final）或者有效最终（effectively final）的，关于这一点，具体篇幅的展开可以查看上一篇博文。&lt;/p>
&lt;h3 id="参考文档-1">参考文档&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://www.baeldung.com/java-8-lambda-expressions-tips">Lambda Expressions and Functional Interfaces: Tips and Best Practices&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27.2">Expressions (jsl-15)&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="4-stream流">4. stream流&lt;/h2>
&lt;p>未完待续...&lt;/p>
&lt;p>&lt;a href="https://medium.com/swlh/understanding-java-8s-consumer-supplier-predicate-and-function-c1889b9423d">Understanding Java 8’s Consumer, Supplier, Predicate and Function | by Somnath Musib | The Startup | Medium&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/07/java/" term="Java" label="Java"/><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2022/07/java-8/" term="Java 8" label="Java 8"/></entry><entry><title type="text">为什么lambda表达式中的局部变量必须是有效或者最终有效的？</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/why-do-we-need-effectively-final/"/><id>https://kiwi4814.github.io/posts/2022/why-do-we-need-effectively-final/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-07-25T21:40:15+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本文主要思路源自Why Do We Need Effectively Final? 一文并结合自己的思考所成。 有效最终（effectiv……</summary><content type="html">&lt;blockquote>
&lt;p>本文主要思路源自&lt;a href="https://www.baeldung.com/java-lambda-effectively-final-local-variables">Why Do We Need Effectively Final? &lt;/a>一文并结合自己的思考所成。&lt;/p>
&lt;/blockquote>
&lt;h2 id="有效最终effectively-final">有效最终（effectively final）&lt;/h2>
&lt;p>从 Java8 开始，本地类可以访问&lt;strong>最终或有效最终&lt;/strong>的封闭块的局部变量和参数。那么，什么是有效最终（effectively final）变量呢？&lt;/p>
&lt;p>通常来讲，满足以下三个条件的变量我们即可以把这个变量称为有效最终（ effectively final （&lt;a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.12.4">§4.12.4&lt;/a>））：&lt;/p>
&lt;ul>
&lt;li>该参数没有声明 final 关键字（其实是废话，加了final的肯定就被称为 final 而非 effectively final 了）&lt;/li>
&lt;li>该参数永远不会出现在赋值表达式的左侧（除了初始化变量的时候，比如&lt;code>String s; s = &amp;quot;hello world!&amp;quot;;&lt;/code>）&lt;/li>
&lt;li>永远作为递增或递减的前缀和后缀运算的运算数出现（比如 &lt;code>i++&lt;/code>中的i）&lt;/li>
&lt;/ul>
&lt;p>简单来说，在初始化之后就不会再进行赋值的参数或者变量，我们就可以称之为“有效最终”了。（原文为 A variable or parameter whose value is never changed after it is initialized is effectively final. ）&lt;/p>
&lt;h2 id="lambda表达式的限制">lambda表达式的限制&lt;/h2>
&lt;p>在&lt;a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27.2">JLS&lt;/a>中，明确指出，在lambda表达式内部使用的任何&lt;strong>未在lambda表达式中声明的&lt;/strong>局部变量（&lt;strong>local variable&lt;/strong>）、形式参数（&lt;strong>formal parameter&lt;/strong>）以及异常参数（&lt;strong>exception parameter&lt;/strong>）都必须是final或effectively final的，否则将会出现编译错误。另外，局部变量在lambda中使用时必须时初始化过的。&lt;/p>
&lt;p>在下面的代码示例中，列出了几种常见的错误情况：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestLambda&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">iv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;初始化成员变量&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">newList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果newList出现赋值，lambda表达式中就会报错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">newList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这样的初始化并不影响s1是有效最终的局部变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;初始化的S1&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 成员变量不受这个限制，可以随意赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">iv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;修改成员变量&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// newList必须是最终或者有效最终
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">newList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// s1是有效最终，所以是可以使用的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">newList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 报错，lambda表示式中无法对s2进行初始化了
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;lambda中初始化S2&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 报错，i++出现了赋值行为，破坏了i的有效最终
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">newList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">iv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iv&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 成员变量iv是没问题的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">iv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;lambda&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">iv&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 后续有任何赋值操作，lambda表达式中也会报错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">newList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于这种限制的原因，JLS中给出的原因是 &lt;em>&lt;strong>The restriction to effectively final variables prohibits access to dynamically-changing local variables, whose capture would likely introduce concurrency problems.&lt;/strong>&lt;/em> 翻译过来就是，Lambda表达式中禁止捕获动态变化的局部变量是因为可能会导致并发问题。&lt;/p>
&lt;p>下面我们具体来看下到底会有哪些问题。&lt;/p>
&lt;h3 id="1-捕获局部变量">1. 捕获局部变量&lt;/h3>
&lt;p>我们先来看这么一段代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">incrementer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然这里是无法编译的，报错如下图所示：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//imgimage-20220725221949827.png" alt="image-20220725221949827" style="zoom: 50%;" />
&lt;p>上面的代码中，lambda表达式的部分（&lt;code>start++&lt;/code>）在&lt;code>Supplier.get()&lt;/code>方法被调用之前都不会执行的，所以在lambda表达式捕获到局部变量start的值的时候会复制start的一份副本到lambda内部，而要求局部变量必须为最终或有效最终也是为了防止给人留下这样的印象：对lambda内部的start变量的修改可以影响到局部变量start。&lt;/p>
&lt;p>再来看这段代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">localVariableMultithreading&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do operation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的代码有很明显的“可见性”问题，我们知道每个线程都有自己的堆栈，那么我们如何确保while循环看到另一个堆栈中run变量的变化呢？答案可能是使用&lt;em>synchronized&lt;/em>或&lt;em>volatile&lt;/em>关键字。然而，由于lambda表达式中有效最终的限制，我们可以不必担心这样的复杂性。&lt;/p>
&lt;h3 id="2-捕获成员变量或静态变量">2. 捕获成员变量或静态变量&lt;/h3>
&lt;p>在本章一开始的代码示例中，我们可以看到成员变量是不受final或者有效final的限制的，这是因为成员变量是存储在堆（heap）内存的，编译器可以保证同一个线程内永远能够获取到成员变量的最新的值。&lt;/p>
&lt;p>对于多线程的情况，我们可以使用&lt;code>volatile&lt;/code>关键字来保证可见性。&lt;/p>
&lt;p>上小节的代码我们用成员变量可以改写为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">incrementer&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">instanceVariableMultithreading&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do operation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Java8 限制lambda表达式中使用的局部变量必须是最终或者有效最终，是因为任何在该lambda类中使用的变量都会通过自动生成的构造函数复制一份新的变量，为了保证这种同步性并且防止引起不必要的并发问题，所以做此限制。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://stackoverflow.com/questions/20938095/difference-between-final-and-effectively-final">Difference between final and effectively final&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.baeldung.com/java-lambda-effectively-final-local-variables">Why Do We Need Effectively Final?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/58527869/why-do-local-variables-used-in-lambdas-have-to-be-final-or-effectively-final">Why do local variables used in lambdas have to be final or effectively final?&lt;/a>&lt;/li>
&lt;/ol></content><category scheme="https://kiwi4814.github.io/categories/2022/07/java/" term="Java" label="Java"/><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2022/07/java-8/" term="Java 8" label="Java 8"/></entry><entry><title type="text">如何实现一个单例模式？</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/singleton-impl/"/><id>https://kiwi4814.github.io/posts/2022/singleton-impl/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-06-20T22:34:39+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本文主要介绍了实现单例模式的一些方法、利弊等。 前言 网上已经有太多的文章介绍如何实现一……</summary><content type="html">&lt;p>本文主要介绍了实现单例模式的一些方法、利弊等。&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>网上已经有太多的文章介绍如何实现一个单例模式了，但是请记住，无论怎么实现，我们需要关注的点无外乎下面几个：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>构造函数需要是 private 访问权限的，这样才能避免外部通过new创建实例；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>该类的私有静态变量也需要private，这是该类的唯一实例；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>需要有返回该类唯一实例的静态public方法，这是外部获取实例的全局访问点；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>考虑对象创建时的线程安全问题；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>考虑是否支持延迟加载；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>考虑getInstance()性能是否高（是否加锁）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>在知悉以上几点后，下面我们开始列举实现单例模式的一些方法。&lt;/p>
&lt;h2 id="实现单例模式的方法">实现单例模式的方法&lt;/h2>
&lt;h3 id="1-饿汉式eager-initialization">1. 饿汉式（Eager initialization）&lt;/h3>
&lt;p>在饿汉式单例中，实例的创建是在类加载的时候就已经创建并初始化好了，所以instance实例的创建过程是线程安全的，这也是最简单的一种实现单例的方式。&lt;/p>
&lt;p>&lt;strong>代码示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.geek.design.patterns.singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EagerInitializedSingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">EagerInitializedSingleton&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EagerInitializedSingleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将构造器初始化防止客户端new实例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// private constructor to avoid client applications to use constructor
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="nf">EagerInitializedSingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">EagerInitializedSingleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>饿汉式由于不支持懒加载，如果实例占用资源多（比如占用内存多）或初始化耗时长（比如需要加载各种配置文件），提前初始化实例是一种浪费资源的行为。最好的方法应该在用到的时候再去初始化。&lt;/p>
&lt;p>但是也有人不这么认为，采用饿汉式的实现方式，将耗时的初始化操作，提前到程序启动的时候完成，这样就能避免在程序运行的时候，再去初始化导致的性能问题。所以具体要不要使用这种方式，要根据具体的情况去分析，而不是一昧的否决。&lt;/p>
&lt;h3 id="2-静态代码块static-block-initialization">2. 静态代码块（Static block initialization）&lt;/h3>
&lt;p>&lt;strong>代码示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.geek.design.patterns.singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">StaticBlockSingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">StaticBlockSingleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">StaticBlockSingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//static block initialization for exception handling
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StaticBlockSingleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Exception occured in creating singleton instance&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">StaticBlockSingleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>静态代码块的实现方式类似饿汉式，都会在使用之前就初始化实例，区别主要在于这种方式可以捕获处理创建实例过程中的异常。&lt;/p>
&lt;h3 id="3-懒汉式lazy-initialization">3. 懒汉式（Lazy Initialization）&lt;/h3>
&lt;p>相比于饿汉式单例，懒汉式的优势是支持延迟加载。&lt;/p>
&lt;p>&lt;strong>代码示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.geek.design.patterns.singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LazyInitializedSingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">LazyInitializedSingleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">LazyInitializedSingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="n">LazyInitializedSingleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LazyInitializedSingleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的代码中为了实现线程安全，所以在getInstance()方法上加了synchronized关键字（当然也可以不加synchronized，但这样就不是线程安全的了），这会导致这个函数的并发度很低。如果这个单例偶尔被用到还好，但如果这个函数被频繁调用，那么频繁加锁、释放锁及并发度很低等问题，会导致性能瓶颈。为了解决这个问题，我们可以使用&lt;strong>双重检测机制&lt;/strong>，在if判断逻辑中对整个类加锁，这样只要instance被创建过之后，即使再调用getInstance()函数也不会再加锁了。&lt;/p>
&lt;h3 id="4-双重检测double-checked-locking">4. 双重检测（Double Checked Locking）&lt;/h3>
&lt;p>&lt;strong>代码示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.geek.design.patterns.singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadSafeSingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="n">ThreadSafeSingleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">ThreadSafeSingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ThreadSafeSingleton&lt;/span> &lt;span class="nf">getInstanceUsingDoubleLocking&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ThreadSafeSingleton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadSafeSingleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的代码中对instance成员变量增加了&lt;code>volatile&lt;/code>关键字，在早些版本的JDK中，因为指令重排序，可能会导致ThreadSafeSingleton对象刚被new出来，并且赋值给instance之后，还没来得及初始化（执行构造函数中的代码逻辑），就被另一个线程使用了，所以需要给instance成员变量加上&lt;code>volatile&lt;/code>关键字，禁止指令重排序才行。&lt;/p>
&lt;p>另外，还有另外一种&lt;a href="https://www.journaldev.com/171/thread-safety-in-java-singleton-classes">实现方式&lt;/a>，可以先看看对比下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.geek.design.patterns.singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DoubleCheckedSingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="n">DoubleCheckedSingleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">DoubleCheckedSingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">DoubleCheckedSingleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DoubleCheckedSingleton&lt;/span> &lt;span class="n">tempInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">tempInstance&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 这里加锁的为什么是mutex而不是DoubleCheckedSingleton.class？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">tempInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 这里为什么要第二次赋值？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">tempInstance&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tempInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DoubleCheckedSingleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">tempInstance&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// return出去的是临时变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了上面的链接，Spring源码中的&lt;code>ReactiveAdapterRegistry&lt;/code>以及JDK源码中的&lt;code>AbstractQueuedSynchronizer&lt;/code>都采用了类似的写法，使用局部变量来接收静态的成员变量。&lt;/p>
&lt;p>另外，synchronized的对象是静态私有变量而不是类本身，关于这几点，我查找了一些资料，得到了初步的答案，有兴趣的可以跳转到原文查看。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>第一个问题，为什么要使用局部变量来接收静态成员变量?&lt;/p>
&lt;p>首先是《Effective Java》第二版（P283）以及第三版（Item83）中都对此中关于这一点的解释：&lt;/p>
&lt;blockquote>
&lt;p>以下内容摘自Effective Java第三版：&lt;/p>
&lt;p>This code may appear a bit convoluted. In particular, the need for the local variable (result) may be unclear. What this variable does is to ensure that field is read only once in the common case where it’s already initialized. While not strictly necessary, this may improve performance and is more elegant by the standards applied to low-level concurrent programming. On my machine, the method above is about 1.4 times as fast as the obvious version without a local variable.&lt;/p>
&lt;/blockquote>
&lt;p>另外，维基百科&lt;a href="https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java">Double-checked locking&lt;/a>词条也引用了这一点。主要的原因就是volatile修饰的变量保证了可见性，每当有线程去读取这个变量时都会直接从主内存读取，相比于读取CPU缓存，无疑是更浪费性能的（这里涉及到CPU缓存和JMM内存模型的知识，感兴趣的可以先查阅一下volatile的原理），在实例第一次初始化完成后，后面每次调用getinstance()方法时，由于使用了用临时变量接收volatile变量，所以只会读取一次volatile变量（原始的写法需要两次读取，一次在check null的时候，一次在return的时候），是能够提升性能的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二个问题，锁定的是静态私有变量而不是类本身？&lt;/p>
&lt;p>根据&lt;a href="https://stackoverflow.com/questions/2120248/how-to-synchronize-a-static-variable-among-threads-running-different-instances-o">StackOverflow的这个问题&lt;/a>的这个问题中的说法，这种方式锁定的是一个没有在类外的成员变量，可以排除不必要的干扰。至于深层的原因，等后面学习的更深入了过来补充。&lt;/p>
&lt;blockquote>
&lt;p>以下内容摘自原帖回答（Method 3和The reason #3 都指的是上面的这种写法）&lt;/p>
&lt;p>Method 3 is the best in many cases because the lock object is not exposed outside of your class.&lt;/p>
&lt;p>The reason #3 is the best is that any random bit of code could synchronize on &lt;code>Test.class&lt;/code> and potentially spoil your day. Also, class initialization runs with a lock on the class held, so if you've got crazy class initializers you can give yourself headaches.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>此外，在第二次校验之前二次赋值的原因是：在获取锁之后，刷新本地引用为最新值，因为这时候volatile变量可能会被其他线程修改。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="5-静态内部类bill-pugh-singleton">5. 静态内部类（Bill Pugh Singleton）&lt;/h3>
&lt;p>在Java5之前，Java内存模型有很多问题，在某些情况下，如果有太多的线程试图同时尝试获取Singleton类的实例，上述方法就会失败。因此，Bill Pugh提出了一种使用静态内部类来创建Singleton实例的放方法。&lt;/p>
&lt;p>&lt;strong>代码示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.geek.design.patterns.singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BillPughSingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">BillPughSingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SingletonHelper&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">BillPughSingleton&lt;/span> &lt;span class="n">INSTANCE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BillPughSingleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">BillPughSingleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">SingletonHelper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种静态内部类的实现中，当外部类BillPughSingleton被加载的时候，并不会创建SingletonHelper，只有当调用getInstance()方法时，SingletonHelper才会被加载，然后才会创建INSTANCE。instance的唯一性、创建过程的线程安全性，都由JVM来保证。&lt;strong>所以，这种实现方法既保证了线程安全，又能做到延迟加载。&lt;/strong>&lt;/p>
&lt;h3 id="6-枚举enum-singleton">6. 枚举（Enum Singleton）&lt;/h3>
&lt;p>最后，介绍一种基于枚举类型的单例实现。这种实现方式通过 Java 枚举类型本身的特性，保证了实例创建的线程安全性和实例的唯一性。&lt;/p>
&lt;p>&lt;strong>代码示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.geek.design.patterns.singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.concurrent.atomic.AtomicLong&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">EnumSingleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AtomicLong&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicLong&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">getId&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">incrementAndGet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>单例的枚举实现在&lt;strong>Effective Java&lt;/strong>一书中提到，因为其功能完善，使用简单，并且无偿地提供了序列化机制，在面对复杂的序列化或者反射攻击时任然可以绝对防止多次实例化等优点，因而被作者所推崇。&lt;/p>
&lt;p>&lt;strong>下面的表格总结了这几种方法的优劣：&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法&lt;/th>
&lt;th>支持懒加载&lt;/th>
&lt;th>线程安全&lt;/th>
&lt;th>性能问题&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>饿汉式&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;td>启动时加载可能会浪费不必要的资源&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>懒汉式&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;td>使用synchronized关键字虽然实现了线程安全，但是会导致性能瓶颈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>双重检测&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;td>第一次初始化时才会加类锁，推荐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>静态内部类&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;td>利用静态内部类的特性，推荐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>枚举&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;td>利用枚举的特性&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a href="https://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples#eager-initialization">Java Singleton Design Pattern Example Best Practices&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java">Double-checked locking - Wiki&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.javacodemonk.com/threadsafe-singleton-design-pattern-java-806ad7e6">Threadsafe Singleton Design Pattern Java&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.journaldev.com/171/thread-safety-in-java-singleton-classes">Thread Safety in Java Singleton Classes&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">设计模式之创建型：单例模式</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/singleton/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/singleton/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-06-20T18:27:39+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">我们知道经典的设计模式有23种，但其实常用的并不是很多，其中，最常被提及的可能就是单……</summary><content type="html">&lt;p>我们知道经典的设计模式有23种，但其实常用的并不是很多，其中，最常被提及的可能就是单例模式了。&lt;/p>
&lt;p>今天主要来学习一下设计模式种最经典的单例模式。&lt;/p>
&lt;h2 id="一为什么要使用单例">一、为什么要使用单例？&lt;/h2>
&lt;h3 id="11-定义">1.1 定义&lt;/h3>
&lt;p>单例设计模式（Singleton Design Pattern）：一个类只允许创建一个对象（实例），那这个类就是一个单例类，这种设计模式就叫单例模式。&lt;/p>
&lt;h3 id="12-使用单例解决什么问题">1.2 使用单例解决什么问题&lt;/h3>
&lt;p>这里举几个最常见的例子来说明一下，为什么我们需要使用单例这种设计模式？&lt;/p>
&lt;h4 id="121-使用单例模式处理资源访问冲突">1.2.1 使用单例模式处理资源访问冲突&lt;/h4>
&lt;p>在下面的代码中，我们实现了一个往文件中打印日志的Logger类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Logger&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">FileWriter&lt;/span> &lt;span class="n">writer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Logger&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">File&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/Users/wangzheng/log.txt&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FileWriter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//true表示追加写入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Logger类的应用示例：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Logger&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略业务逻辑代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; logined!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">OrderController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Logger&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">create&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">OrderVo&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略业务逻辑代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Created an order: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面的例子中，所有的日志都写入同一个文件，如果在多线程环境下，两个线程同时执行login()和create()函数，就可能出现日志信息相互覆盖的情况。&lt;/p>
&lt;p>针对这种情况，我们可以给类加锁或者使用分布式锁、并发队列的方式解决，但是实现起来有点复杂了。单例模式的解决思路相比于以上几种就更加简单了。单例模式相对于之前类级别锁的好处是，不用创建那么多 Logger 对象，一方面节省内存空间，另一方面节省系统文件句柄（对于操作系统来说，文件句柄也是一种资源，不能随便浪费）。&lt;/p>
&lt;p>我们将Logger设计成一个单例类，程序中只允许创建一个Logger对象，所有的线程共享使用这一个Logger对象，共享一个FileWriter对象，而FileWriter本身就是对象级别线程安全的，也就避免了多线程情况下写日志会互相覆盖的问题。按照这个思路的实现代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Logger&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">FileWriter&lt;/span> &lt;span class="n">writer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Logger&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">Logger&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">File&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/Users/wangzheng/log.txt&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FileWriter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//true表示追加写入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mesasge&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Logger类的应用示例：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略业务逻辑代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; logined!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">OrderController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">create&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">OrderVo&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略业务逻辑代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Created a order: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="122-表示全局唯一类">1.2.2 表示全局唯一类&lt;/h4>
&lt;p>从业务概念上，如果有些数据在系统中只应保存一份，那就比较适合设计为单例类。比如配置信息类，系统中只有一个配置文件，当配置文件被加载到内存后，理所应当只应该有一份；再比如全局递增ID生成器，如果程序中有两个对象，那就会存在生成重复ID的情况。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.concurrent.atomic.AtomicLong&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">IdGenerator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// AtomicLong是一个Java并发库中提供的一个原子变量类型,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 它将一些线程不安全需要加锁的复合操作封装为了线程安全的原子操作，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 比如下面会用到的incrementAndGet().
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">AtomicLong&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicLong&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">IdGenerator&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IdGenerator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">IdGenerator&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">IdGenerator&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">getId&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">incrementAndGet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// IdGenerator使用举例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">IdGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="二如何实现一个单例">二、如何实现一个单例&lt;/h2>
&lt;p>由于篇幅太长，而且参考了其他很多文章，所以将这部分单独分了出来，详见文章&lt;a href="https://kiwi4814.com/posts/2022/singleton-impl/">如何实现一个单例模式？&lt;/a>。&lt;/p>
&lt;h2 id="三单例存在的问题以及替代方案">三、单例存在的问题以及替代方案&lt;/h2>
&lt;h3 id="31-单例存在的问题">3.1 单例存在的问题&lt;/h3>
&lt;p>单例是一种很常见的设计模式，在很多类库的源码以及日常开发中都会使用到，但是，有人认为单例是一种反模式（anti-pattern），又是为什么呢？我们知道使用单例的情况一般是表示全局唯一类，比如配置信息类、连接池类、ID生成器类等等，在代码中，我们一般只需要调用类似&lt;code>IdGenerator.getInstance().getId()&lt;/code>这样的代码就可以了，使用非常简单，但是这样的方式是有一些问题的。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>单例对 OOP 特性的支持不友好&lt;/strong>（封装、抽象、继承、多态）&lt;/p>
&lt;p>首先，单例模式违背了基于接口而非实现的设计原则，也就是违背了抽象这个特性；除此之外，单例的构造函数是private的，对继承、多态也非常不友好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单例会隐藏类之间的依赖关系&lt;/strong>&lt;/p>
&lt;p>单例模式是在函数中直接调用的，并不会显示生命，如果代码很复杂，就会影响可读性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单例对代码的扩展性不友好&lt;/strong>&lt;/p>
&lt;p>单例类只能有一个对象实例，但是如果有需求需要创建多个实例的话，就要对代码有大的改动了。&lt;/p>
&lt;blockquote>
&lt;p>在系统设计初期，我们觉得系统中只应该有一个数据库连接池，这样能方便我们控制对数据库连接资源的消耗。所以，我们把数据库连接池类设计成了单例类。但之后我们发现，系统中有些 SQL 语句运行得非常慢。这些 SQL 语句在执行的时候，长时间占用数据库连接资源，导致其他 SQL 请求无法响应。为了解决这个问题，我们希望将慢 SQL 与其他 SQL 隔离开来执行。为了实现这样的目的，我们可以在系统中创建两个数据库连接池，慢 SQL 独享一个数据库连接池，其他 SQL 独享另外一个数据库连接池，这样就能避免慢 SQL 影响到其他 SQL 的执行。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单例对代码的可测试性不友好&lt;/strong>&lt;/p>
&lt;p>单例类这种硬编码式的使用方式，无法使用mock直接替换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单例不支持有参数的构造函数&lt;/strong>&lt;/p>
&lt;p>这里其实可以是一个思考题，就是：**单例模式如何支持有参数的构造函数？**这个问题的答案后续会整理出来。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="32-单例的替代方案">3.2 单例的替代方案&lt;/h3>
&lt;p>如果不使用单例模式，我们怎么样来保证一个类的对象全局唯一呢？下面提供几种思路：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>使用静态方法实现&lt;/strong>，这也是在项目中最常使用到的一种实现思路，但是这种方案并不能解决上一节提到的问题，并且由于不支持懒加载，所以实际上更加不灵活；&lt;/li>
&lt;li>&lt;strong>将单例作为参数传递给函数&lt;/strong>，这种是使用方法上的变更，不过能够解决单例隐藏类之间依赖关系的问题，但是其他问题依然存在；&lt;/li>
&lt;li>&lt;strong>通过工厂模式、IOC 容器（比如 Spring IOC 容器）来保证&lt;/strong>，这里暂时不展开讲解。&lt;/li>
&lt;/ol>
&lt;p>实际上，无论单例存在多少问题，我觉得这里并不是不推荐使用单例模式，也不是一定要使用“更优”的替代方案，针对不同的项目和需求情况，可以有针对性的分析后再决定使用哪种方式，模式没有对错，主要是看程序员如何去使用。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">Apifox/Postman预执行脚本原理及设置</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/prescript/"/><id>https://kiwi4814.github.io/posts/2022/prescript/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-06-19T19:19:20+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">前言 当我们使用Postman或者Apifox调试后端接口的时候，大部分项目都会传入j……</summary><content type="html">&lt;h3 id="前言">前言&lt;/h3>
&lt;p>当我们使用Postman或者Apifox调试后端接口的时候，大部分项目都会传入jwt-token为项目鉴权，而且jwt-token会有过期时间，Postman或者Apifox为我们提供了一个预执行脚本的功能，可以让我们每次在调用后端接口之前先去获取token并将其缓存起来，直到这个token过期。&lt;/p>
&lt;p>本文将以apifox为例简单叙述下如何设置。&lt;/p>
&lt;p>需要准备的事项：&lt;/p>
&lt;ol>
&lt;li>获取token的接口路径及入参，本文示例代码的路径为：&lt;code>{BASE_URL}/oauth2/password&lt;/code>，参数是&lt;code>username&lt;/code>和&lt;code>password&lt;/code>，分别对应用户名和密码。&lt;/li>
&lt;li>系统token过期时间&lt;/li>
&lt;/ol>
&lt;h3 id="步骤">步骤&lt;/h3>
&lt;p>首先，我们需要在我们要调试的环境中预先加一些变量。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img202206201905199.png" alt="image-20220620190454648" style="zoom: 50%;" />
&lt;p>需要填入的四个变量分别为：&lt;/p>
&lt;ul>
&lt;li>ACCESS_TOKEN：用来缓存jwt_token的值&lt;/li>
&lt;li>ACCESS_TOKEN_EXPIRES：用来缓存jwt_token过期的时间&lt;/li>
&lt;li>username：登录账号&lt;/li>
&lt;li>password：登录密码&lt;/li>
&lt;/ul>
&lt;p>然后我们在项目设置 -&amp;gt; 公共脚本中新建一个脚本，脚本内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">timestampFormat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">timestamp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">timestamp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFullYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDate&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getHours&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMinutes&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getSeconds&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 定义发送登录接口请求方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">sendLoginRequest&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取环境里的 前置URL
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">baseUrl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;BASE_URL&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;前缀URL为：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">baseUrl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 登录用户名，这里从环境变量 username 中获取
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;登录用户名为：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">username&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 登录密码，这里从环境变量 password 中获取
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;登录密码为：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">password&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构造一个 POST x-www-form-urlencoded 格式请求。这里需要改成你们实际登录接口的请求参数。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">loginRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">baseUrl&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/oauth2/password&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mode&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;urlencoded&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">urlencoded&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">password&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 发送请求。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// pm.sendrequest 参考文档: https://www.apifox.cn/help/app/scripts/api-references/pm-reference/#pm-sendrequest
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">loginRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 读取接口返回的 json 数据。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 如果你的 token 信息是存放在 cookie 的，可以使用 res.cookies.get(&amp;#39;token&amp;#39;) 方式获取。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// cookies 参考文档：https://www.apifox.cn/help/app/scripts/api-references/pm-reference/#pm-cookies
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">jsonData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将 accessToken 写入环境变量 ACCESS_TOKEN
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ACCESS_TOKEN&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">jsonData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jwt_token&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;更新TOKEN为：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">jsonData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jwt_token&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将 accessTokenExpires 过期时间写入环境变量 ACCESS_TOKEN_EXPIRES
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">accessTokenExpires&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">86400000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ACCESS_TOKEN_EXPIRES&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">accessTokenExpires&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;更新TOKEN过期时间为：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">timestampFormat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">accessTokenExpires&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;=====开始执行前置脚本=====&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取环境变量里的 ACCESS_TOKEN
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">accessToken&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ACCESS_TOKEN&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// console.log(&amp;#34;当前TOKEN为：&amp;#34; + accessToken);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取环境变量里的 ACCESS_TOKEN_EXPIRES
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">accessTokenExpires&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ACCESS_TOKEN_EXPIRES&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;当前时间为：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">timestampFormat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;过期时间为：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">timestampFormat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">accessTokenExpires&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 如 ACCESS_TOKEN 没有值，或 ACCESS_TOKEN_EXPIRES 已过期，则执行发送登录接口请求
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">nowTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">send&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">accessToken&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">accessTokenExpires&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">accessTokenExpires&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">nowTime&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;=====TOKEN已过期，发送请求重新获取=====&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sendLoginRequest&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;=====结束执行前置脚本=====&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很简单的js脚本，其中调试的时候为了方便查看执行过程加入了一些变量的打印，可以按照需要精简。&lt;/p>
&lt;p>最后，我们在环境设置页面的全局参数中增加全局变量，就可以默认让每个接口都带上jwt-token参数&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img202206201914710.png" alt="image-20220620191356450" style="zoom:50%;" />
&lt;p>当我们请求接口的时候，可以设置预执行脚本，选到我们刚才增加的脚本，就可以自动更新jwt-token了。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img202206201916786.png" alt="image-20220620191600744">&lt;/p></content><category scheme="https://kiwi4814.github.io/series/2022/06/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E5%B7%A5%E5%85%B7/" term="工具" label="工具"/><category scheme="https://kiwi4814.github.io/tags/2023/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/></entry><entry><title type="text">代码重构实战：实现一个ID生成器</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/id-generator/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/id-generator/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-06-14T09:04:26+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">所谓重构，就是发现代码质量问题，并且对其进行优化的过程。今天借助一个ID生成器的代码……</summary><content type="html">&lt;p>所谓重构，就是发现代码质量问题，并且对其进行优化的过程。今天借助一个ID生成器的代码来实际展示一下重构的大概过程。&lt;/p>
&lt;h2 id="需求背景介绍">需求背景介绍&lt;/h2>
&lt;p>ID生成器在每个系统中几乎都可以见到，假设你正在参与一个后端业务系统的开发，为了方便在请求出错时排查问题，我们编写代码时会在关键路径上打上日志，某个请求出错后我们希望能搜索出对应这个请求的所有日志以方便查找问题原因。但是实际情况是，日志文件中不同的请求日志会交织到一起，如果没有标识哪些日志属于同一个请求，我们就无法关联同一个请求的所有日志。&lt;/p>
&lt;p>借助微服务调用链追踪的实现思路，我们可以给每个请求分配一个唯一ID，并且保存在请求的上下文（context）中，比如处理请求的工作线程的局部变量中。在Java语言中，我们可以将ID存储在Servlet线程的ThreadLocal中，或者利用Slf4j日志框架的MDC（Mapped Diagnostic Contexts）来实现（实际上底层原理也是基于线程的ThreadLocal）。每次打印日志的时候，我们从请求上下文中请求ID，跟日志一块输出。这样，同一个请求的所有日志都包含同样的请求ID信息，我们就可以通过请求ID来搜索同一个请求的所有日志了。&lt;/p>
&lt;h2 id="一份能用的代码实现">一份“能用”的代码实现&lt;/h2>
&lt;p>下面是一个简单的代码生成器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.slf4j.Logger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.slf4j.LoggerFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.net.InetAddress&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.net.UnknownHostException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Random&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">IdGenerator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">IdGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">generate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">hostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">InetAddress&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLocalHost&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getHostName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">tokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hostName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\\.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tokens&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">randomChars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Random&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">122&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">48&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">57&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">randomChars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">randomAscii&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">48&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">65&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">randomChars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">randomAscii&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">65&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">97&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">122&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">randomChars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">randomAscii&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">97&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%s-%d-%s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hostName&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">randomChars&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UnknownHostException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">warn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Failed to get the host name.&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以看到整个 ID 由三部分组成。第一部分是本机名的最后一个字段。第二部分是当前时间戳，精确到毫秒。第三部分是 8 位的随机字符串，包含大小写字母和数字。尽管这样生成的 ID 并不是绝对唯一的，有重复的可能，但事实上重复的概率非常低。对于我们的日志追踪来说，极小概率的 ID 重复是完全可以接受的。&lt;/p>
&lt;h2 id="发现代码质量问题">发现代码质量问题&lt;/h2>
&lt;p>在确定一段代码有没有质量问题以及按照哪些标准去确定的时候，可以遵循以下的标准：&lt;/p>
&lt;p>首先，从大处着手的话，可以看代码是否可读、可扩展、可维护、灵活、简洁、可复用、可测试等，具体可以落实到以下细节：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img041e22cac6ce2ba3481e246c119adfc9.jpg" alt="img" style="zoom: 50%;" />
&lt;p>除此之外，我们还要关注代码实现是否满足业务本身特有的功能和非功能需求，一些共性的关注点如下所示：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//img9894233257994a69102afa960692ce98.jpg" alt="img" style="zoom:50%;" />
&lt;p>我们可以逐一分析一下：&lt;/p>
&lt;p>&lt;strong>首先，在常规检查中&lt;/strong>，由于IdGenerator的功能比较简单，不涉及到目录设置、模块划分、代码结构问题，也不违反基本的SOLID、DRY、KISS、YAGNI、LOD等设计原则，它没有使用设计模式，所以也不存在过度设计的问题。&lt;/p>
&lt;p>然后说说可能存在的一些问题：&lt;/p>
&lt;ul>
&lt;li>IdGenerator设计成了实现类而非接口，违反了基于接口而非实现编程的原则。目前是没什么问题的，但是一旦要求需要两种ID算法，我们就需要基于接口进行设计了。&lt;/li>
&lt;li>generate()为静态函数，会影响使用该函数的代码的可测试性。同时其实现依赖运行环境、时间函数、随机函数，所以其本身的可测试性也不好&lt;/li>
&lt;li>没有编写单元测试&lt;/li>
&lt;li>代码的可读性不好，特别是生成随机字符串的部分，一方面代码没有任何注释，另一方面有很多魔法数，影响代码的可读性。&lt;/li>
&lt;/ul>
&lt;p>然后我们再来分析以下业务需求方面：&lt;/p>
&lt;ul>
&lt;li>代码逻辑中并未处理hostname为空的情况&lt;/li>
&lt;li>尽管捕获了异常，但是并没有做任何处理，只是打印了一条报警日志，这样的异常处理也不够得当&lt;/li>
&lt;li>&lt;strong>日志打印得当，日志描述能够准确反应问题，方便 debug，并且没有过多的冗余日志。IdGenerator 只暴露一个 generate() 接口供使用者使用，接口的定义简单明了，不存在不易用问题。generate() 函数代码中没有涉及共享变量，所以代码线程安全，多线程环境下调用 generate() 函数不存在并发问题。&lt;/strong>&lt;/li>
&lt;li>性能方面，ID 的生成不依赖外部存储，在内存中生成，并且日志的打印频率也不会很高，足以应对当前的需求。但是每次生成ID都需要获取本机名，比较耗时，所以可以考虑优化一下。&lt;/li>
&lt;li>randomAscii 的范围是 0～122，但可用数字仅包含三段子区间（0~9，a~z，A~Z），极端情况下会随机生成很多三段区间之外的无效数字，需要循环很多次才能生成随机字符串，所以随机字符串的生成算法也可以优化一下。&lt;/li>
&lt;/ul>
&lt;h2 id="代码重构过程">代码重构过程&lt;/h2>
&lt;p>代码重构的过程应该是循序渐进、小步快跑的，在上一章节中提到的问题，我们可以按照下面的步骤分四次来完成：&lt;/p>
&lt;ul>
&lt;li>第一轮重构：提高代码的可读性&lt;/li>
&lt;li>第二轮重构：提高代码的可测试性&lt;/li>
&lt;li>第三轮重构：编写完善的单元测试&lt;/li>
&lt;li>第四轮重构：所有重构完成后添加注释&lt;/li>
&lt;/ul>
&lt;h3 id="第一轮重构提高代码的可读性">第一轮重构：提高代码的可读性&lt;/h3>
&lt;p>这一轮需要着重解决的问题有：&lt;/p>
&lt;ul>
&lt;li>hostName变量不应该被重复使用，尤其当这两次使用的含义还不同的时候，将获取hostName的代码抽离出来&lt;/li>
&lt;li>删除代码中的魔法数字&lt;/li>
&lt;li>将随机数生成的代码抽离出来&lt;/li>
&lt;li>generate函数中的三个if逻辑是重复的，我们需要对齐进行简化&lt;/li>
&lt;li>对IdGenerator重命名，并且抽象出对应的接口&lt;/li>
&lt;/ul>
&lt;p>对于重命名的方式，这里给出一种扩展性比较好的命名方式：&lt;/p>
&lt;p>首先我们抽象出两个接口，一个是IdGenerator，一个是LogTraceIdGenerator，LogTraceIdGenerator继承IdGenerator。我们具体的实现类来实现接口LogTraceIdGenerator，可以按照不同的ID生成算法来命名为RandomIdGenerator（随机，类似本文中的代码）、SequenceIdGenerator（有序，比如按照时间戳生成的雪花片算法），这样我们既可以根据具体业务的不同实现不同的ID生成器，对于同一种业务也可以实现不同的算法。&lt;/p>
&lt;p>重构后的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">IdGenerator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="nf">generate&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">LogTraceIdGenerator&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">IdGenerator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RandomIdGenerator&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">LogTraceIdGenerator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RandomIdGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">generate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">substrOfHostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getLastfieldOfHostName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">currentTimeMillis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">randomString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">generateRandomAlphameric&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%s-%d-%s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">substrOfHostName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">randomString&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getLastfieldOfHostName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">substrOfHostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">hostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">InetAddress&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLocalHost&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getHostName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">tokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hostName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\\.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">substrOfHostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tokens&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">substrOfHostName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UnknownHostException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">warn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Failed to get the host name.&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">substrOfHostName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">generateRandomAlphameric&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">randomChars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Random&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxAscii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">maxAscii&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isDigit&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isUppercase&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isLowercase&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isDigit&lt;/span>&lt;span class="o">||&lt;/span> &lt;span class="n">isUppercase&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">isLowercase&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">randomChars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">randomAscii&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">randomChars&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//代码使用举例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">LogTraceIdGenerator&lt;/span> &lt;span class="n">logTraceIdGenerator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RandomIdGenerator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第二轮重构提高代码的可测试性">第二轮重构：提高代码的可测试性&lt;/h3>
&lt;p>本轮重构主要解决如下两个问题：&lt;/p>
&lt;ul>
&lt;li>generate() 函数定义为静态函数，会影响使用该函数的代码的可测试性；&lt;/li>
&lt;li>generate() 函数的代码实现依赖运行环境（本机名）、时间函数、随机函数，所以 generate() 函数本身的可测试性也不好。&lt;/li>
&lt;/ul>
&lt;p>其中第一个问题我们已经在上一轮解决了。&lt;/p>
&lt;p>对于第二个问题，我们主要改动点为：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>从 getLastfieldOfHostName() 函数中，将逻辑比较复杂的那部分代码剥离出来，定义为 getLastSubstrSplittedByDot() 函数。因为 getLastfieldOfHostName() 函数依赖本地主机名，所以，剥离出主要代码之后这个函数变得非常简单，&lt;strong>可以不用测试&lt;/strong>。我们重点测试 getLastSubstrSplittedByDot() 函数即可。&lt;/li>
&lt;li>将 generateRandomAlphameric() 和 getLastSubstrSplittedByDot() 这两个函数的访问权限设置为 protected。这样做的目的是，可以直接在单元测试中通过对象来调用两个函数进行测试。&lt;/li>
&lt;li>给 generateRandomAlphameric() 和 getLastSubstrSplittedByDot() 两个函数添加 Google Guava 的 annotation @VisibleForTesting。这个 annotation 没有任何实际的作用，只起到标识的作用，告诉其他人说，这两个函数本该是 private 访问权限的，之所以提升访问权限到 protected，只是为了测试，只能用于单元测试中。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>【这里的意思就是说，我们可以将一些调用其他类库或者依赖本机环境的代码单独抽离出来，只测试自己的实现代码的部分，为此而带来的改动就是原本应该是私有的函数要修改其权限级别来保证方法能够被单元测试调用】&lt;/strong>&lt;/p>
&lt;p>重构后的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RandomIdGenerator&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">LogTraceIdGenerator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RandomIdGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">generate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">substrOfHostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getLastfieldOfHostName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">currentTimeMillis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">randomString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">generateRandomAlphameric&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%s-%d-%s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">substrOfHostName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">randomString&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getLastfieldOfHostName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">substrOfHostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">hostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">InetAddress&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLocalHost&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getHostName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">substrOfHostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getLastSubstrSplittedByDot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hostName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UnknownHostException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">warn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Failed to get the host name.&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">substrOfHostName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@VisibleForTesting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getLastSubstrSplittedByDot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">hostName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">tokens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hostName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\\.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">substrOfHostName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tokens&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">substrOfHostName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@VisibleForTesting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">generateRandomAlphameric&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">randomChars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Random&lt;/span> &lt;span class="n">random&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxAscii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">maxAscii&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isDigit&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isUppercase&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isLowercase&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">randomAscii&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isDigit&lt;/span>&lt;span class="o">||&lt;/span> &lt;span class="n">isUppercase&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">isLowercase&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">randomChars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">randomAscii&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">randomChars&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第三轮重构编写完善的单元测试">第三轮重构：编写完善的单元测试&lt;/h3>
&lt;p>经过前两轮的重构，代码中存在的明显问题基本上已经解决了，目前类中主要包含以下几个函数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">generate&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getLastfieldOfHostName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@VisibleForTesting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protected&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getLastSubstrSplittedByDot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">hostName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@VisibleForTesting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protected&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">generateRandomAlphameric&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先，最后两个函数是我们算法的关键部分，所以我们需要重点进行测试，单元测试具体的细节不再赘述，可以参考代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RandomIdGeneratorTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testGetLastSubstrSplittedByDot&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RandomIdGenerator&lt;/span> &lt;span class="n">idGenerator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RandomIdGenerator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">actualSubstr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">idGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastSubstrSplittedByDot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;field1.field2.field3&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;field3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">actualSubstr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">actualSubstr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">idGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastSubstrSplittedByDot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;field1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;field1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">actualSubstr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">actualSubstr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">idGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastSubstrSplittedByDot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;field1#field2#field3&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;field1#field2#field3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">actualSubstr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 此单元测试会失败，因为我们在代码中没有处理hostName为null或空字符串的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 这部分优化留在下面的课程中中讲解
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testGetLastSubstrSplittedByDot_nullOrEmpty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RandomIdGenerator&lt;/span> &lt;span class="n">idGenerator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RandomIdGenerator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">actualSubstr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">idGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastSubstrSplittedByDot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">actualSubstr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">actualSubstr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">idGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLastSubstrSplittedByDot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">actualSubstr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testGenerateRandomAlphameric&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RandomIdGenerator&lt;/span> &lt;span class="n">idGenerator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RandomIdGenerator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">actualRandomString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">idGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">generateRandomAlphameric&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertNotNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">actualRandomString&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">actualRandomString&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">actualRandomString&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertTrue&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 此单元测试会失败，因为我们在代码中没有处理length&amp;lt;=0的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 这部分优化留在下面的课程中中讲解
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testGenerateRandomAlphameric_lengthEqualsOrLessThanZero&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RandomIdGenerator&lt;/span> &lt;span class="n">idGenerator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RandomIdGenerator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">actualRandomString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">idGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">generateRandomAlphameric&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">actualRandomString&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">actualRandomString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">idGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">generateRandomAlphameric&lt;/span>&lt;span class="o">(-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">actualRandomString&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后是generate函数，这个函数作为我们暴露给外界的public函数，肯定是需要进行测试的。但是这个方法依赖主机名、随机函数、时间函数，我们测试时必须根据实际的情况来确定单元测试的具体写法。我们知道，写**单元测试的时候，测试对象是函数定义的功能，而非具体的实现逻辑。**而我们根据generate函数的具体实现功能可以编写不同的单元测试：&lt;/p>
&lt;ol>
&lt;li>如果我们把 generate() 函数的功能定义为：“生成一个随机唯一 ID”，那我们只要测试多次调用 generate() 函数生成的 ID 是否唯一即可。&lt;/li>
&lt;li>如果我们把 generate() 函数的功能定义为：“生成一个只包含数字、大小写字母和中划线的唯一 ID”，那我们不仅要测试 ID 的唯一性，还要测试生成的 ID 是否只包含数字、大小写字母和中划线。&lt;/li>
&lt;li>如果我们把 generate() 函数的功能定义为：“生成唯一 ID，格式为：{主机名 substr}-{时间戳}-{8 位随机数}。在主机名获取失败时，返回：null-{时间戳}-{8 位随机数}”，那我们不仅要测试 ID 的唯一性，还要测试生成的 ID 是否完全符合格式要求。&lt;/li>
&lt;/ol>
&lt;p>最后是getLastfieldOfHostName函数，前面我们说过，这个函数调用了一个依赖运行环境的静态函数，但是其实现由于我们的特意分离而变得特别简单，所以是不需要进行单元测试的。&lt;/p>
&lt;h3 id="第四轮重构添加注释">第四轮重构：添加注释&lt;/h3>
&lt;p>注释的要点就是写清楚做什么、为什么、怎么做、怎么用，对一些边界条件、特殊情况进行说明，以及对函数输入、输出、异常进行说明。&lt;/p>
&lt;p>在这个例子中，可以按照如下的方法进行注释：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Id Generator that is used to generate random IDs.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * &amp;lt;p&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * The IDs generated by this class are not absolutely unique,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * but the probability of duplication is very low.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RandomIdGenerator&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">LogTraceIdGenerator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RandomIdGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Generate the random ID. The IDs may be duplicated only in extreme situation.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @return an random ID
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">generate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Get the local hostname and
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * extract the last field of the name string splitted by delimiter &amp;#39;.&amp;#39;.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @return the last field of hostname. Returns null if hostname is not obtained.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getLastfieldOfHostName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Get the last field of {@hostName} splitted by delemiter &amp;#39;.&amp;#39;.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param hostName should not be null
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @return the last field of {@hostName}. Returns empty string if {@hostName} is empty string.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@VisibleForTesting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getLastSubstrSplittedByDot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">hostName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Generate random string which
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * only contains digits, uppercase letters and lowercase letters.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param length should not be less than 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @return the random string. Returns empty string if {@length} is 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@VisibleForTesting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">generateRandomAlphameric&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;ol>
&lt;li>即便是非常简单的需求，不同水平的人写出来的代码，差别可能会很大。我们要对代码质量有所追求，不能只是凑活能用就好。花点心思写一段高质量的代码，比写 100 段凑活能用的代码，对你的代码能力提高更有帮助。&lt;/li>
&lt;li>知其然知其所以然，了解优秀代码设计的演变过程，比学习优秀设计本身更有价值。知道为什么这么做，比单纯地知道怎么做更重要，这样可以避免你过度使用设计模式、思想和原则。&lt;/li>
&lt;li>设计思想、原则、模式本身并没有太多“高大上”的东西，都是一些简单的道理，而且知识点也并不多，关键还是锻炼具体代码具体分析的能力，把知识点恰当地用在项目中。&lt;/li>
&lt;li>我经常讲，高手之间的竞争都是在细节。大的架构设计、分层、分模块思路实际上都差不多。没有项目是靠一些不为人知的设计来取胜的，即便有，很快也能被学习过去。所以，关键还是看代码细节处理得够不够好。这些细节的差别累积起来，会让代码质量有质的差别。所以，要想提高代码质量，还是要在细节处下功夫。&lt;/li>
&lt;/ol></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">让你最快速的改善代码编程质量的20条规范</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/20rules/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/20rules/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-06-13T19:10:50+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">编码规范是一种简单明了的约定，在代码细节方面，能立竿见影地改善质量，是改善代码可读性……</summary><content type="html">&lt;p>编码规范是一种简单明了的约定，在代码细节方面，能立竿见影地改善质量，是改善代码可读性的有效手段。&lt;/p>
&lt;p>关于编码规范、如何编写可读代码，很多书籍已经讲得很好了，比如著名的《代码整洁之道》以及《重构》。这里罗列出作者王争推荐的20条最好用编码规范，分为三个部分：&lt;strong>命名与注释（Naming and Comments）&lt;/strong>、&lt;strong>代码风格（Code Style）&lt;strong>和&lt;/strong>编程技巧（Coding Tips）&lt;/strong>。&lt;/p>
&lt;h2 id="命名与注释naming-and-comments">命名与注释（Naming and Comments）&lt;/h2>
&lt;h3 id="命名相关规范">命名相关规范&lt;/h3>
&lt;h5 id="1-命名的关键是能准确达意对于不同作用域的命名我们可以适当地选择不同的长度作用域小的变量比如临时变量可以适当地选择短一些的命名方式除此之外命名中也可以使用一些耳熟能详的缩写">1. 命名的关键是能准确达意。对于不同作用域的命名，我们可以适当地选择不同的长度。作用域小的变量（比如临时变量），可以适当地选择短一些的命名方式。除此之外，命名中也可以使用一些耳熟能详的缩写。&lt;/h5>
&lt;p>耳熟能详的单词，比如sec表示second，str表示String、num表示number等。&lt;/p>
&lt;h5 id="2-我们可以借助类的信息来简化属性函数的命名利用函数的信息来简化函数参数的命名">2. 我们可以借助类的信息来简化属性、函数的命名，利用函数的信息来简化函数参数的命名。&lt;/h5>
&lt;p>比如User类的一些属性，在具体命名的时候利用上下文可以省略掉User这个单词。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">uploadUserAvatarImageToAliyun&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">userAvatarImageUri&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//利用上下文简化为：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">uploadUserAvatarImageToAliyun&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">imageUri&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="3-命名要可读可搜索不要使用生僻的不好读的英文单词来命名除此之外命名要符合项目的统一规范不要用些反直觉的命名">3. 命名要可读、可搜索。不要使用生僻的、不好读的英文单词来命名。除此之外，命名要符合项目的统一规范，不要用些反直觉的命名。&lt;/h5>
&lt;p>比如统一使用selectXXX，就不要用queryXXX，或者addXXX表示插入数据而非insertXXX&lt;/p>
&lt;h5 id="4-接口有两种命名方式一种是在接口中带前缀i另一种是在接口的实现类中带后缀impl对于抽象类的命名也有两种方式一种是带上前缀abstract一种是不带前缀这两种命名方式都可以关键是要在项目中统一">4. 接口有两种命名方式：一种是在接口中带前缀“I”；另一种是在接口的实现类中带后缀“Impl”。对于抽象类的命名，也有两种方式，一种是带上前缀“Abstract”，一种是不带前缀。这两种命名方式都可以，关键是要在项目中统一。&lt;/h5>
&lt;h3 id="注释相关规范">注释相关规范&lt;/h3>
&lt;h5 id="5-注释的目的就是让代码更容易看懂只要符合这个要求的内容你就可以将它写到注释里总结一下注释的内容主要包含这样三个方面做什么为什么怎么做对于一些复杂的类和接口我们可能还需要写明如何用">5. 注释的目的就是让代码更容易看懂。只要符合这个要求的内容，你就可以将它写到注释里。总结一下，注释的内容主要包含这样三个方面：做什么、为什么、怎么做。对于一些复杂的类和接口，我们可能还需要写明“如何用”。&lt;/h5>
&lt;h5 id="6-注释本身有一定的维护成本所以并非越多越好类和函数一定要写注释而且要写得尽可能全面详细而函数内部的注释要相对少一些一般都是靠好的命名提炼函数解释性变量总结性注释来提高代码可读性">6. 注释本身有一定的维护成本，所以并非越多越好。类和函数一定要写注释，而且要写得尽可能全面、详细，而函数内部的注释要相对少一些，一般都是靠好的命名、提炼函数、解释性变量、总结性注释来提高代码可读性。&lt;/h5>
&lt;h2 id="代码风格code-style">代码风格（Code Style）&lt;/h2>
&lt;h5 id="7-函数类多大才合适函数的代码行数不要超过一屏幕的大小比如-50-行类的大小限制比较难确定">7. 函数、类多大才合适？函数的代码行数不要超过一屏幕的大小，比如 50 行。类的大小限制比较难确定。&lt;/h5>
&lt;h5 id="8-一行代码多长最合适最好不要超过-ide-显示的宽度当然限制也不能太小太小会导致很多稍微长点的语句被折成两行也会影响到代码的整洁不利于阅读">8. 一行代码多长最合适？最好不要超过 IDE 显示的宽度。当然，限制也不能太小，太小会导致很多稍微长点的语句被折成两行，也会影响到代码的整洁，不利于阅读。&lt;/h5>
&lt;h5 id="9-善用空行分割单元块对于比较长的函数为了让逻辑更加清晰可以使用空行来分割各个代码块在类内部成员变量与函数之间静态成员变量与普通成员变量之间函数之间甚至成员变量之间都可以通过添加空行的方式让不同模块的代码之间的界限更加明确">9. 善用空行分割单元块对于比较长的函数，为了让逻辑更加清晰，可以使用空行来分割各个代码块。在类内部，成员变量与函数之间、静态成员变量与普通成员变量之间、函数之间，甚至成员变量之间，都可以通过添加空行的方式，让不同模块的代码之间的界限更加明确。&lt;/h5>
&lt;h5 id="10-四格缩进还是两格缩进我个人比较推荐使用两格缩进这样可以节省空间特别是在代码嵌套层次比较深的情况下除此之外值得强调的是不管是用两格缩进还是四格缩进一定不要用-tab-键缩进">10. 四格缩进还是两格缩进？我个人比较推荐使用两格缩进，这样可以节省空间，特别是在代码嵌套层次比较深的情况下。除此之外，值得强调的是，不管是用两格缩进还是四格缩进，一定不要用 tab 键缩进。&lt;/h5>
&lt;p>如果你使用IDEA的话，是可以使用tab键作为空格的快捷方式的，但是记住，这仅仅是快捷方式而已，实际上你按tab键，打出的仍然是空格。具体的设置如下：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//imgimage-20220613194611465.png" alt="image-20220613194611465">&lt;/p>
&lt;h5 id="11-大括号是否要另起一行我个人还是比较推荐将大括号放到跟上一条语句同一行的风格这样可以节省代码行数但是将大括号另起一行也有它的优势那就是左右括号可以垂直对齐哪些代码属于哪一个代码块更加一目了然">11. 大括号是否要另起一行？我个人还是比较推荐将大括号放到跟上一条语句同一行的风格，这样可以节省代码行数。但是，将大括号另起一行，也有它的优势，那就是，左右括号可以垂直对齐，哪些代码属于哪一个代码块，更加一目了然。&lt;/h5>
&lt;h5 id="12-类中成员的排列顺序在-google-java-编程规范中依赖类按照字母序从小到大排列类中先写成员变量后写函数成员变量之间或函数之间先写静态成员变量或函数后写普通变量或函数并且按照作用域大小依次排列">12. 类中成员的排列顺序在 Google Java 编程规范中，依赖类按照字母序从小到大排列。类中先写成员变量后写函数。成员变量之间或函数之间，先写静态成员变量或函数，后写普通变量或函数，并且按照作用域大小依次排列。&lt;/h5>
&lt;h2 id="编程技巧coding-tips">编程技巧（Coding Tips）&lt;/h2>
&lt;h5 id="13-将复杂的逻辑提炼拆分成函数和类">13. 将复杂的逻辑提炼拆分成函数和类。&lt;/h5>
&lt;h5 id="14-通过拆分成多个函数或将参数封装为对象的方式来处理参数过多的情况">14. 通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。&lt;/h5>
&lt;p>比如说，大于等于5个的时候，通过单一职责的原则拆分函数，或者将参数封装为对象。&lt;/p>
&lt;h5 id="15-函数中不要使用参数来做代码执行逻辑的控制函数设计要职责单一">15. 函数中不要使用参数来做代码执行逻辑的控制。函数设计要职责单一。&lt;/h5>
&lt;h5 id="16-移除过深的嵌套层次方法包括去掉多余的-if-或-else-语句使用-continuebreakreturn-关键字提前退出嵌套调整执行顺序来减少嵌套将部分嵌套逻辑抽象成函数">16. 移除过深的嵌套层次，方法包括：去掉多余的 if 或 else 语句，使用 continue、break、return 关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。&lt;/h5>
&lt;h5 id="17-用字面常量取代魔法数">17. 用字面常量取代魔法数。&lt;/h5>
&lt;h5 id="18-用解释性变量来解释复杂表达式以此提高代码可读性">18. 用解释性变量来解释复杂表达式，以此提高代码可读性。&lt;/h5></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">规范与重构02：单元测试与代码的可测试性</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/unit-test/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/unit-test/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-04-30T20:11:26+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、代码重构的技术手段：单元测试 1. 什么是单元测试？ 单元测试是开发自己编写的用于测试自……</summary><content type="html">&lt;h2 id="一代码重构的技术手段单元测试">一、代码重构的技术手段：单元测试&lt;/h2>
&lt;h3 id="1-什么是单元测试">1. 什么是单元测试？&lt;/h3>
&lt;p>单元测试是开发自己编写的用于测试自己代码正确性的代码。相比于集成测试，单元测试更注重类和函数的逻辑是否按照预期执行了，是属于代码层级的测试。&lt;/p>
&lt;h3 id="2-为什么要写单元测试">2. 为什么要写单元测试？&lt;/h3>
&lt;ul>
&lt;li>发现你代码中的bug&lt;/li>
&lt;li>发现代码设计上的问题，如果单元测试写起来很吃力，那么极有可能代码设计的是不够合理的&lt;/li>
&lt;li>对集成测试的有力补充，尤其是一些边界条件的测试&lt;/li>
&lt;li>写单元测试的过程本身就是代码重构的过程&lt;/li>
&lt;li>阅读单元测试能够帮你快速熟悉代码，实际上单元测试就是用户用例，反映了代码的功能和如何使用&lt;/li>
&lt;li>单元测试是TDD可落地执行的改进方案（测试驱动开发）&lt;/li>
&lt;li>....&lt;/li>
&lt;/ul>
&lt;h3 id="3-如何编写单元测试">3. 如何编写单元测试？&lt;/h3>
&lt;p>这里总结出了一些经验：&lt;/p>
&lt;h4 id="1写单元测试真的很耗时吗">（1）写单元测试真的很耗时吗？&lt;/h4>
&lt;p>确实，过程很繁琐，但是基本都是cv。&lt;/p>
&lt;h4 id="2对单元测试的代码质量有什么要求吗">（2）对单元测试的代码质量有什么要求吗？&lt;/h4>
&lt;p>不会产线运行，也不会相互依赖，可以放低要求。&lt;/p>
&lt;h4 id="3单元测试只要覆盖率高就够了吗">（3）单元测试只要覆盖率高就够了吗？&lt;/h4>
&lt;p>60到70即可，不必过度追求单元测试覆盖率。&lt;/p>
&lt;h4 id="4写单元测试需要了解代码的实现逻辑吗">（4）写单元测试需要了解代码的实现逻辑吗？&lt;/h4>
&lt;p>要着重关心被测函数实现的功能而非内部逻辑。&lt;/p>
&lt;h4 id="5如何选择单元测试框架">（5）如何选择单元测试框架？&lt;/h4>
&lt;p>不需要太复杂的技术，大部分单元测试框架都能满足。&lt;/p>
&lt;h3 id="4-如何在团队中推行单元测试">4. 如何在团队中推行单元测试？&lt;/h3>
&lt;p>首先，100%落实执行单元测试是一件“知易行难”的事。&lt;/p>
&lt;p>很多历史代码因为没有单元测试而难以推行，需要每个开发都要有主人翁意识。&lt;/p>
&lt;p>此外，程序员应该是智力密集型行业，但是目前很多都是劳动密集型，既没有单元测试，也没有Code Review。写好代码直接提交，然后交给黑盒测试，然后再改bug，如此反复。但实际上，在完善单元测试的情况下，可以很大的减少黑盒测试的投入。&lt;/p>
&lt;p>&lt;strong>关于单元测试的更多详细信息，可以参考之前的博客中关于单元测试我在团队中的一些实践。&lt;/strong>&lt;/p>
&lt;h2 id="二代码的可测试性">二、代码的可测试性&lt;/h2>
&lt;h3 id="1-什么是代码的可测试性">1. 什么是代码的可测试性？&lt;/h3>
&lt;p>粗略地讲，所谓代码的可测试性，就是针对代码编写单元测试的难易程度。对于一段代码，如果很难为其编写单元测试，或者单元测试写起来很费劲，需要依靠单元测试框架中很高级的特性，那往往就意味着代码设计得不够合理，代码的可测试性不好。&lt;/p>
&lt;h3 id="2-编写可测试性代码的最有效手段">2. 编写可测试性代码的最有效手段&lt;/h3>
&lt;p>依赖注入是编写可测试性代码的最有效手段。通过依赖注入，我们在编写单元测试的时候，可以通过 mock 的方法解依赖外部服务，这也是我们在编写单元测试的过程中最有技术挑战的地方。&lt;/p>
&lt;h3 id="3-常见的-anti-patterns">3. 常见的 Anti-Patterns&lt;/h3>
&lt;p>&lt;strong>反面模式&lt;/strong>（anti-pattern或antipattern）指的是在实践中经常出现但又低效或是有待优化的设计模式。&lt;/p>
&lt;p>常见的测试不友好的代码有下面这 5 种：&lt;/p>
&lt;ul>
&lt;li>代码中包含未决行为逻辑&lt;/li>
&lt;li>滥用可变全局变量&lt;/li>
&lt;li>滥用静态方法&lt;/li>
&lt;li>使用复杂的继承关系&lt;/li>
&lt;li>高度耦合的代码&lt;/li>
&lt;/ul>
&lt;h2 id="三如何通过封装抽象模块化中间层等解耦代码">三、如何通过封装、抽象、模块化、中间层等解耦代码？&lt;/h2>
&lt;p>前面讲到，重构可以分为大规模高层重构和小规模低层次重构。大型重构是对系统、模块、代码结构、类之间关系等顶层代码设计进行的重构。对于大型重构来说，最有效的一个手段莫过于“解耦”。&lt;/p>
&lt;p>下面分三个部分详细说一下这个“解耦”：&lt;/p>
&lt;h3 id="1-解耦为何如此重要">1. “解耦”为何如此重要？&lt;/h3>
&lt;p>如果说重构是保证代码质量不至于腐化到无可救药地步的有效手段，那么利用解耦的方法对代码重构，就是保证代码不至于复杂到无法控制的有效手段。&lt;/p>
&lt;p>“高内聚、松耦合”是一个比较通用的设计思想，不仅可以知道细粒度的类和类之间关系的设计，还能指导粗粒度的系统、架构、模块的设计。相对于编码规范，它能够在更高层次上提高代码的可读性和可维护性。“高内聚、松耦合”的特性可以让我们在阅读和修改代码的时候专注在某一模块，修改代码不会牵一发而动全身。&lt;/p>
&lt;p>除此之外，代码“高内聚、松耦合”，也就意味着，代码结构清晰、分层和模块化合理、依赖关系简单、模块或类之间的耦合小，那代码整体的质量就不会差。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围是非常有限的。我们可以聚焦于这个模块或者类，做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就容易多了。&lt;/p>
&lt;h3 id="2-代码是否需要解耦">2. 代码是否需要“解耦”？&lt;/h3>
&lt;p>判断这个问题的标准有很多，比如说看看这个代码修改后的影响范围，看代码修改会不会牵一发而动全身。此外，还有一个直接的衡量标准，那就是把模块与模块之间、类与类之间的依赖关系设计出来，根据关系图的复杂性来判断是否需要解耦。&lt;/p>
&lt;h3 id="3-如何给代码解耦">3. 如何给代码“解耦”？&lt;/h3>
&lt;h4 id="1封装与抽象">（1）封装与抽象&lt;/h4>
&lt;p>封装和抽象作为两个非常通用的设计思想，可以应用在很多设计场景中，比如系统、模块、lib、组件、接口、类等等的设计。封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口。&lt;/p>
&lt;h4 id="2中间层">（2）中间层&lt;/h4>
&lt;p>引入中间层能简化模块或类之间的依赖关系。下面这张图是引入中间层前后的依赖关系对比图。在引入数据存储中间层之前，A、B、C 三个模块都要依赖内存一级缓存、Redis 二级缓存、DB 持久化存储三个模块。在引入中间层之后，三个模块只需要依赖数据存储一个模块即可。从图上可以看出，中间层的引入明显地简化了依赖关系，让代码结构更加清晰。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com//imgcbcefa78026fd1d0cb9837dde9adae52.jpg" alt="img" style="zoom: 25%;" />
&lt;h4 id="3模块化">（3）模块化&lt;/h4>
&lt;p>模块化是构建复杂系统常用的手段。不仅在软件行业，在建筑、机械制造等行业，这个手段也非常有用。对于一个大型复杂系统来说，没有人能掌控所有的细节。之所以我们能搭建出如此复杂的系统，并且能维护得了，最主要的原因就是将系统划分成各个独立的模块，让不同的人负责不同的模块，这样即便在不了解全部细节的情况下，管理者也能协调各个模块，让整个系统有效运转。&lt;/p>
&lt;h4 id="4其他设计思想和原则">（4）其他设计思想和原则&lt;/h4>
&lt;ul>
&lt;li>单一职责原则&lt;/li>
&lt;li>基于接口而非实现编程&lt;/li>
&lt;li>依赖注入&lt;/li>
&lt;li>多用组合少用继承&lt;/li>
&lt;li>迪米特法则&lt;/li>
&lt;/ul>
&lt;p>具体的内容可以跳转到前面设计思想的相关章节查看。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">规范与重构01：代码重构的基本概念</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/refactor-base/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/refactor-base/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-04-24T14:57:16+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、重构的定义 软件设计大师Martin Fowler对重构的定义是：重构是一种对软件内……</summary><content type="html">&lt;h2 id="一重构的定义">一、重构的定义&lt;/h2>
&lt;p>软件设计大师Martin Fowler对重构的定义是：重构是一种对软件内部结构的改善，目的是不改变软件的可见行为的情况下，使其更易理解，修改成本更低。&lt;/p>
&lt;p>这里有一点需要强调一下，重构不改变外部的可见行为。所以，我们可以简单的理解为：在保持功能不变的前提下，利用设计思想、原则、模式、编程规范等理论来优化代码，修改设计上的不足，提高代码质量。&lt;/p>
&lt;h2 id="二代码重构的5w1h">二、代码重构的“5W1H”&lt;/h2>
&lt;blockquote>
&lt;p>5W+1H：是对选定的项目、工序或操作，都要从原因（何因Why）、对象（何事What）、地点（何地Where）、时间（何时When）、人员（何人Who）、方法（何法How）等六个方面提出问题进行思考。&lt;/p>
&lt;/blockquote>
&lt;p>对于代码重构来说，地点和人员属于与我们要讲的主题关系不大的两点，所以我们重点来看下3W1H：&lt;/p>
&lt;p>&lt;strong>重构的目的（why）、重构的对象（what）、重构的时机（when）以及重构的方法（how）&lt;/strong>&lt;/p>
&lt;h3 id="1-重构的目的为什么要重构why">1. 重构的目的：为什么要重构（why）&lt;/h3>
&lt;ol>
&lt;li>重构是适合保证代码质量的手段，如果没有人为的维护，代码总是朝着混乱的方向演进&lt;/li>
&lt;li>优秀的代码或者架构并不是一开始就设计好的，随着迭代重构是不可避免的&lt;/li>
&lt;li>避免过度设计，做到有的放矢&lt;/li>
&lt;li>对一个工程师本身的成长具有重要的意义&lt;/li>
&lt;/ol>
&lt;h3 id="2-重构的对象到底重构什么what">2. 重构的对象：到底重构什么（what）&lt;/h3>
&lt;p>根据重构的规模，可以分为大型重构和小型重构。&lt;/p>
&lt;p>所谓大型重构，是对顶层代码设计的重构，包括：系统、模块、代码结构、类与类之间的关系等，重构的手段有分层、模块化、解耦、抽象可复用组建等等。重构的工具就是设计思想、设计原则以及设计模式。&lt;/p>
&lt;p>而小型重构主要是针对类、函数、变量等代码级别的重构，比如规范命名、规范注释、消除超大类或者函数、提取重复代码等等。主要工具是我们所约定的一些代码规范等。&lt;/p>
&lt;h3 id="3-重构的时机什么时候重构when">3. 重构的时机：什么时候重构（when）&lt;/h3>
&lt;p>一定要建立持续重构意识，把重构作为开发必不可少的部分，融入到日常开发中，而不是等到代码出现很大问题的时候，再大刀阔斧地重构。&lt;/p>
&lt;p>平时没有事情的事情就可以看看哪些写的不够好的、可以优化的代码，主动去重构一下，这种持续重构的意识比重构本身更加重要。&lt;/p>
&lt;h3 id="4-重构的方法又该如何重构how">4. 重构的方法：又该如何重构（how）&lt;/h3>
&lt;p>对于大型重构来说，我们需要做好完善的重构计划，需要评估影响范围以及如何兼容老的代码逻辑，要分阶段进行，每一个阶段的重构都不要耗时太长，这样才能不与新的功能开发冲突。而小规模重构，影响范围较小，随时都可以去做，此外还可以通过静态代码检查来自动发现代码中的问题，针对性的进行重构优化。&lt;/p>
&lt;h2 id="三代码重构的技术手段单元测试">三、代码重构的技术手段：单元测试&lt;/h2>
&lt;h3 id="1-什么是单元测试">1. 什么是单元测试？&lt;/h3>
&lt;p>单元测试是开发自己编写的用于测试自己代码正确性的代码。相比于集成测试，单元测试更注重类和函数的逻辑是否按照预期执行了，是属于代码层级的测试。&lt;/p>
&lt;h3 id="2-为什么要写单元测试">2. 为什么要写单元测试？&lt;/h3>
&lt;ul>
&lt;li>发现你代码中的bug&lt;/li>
&lt;li>发现代码设计上的问题，如果单元测试写起来很吃力，那么极有可能代码设计的是不够合理的&lt;/li>
&lt;li>对集成测试的有力补充，尤其是一些边界条件的测试&lt;/li>
&lt;li>写单元测试的过程本身就是代码重构的过程&lt;/li>
&lt;li>阅读单元测试能够帮你快速熟悉代码，实际上单元测试就是用户用例，反映了代码的功能和如何使用&lt;/li>
&lt;li>单元测试是TDD可落地执行的改进方案（测试驱动开发）&lt;/li>
&lt;li>....&lt;/li>
&lt;/ul>
&lt;h3 id="3-如何编写单元测试">3. 如何编写单元测试？&lt;/h3>
&lt;p>这里总结出了一些经验：&lt;/p>
&lt;h4 id="1写单元测试真的很耗时吗">（1）写单元测试真的很耗时吗？&lt;/h4>
&lt;p>确实，过程很繁琐，但是基本都是cv。&lt;/p>
&lt;h4 id="2对单元测试的代码质量有什么要求吗">（2）对单元测试的代码质量有什么要求吗？&lt;/h4>
&lt;p>不会产线运行，也不会相互依赖，可以放低要求。&lt;/p>
&lt;h4 id="3单元测试只要覆盖率高就够了吗">（3）单元测试只要覆盖率高就够了吗？&lt;/h4>
&lt;p>60到70即可，不必过度追求单元测试覆盖率。&lt;/p>
&lt;h4 id="4写单元测试需要了解代码的实现逻辑吗">（4）写单元测试需要了解代码的实现逻辑吗？&lt;/h4>
&lt;p>要着重关心被测函数实现的功能而非内部逻辑。&lt;/p>
&lt;h4 id="5如何选择单元测试框架">（5）如何选择单元测试框架？&lt;/h4>
&lt;p>不需要太复杂的技术，大部分单元测试框架都能满足。&lt;/p>
&lt;h3 id="4-如何在团队中推行单元测试">4. 如何在团队中推行单元测试？&lt;/h3>
&lt;p>首先，100%落实执行单元测试是一件“知易行难”的事。&lt;/p>
&lt;p>很多历史代码因为没有单元测试而难以推行，需要每个开发都要有主人翁意识。&lt;/p>
&lt;p>此外，程序员应该是智力密集型行业，但是目前很多都是劳动密集型，既没有单元测试，也没有Code Review。写好代码直接提交，然后交给黑盒测试，然后再改bug，如此反复。但实际上，在完善单元测试的情况下，可以很大的减少黑盒测试的投入。&lt;/p>
&lt;p>&lt;strong>关于单元测试的更多详细信息，可以参考之前的博客中关于单元测试我在团队中的一些实践。&lt;/strong>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">PicGo+Typora+腾讯COS自动将图片上传到图床</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/picgo-typora-txcos/"/><id>https://kiwi4814.github.io/posts/2022/picgo-typora-txcos/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-27T10:13:12+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Typora真是我用过最好用的一款Markdown软件，前段时间收费也第一时间入正支……</summary><content type="html">&lt;p>Typora真是我用过最好用的一款Markdown软件，前段时间收费也第一时间入正支持了，目前几乎所有的写作都要使用，而且配合Pandoc可以很方便的导出各种格式，对我来说也算是强大的生产力工具了。&lt;/p>
&lt;p>不过，对于写作过程中图片的处理我是经历了一番曲折的，Typora默认粘贴进来的图片会放在内存中，如果笔记文件换个电脑看就看不到图片了；后来我通过Typora的设置把图片放到了固定的的assets文件夹下，这样图片就不会随着缓存被清而消失了，很方便在各个设备之间同步；但是随之带来的问题就是图片的大小，日积月累下来同步的文件夹会特别大。后来想到了图床（所谓图床就是云上的一块空间专门用来存储图片，当你上传完图片后会有一个链接，这个链接按照格式嵌入markdown就能展示这张图片了），如果将图片存入云服务器，然后对于我的文章来说，这张图片就是几十到上百个字符串而已，极大的节省了空间。&lt;/p>
&lt;p>接下来就是痛苦的选型阶段，目前主流的图床有七牛云、SM.MS、ImgURL等等，但由于图床是一个需要长期使用的服务（换图床是一件痛苦的事情，尤其是图片越来越多的时候），所以尽量对数据有一定掌控性，这时候我想到了可以直接在Github、Gitee上直接建个仓库专门用来存图，虽然事后证明这是一个错误的决定，也正是此文产生的原因，但当时终于是搞定了。&lt;/p>
&lt;p>还有另外一个问题悬而未决，使用图床的话意味着你每次在文章中插入图片，你都要打开图床网站，手动上传图片，然后复制链接，再到文章中插入，这样实在是太麻烦了，所幸Typora提供了插入图片时的一些定制化操作，然后照着网上的教程一步一步，终于实现了最终的样子 —— &lt;strong>在Typora中上传图片时，自动调用PicGo将图片上传到指定的图床并替换图片链接到文章。&lt;/strong>&lt;/p>
&lt;p>在使用的过程中，逐渐发现了gitee的一些限制：图片不能大于1M、无法显示动图等等，然后我又使用SM.MS作为备用，然后终于有一天我发现所有的图片都不显示了，排查了一番发现要在所有的图片上都加上&lt;code>referrerpolicy=&amp;quot;no-referrer&amp;quot;&lt;/code>属性才可以，这意味着我大量的图片都需要去修改的结构，所以，为什么不能显示我也懒得排查了，直接换图床吧！&lt;/p>
&lt;p>漫长的前情提要终于写完，由于之前折腾的时候没有做记录，这次就稍微记录下吧。&lt;/p>
&lt;h2 id="腾讯云cos">腾讯云COS&lt;/h2>
&lt;p>PicGo支持的图床很多，这次选型采用了腾讯云COS作为图床，主要基于以下考量：&lt;/p>
&lt;ul>
&lt;li>原本是想要用七牛云，但是需要绑定自己的备案域名；&lt;/li>
&lt;li>腾讯的服务至少比其他的小厂商要稳定的多，图床还是要稳定一点；&lt;/li>
&lt;li>腾讯目前收费还算便宜&lt;/li>
&lt;/ul>
&lt;p>登录&lt;a href="https://cloud.tencent.com/">腾讯云&lt;/a>并完成注册、实名认证等一系列步骤后，在控制台选择&lt;strong>对象存储&lt;/strong>并打开详情页面，选择“创建存储桶”。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220327112126210.png" alt="image-20220327112126210">&lt;/p>
&lt;p>创建的时候注意访问权限选择“公有读私有写”，因为我们需要外链来访问图片。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220327112333701.png" alt="image-20220327112333701">&lt;/p>
&lt;p>创建完成后我们就可以在存储桶中进行图片的上传了，可以上传一张测试以下外链是否能访问。&lt;/p>
&lt;p>然后，我们需要创建一个子账号并且生成用于给PicGo上传图片的访问密钥，选择子账号是因为权限隔离，子账号只允许操作COS相关的数据。创建子账号需要进行授权，这里大家自行按照指引操作即可，授权的时候可以按照关键词搜索COS或者对象存储。&lt;/p>
&lt;p>创建好账号后，我们使用子账号重新登录进控制台，第一次需要强制重置密码，然后点击菜单栏访问密钥 -&amp;gt; API密钥管理，选择新建密钥，然后系统会帮你生成一个APPID，一对密钥串（SecretId和SecretKey），记住这几个key。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220327113514126.png" alt="image-20220327113514126">&lt;/p>
&lt;p>然后我们就可以配置PicGo了。&lt;/p>
&lt;h2 id="配置picgo">配置PicGo&lt;/h2>
&lt;p>PicGo是一款开源的，用于快速上传图片到图床并且获取链接的工具，支持七牛、腾讯、又拍、阿里云等多种图床，此外还支持各类第三方插件，比如额外的图床支持、图片自动压缩等等。对于更详细的介绍，可以移步&lt;a href="https://molunerfinn.com/PicGo/">中文官方网站&lt;/a>查看，这里不再赘述。&lt;/p>
&lt;p>&lt;strong>如果需要使用三方插件，需要自行安装好node。&lt;/strong>&lt;/p>
&lt;p>下面我们只需要配置腾讯云COS下面的相关配置即可。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220327145408764.png" alt="image-20220327145408764">&lt;/p>
&lt;p>如上图所示，将子用户申请的密钥信息填入对应的框内，其中确认存储区域这里取的是你在创建存储桶时所选择的区域对应的代码，具体可以查看&lt;a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A">帮助文档&lt;/a>中的详细说明。&lt;/p>
&lt;p>保存后将其设置为默认图床即可。&lt;/p>
&lt;p>此外，PicGo的其他丰富功能诸如上传前重命名、管理远程图片、自动压缩图片质量等等功能留待读者自行研究，官方文档已经有非常详尽的说明了。&lt;/p>
&lt;h2 id="配置typora">配置Typora&lt;/h2>
&lt;p>接下来，我们要实现的是在Typora中粘贴图片时，自动将图片上传到腾讯云COS并将外链自动插入到图片，配置很简单，按照下图操作即可：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220327150133538.png" alt="image-20220327150133538">&lt;/p>
&lt;p>至此，我们就实现了写文章时自动插入图床图片的功能。&lt;/p>
&lt;h2 id="如何更换图床">如何更换图床？&lt;/h2>
&lt;p>前文说到我已经在gitee上上传了大量的图片，这些图片因为未知的原因已经无法显示了，于是这些图片也要切换到腾讯云COS上，我的做法是将gitee的仓库clone下来，然后把整个图片文件夹通过腾讯云控制台管理存储桶的页面上传上去，然后批量替换文章中的路径前缀，解决。&lt;/p></content><category scheme="https://kiwi4814.github.io/tags/2022/03/picgo/" term="picgo" label="picgo"/><category scheme="https://kiwi4814.github.io/tags/2022/03/typora/" term="typora" label="typora"/></entry><entry><title type="text">一切反动派都是纸老虎！~ 学习Cron表达式</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/cron-expression/"/><id>https://kiwi4814.github.io/posts/2022/cron-expression/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-26T09:57:03+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">经常能看到形如0 */15 * ? * *的的一些表达式用在项目中，表示定时任务的执行频率，但一直不……</summary><content type="html">&lt;p>经常能看到形如&lt;code>0 */15 * ? * *&lt;/code>的的一些表达式用在项目中，表示定时任务的执行频率，但一直不明白其原理。由于自己懒惰的天性，每次用到的时候照葫芦画瓢写一个或者网上生成一个，就这样凑凑活活一直用到现在。最近关于定时任务的需求激增，终于忍无可忍，决定学一学这“该死”的cron表达式，然后竟然意外地发现很简单，果然一切反动派都是纸老虎。&lt;/p>
&lt;p>并且，在翻阅资料的过程中，发现大部分网站尤其是一些中文网站的关于cron的文章质量简直惨不忍睹，而且有大量的翻译错误，所以多花了一些时间查阅了资料（遗憾是没有经过我自己的实战，这样可能要花更多的时间），也尽量记录了我的一些疑问，在后续的实战过程中有新的收获都会随时更新。&lt;/p>
&lt;h2 id="一些问题和自己的理解">一些问题和自己的理解&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;em>&lt;strong>cron表达式经常能看到不同位数的，比如5位，6位甚至7位的，具体怎么区分这些呢？&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;font color="orange">首先我们要明白语境所说的cron具体是在什么场景下的，类Unix系统下的cron是一种默认的实现，此外还有其他一些实现，比如Quartz Java scheduler。以默认实现和Quartz为例作对比，有以下几点区别：&lt;/font>&lt;/p>
&lt;ul>
&lt;li>&lt;font color="orange">默认的cron第一位为分钟，第六位是年，年可以省略，也就是我们看到的五位和六位的区别，而Quartz从秒开始，也就是六位或者七位&lt;/font>&lt;/li>
&lt;li>&lt;font color="orange">默认的cron只支持&lt;code>*&lt;/code> &lt;code>,&lt;/code> &lt;code>-&lt;/code>这几个特殊符号（某些情况下也支持 &lt;code>/&lt;/code>），而Quartz还额外支持&lt;code>/&lt;/code> &lt;code>?&lt;/code> &lt;code>L&lt;/code> &lt;code>W&lt;/code> &lt;code>C&lt;/code> &lt;code>#&lt;/code>等特殊符号，具有强大的功能&lt;/font>&lt;/li>
&lt;li>&lt;font color="orange">默认的cron支持&lt;code>* * * * *&lt;/code>这种写法，表示每分钟执行一次，而Quartz下虽然day-of-month和day-of-week这两个字段能用&lt;code>?&lt;/code>替代&lt;code>*&lt;/code>，但是这两个字段不能同时为&lt;code>*&lt;/code>或者&lt;code>?&lt;/code>&lt;/font>&lt;/li>
&lt;li>&lt;font color="orange">Quartz day-of-week这个字段的数字取值为1~7，其中1代表周日；区别于默认实现的0~6（0代表周日）&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>&lt;code>?&lt;/code>的用法（既然有了&lt;code>*&lt;/code>，为什么还要有&lt;code>?&lt;/code> &lt;code>*&lt;/code>和&lt;code>?&lt;/code>能否同时用于day-of-week和day-of-month？）&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;font color="orange">这个问题困扰了我蛮久的，后来发现这可能是Quartz的实现方式导致的，源码中的注释描述为Support for specifying both a day-of-week and a day-of-month value is
not complete (you'll need to use the '?' character in on of these fields).&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>在L的用法中，关于&amp;quot;&lt;code>3-L&lt;/code>&amp;quot;用在day-of-week中的真正含义？&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;font color="orange">这里的原文为the third-to-last day of the calendar month，应该翻译为倒数第三天，此处有教程翻译成最后三天。此处请教了一些大佬，通用的理解是third-to-last中间的连字符代表了形容词，正确的理解是倒数第三天，猜测是翻译软件将连字符去掉了，所以变成了从第三天到最后一天。&lt;/font>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="cron简介">Cron简介&lt;/h2>
&lt;p>根据维基百科的介绍，&lt;strong>cron&lt;/strong>该词来源于希腊语chronos（χρόνος），原意是时间。&lt;/p>
&lt;p>在类Unix系统中，cron作为一个基于时间的任务管理工具，可以让用户在固定时间、日期、间隔下，运行定期任务、命令或者脚本。在Unix系统中我们一般使用**&lt;code>crontab&lt;/code>&lt;strong>命令来管理用户的定时任务，而定义&lt;/strong>&lt;code>crontab&lt;/code>&lt;strong>命令中任务的执行周期，就是cron表达式。&lt;/strong>&lt;code>crontab&lt;/code>**的原理及用法值得单开一文来讲解，这里不再展开，我们知道cron是什么意思即可。&lt;/p>
&lt;h2 id="cron表达式cron-expression">Cron表达式（CRON expression）&lt;/h2>
&lt;p>先来说说cron表达式的定义，cron表达式是一个由&lt;code>5~6段字段&lt;/code>组成的字符串，字段与字段之间用空格隔开，表达的含义是一组设定好的时间。其中这&lt;code>5~6段字段&lt;/code>的含义如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段含义&lt;/th>
&lt;th>是否必须&lt;/th>
&lt;th>允许的值&lt;/th>
&lt;th>允许的特殊字符&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>分钟（Minutes）&lt;/td>
&lt;td>是&lt;/td>
&lt;td>&lt;code>0~59&lt;/code>&lt;/td>
&lt;td>&lt;code>*&lt;/code> &lt;code>,&lt;/code> &lt;code>-&lt;/code> &lt;code>/&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>小时（Hours）&lt;/td>
&lt;td>是&lt;/td>
&lt;td>&lt;code>0~23&lt;/code>&lt;/td>
&lt;td>&lt;code>*&lt;/code> &lt;code>,&lt;/code> &lt;code>-&lt;/code> &lt;code>/&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>天（Day of month）&lt;/td>
&lt;td>是&lt;/td>
&lt;td>&lt;code>1~31&lt;/code>&lt;/td>
&lt;td>&lt;code>*&lt;/code> &lt;code>,&lt;/code> &lt;code>-&lt;/code> &lt;code>/&lt;/code> &lt;code>?&lt;/code> &lt;code>L&lt;/code> &lt;code>W&lt;/code> &lt;code>C&lt;/code>&lt;/td>
&lt;td>&lt;code>?&lt;/code> &lt;code>L&lt;/code> &lt;code>W&lt;/code> &lt;code>C&lt;/code>仅仅在特定的实现可用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>月（Month）&lt;/td>
&lt;td>是&lt;/td>
&lt;td>&lt;code>1~12&lt;/code> 或 &lt;code>JAN~DEC&lt;/code>&lt;/td>
&lt;td>&lt;code>*&lt;/code> &lt;code>,&lt;/code> &lt;code>-&lt;/code> &lt;code>/&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>周几（Day of week）&lt;/td>
&lt;td>是&lt;/td>
&lt;td>&lt;code>0~6&lt;/code> 或 &lt;code>SUN~SAT&lt;/code>&lt;/td>
&lt;td>&lt;code>*&lt;/code> &lt;code>,&lt;/code> &lt;code>-&lt;/code> &lt;code>/&lt;/code> &lt;code>?&lt;/code> &lt;code>L&lt;/code> &lt;code>#&lt;/code> &lt;code>C&lt;/code>&lt;/td>
&lt;td>&lt;code>?&lt;/code> &lt;code>L&lt;/code> &lt;code>#&lt;/code> &lt;code>C&lt;/code>仅仅在特定的实现可用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>年（Year）&lt;/td>
&lt;td>否&lt;/td>
&lt;td>&lt;code>1970~2099&lt;/code>&lt;/td>
&lt;td>&lt;code>*&lt;/code> &lt;code>,&lt;/code> &lt;code>-&lt;/code> &lt;code>/&lt;/code> &lt;code>?&lt;/code> &lt;code>L&lt;/code> &lt;code>#&lt;/code>&lt;/td>
&lt;td>在cron表达式的标准字段中不支持这个字段&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>【备注】&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>月份和周几的表达式中如果使用字母缩写表示的话，是不区分大小写的&lt;/li>
&lt;li>在一些表达式中甚至还包含&lt;code>秒&lt;/code>这个字段，在表达式的开头，这时候可能有7个字段&lt;/li>
&lt;li>&lt;em>最新的Quazrt代码中，月份改为0~11，年份改为了1970~2199&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>从上面表格中我们可以得出看到：&lt;/p>
&lt;ul>
&lt;li>cron表达式不止一种实现，并且在其他实现中支持一些更强大的功能。&lt;/li>
&lt;li>cron表达式除了支持数字还有一些特殊字符，这些字符的含义暂时还不清楚。&lt;/li>
&lt;/ul>
&lt;p>下面先来看看这些标准实现下的字符代表什么意思：&lt;/p>
&lt;h6 id="星号">星号（&lt;code>*&lt;/code>）&lt;/h6>
&lt;p>代表任何可能的值。&lt;/p>
&lt;h6 id="逗号">&lt;strong>逗号（&lt;code>,&lt;/code>）&lt;/strong>&lt;/h6>
&lt;p>逗号表示一个逗号分开的列表，比如在第五个字段中使用&amp;quot;&lt;code>MON,WED,FRI&lt;/code>&amp;quot;用来表示周一、周三和周五。&lt;/p>
&lt;h6 id="中划线-">&lt;strong>中划线（&lt;code>-&lt;/code>）&lt;/strong>&lt;/h6>
&lt;p>中划线表示一个范围，比如2000–2020表示从2000年到2020年之间的每一年。&lt;/p>
&lt;h6 id="百分号">&lt;strong>百分号（&lt;code>%&lt;/code>）&lt;/strong>&lt;/h6>
&lt;p>除非用反斜杠(&lt;code>\&lt;/code>)转义，否则命令中的%符号将被变为换行符，并且在第一个%之后的所有数据都将作为标准输入发送给命令。&lt;/p>
&lt;hr>
&lt;p>上面就是标准cron表达式中定义的所有特殊字符。刚才我们说过，cron表达式不止有一种实现，在一些特殊的实现中可以支持更多的特殊字符，比如Java定时调度框架Quartz Java scheduler、Jenkins等等，它们支持的字符含义及使用方法如下：&lt;/p>
&lt;hr>
&lt;h6 id="斜杠">斜杠（&lt;code>/&lt;/code>）&lt;/h6>
&lt;p>斜杠&lt;code>/&lt;/code>可以指定步长值，比如&amp;quot;&lt;code>*/5&lt;/code>&amp;quot;用在分钟这个字段可以用来表示每隔5分钟触发一次。&lt;/p>
&lt;ul>
&lt;li>由于cron是无状态的，它不会记住上次触发的时间，所以并不能精确的表示频率，只能在一些特殊的值下表示（比如对于分钟这个字段可以用&lt;code>*/2, */3, */4, */5, */6, */10, */12, */15, */20 和 */30&lt;/code>，对小时则是&lt;code>*/2, */3, */4, */6, */8 和 */12&lt;/code>，其他以此类推）。&lt;/li>
&lt;li>当然，并不是说步长值只能用上面列出来的项，可以随意指定，但是触发规律就可能不会按照你的期望，比如在分钟字段使用&lt;code>1/45&lt;/code>表示每小时的01和46分触发，而&lt;code>*/70&lt;/code>则会在每小时00分触发。&lt;/li>
&lt;/ul>
&lt;h6 id="字母ll">字母L（&lt;code>L&lt;/code>）&lt;/h6>
&lt;p>&lt;code>L&lt;/code>代表last，表示指定的字段在周期内的最后一天，不能在指定范围或者列表的时候使用（也就是说不能用&lt;code>-&lt;/code>和&lt;code>,&lt;/code>）可以用在&amp;quot;天（day-of-month）&amp;quot;和&amp;quot;周几（day-of-week）&amp;quot;这两个字段的位置上，用法分别如下：&lt;/p>
&lt;ul>
&lt;li>当L用在&amp;quot;天（day-of-month）&amp;quot;这个字段上时，表示月份的最后一天；此外，L可以和偏移值一起使用，比如&amp;quot;&lt;code>3-L&lt;/code>&amp;quot;表示当月的倒数第三天（the third-to-last day of the calendar month）。&lt;/li>
&lt;li>当用在&amp;quot;周几（day-of-week）&amp;quot;这个字段时，表示周的最后一天；此外，L前面可以加上0~6的数字，比如使用&amp;quot;&lt;code>5L&lt;/code>&amp;quot;表示当月的的最后一个周五。&lt;/li>
&lt;li>L可以和W一起使用，用&amp;quot;&lt;code>LW&lt;/code>&amp;quot;表示当月的最后一个工作日。&lt;/li>
&lt;/ul>
&lt;h6 id="字母ww">字母W（&lt;code>W&lt;/code>）&lt;/h6>
&lt;p>&lt;code>W&lt;/code>表示weekday，&lt;code>W&lt;/code>字段仅仅允许在&amp;quot;天（day-of-month）&amp;quot;这个字段中使用，不能单独使用，并且不能在指定范围或者列表的时候使用（也就是说不能用&lt;code>-&lt;/code>和&lt;code>,&lt;/code>），其含义时用来指定离指定日期最近的一个工作日（周一到周五）。&lt;/p>
&lt;ul>
&lt;li>比如&amp;quot;&lt;code>15W&lt;/code>&amp;quot;表示每个月离15号最近的一个工作日，如果15号是周六，那么会在14号触发，如果是周日会在16号触发。&lt;/li>
&lt;li>另外，这个工作日不会超过给定的范围，比如&amp;quot;&lt;code>1W&lt;/code>&amp;quot;中，1号是周六的话，触发的时间应该是3号而非上个月的最后一天。&lt;/li>
&lt;li>L可以和W一起使用，用&amp;quot;&lt;code>LW&lt;/code>&amp;quot;表示当月的最后一个工作日。&lt;/li>
&lt;/ul>
&lt;h6 id="井字符">井字符（&lt;code>#&lt;/code>）&lt;/h6>
&lt;p>&lt;code>#&lt;/code>一般用于&amp;quot;周几（day-of-week）&amp;quot;这个字段，而且必须跟在数字1~5后面，用来指定给定月份的第几个&amp;quot;周几&amp;quot;，比如&amp;quot;5#3&amp;quot;的含义是给定月份的第三个周五。&lt;/p>
&lt;blockquote>
&lt;p>表格中可以看到还能用于年这个字段，这时候代表什么含义呢？&lt;/p>
&lt;/blockquote>
&lt;h6 id="问号">问号（&lt;code>?&lt;/code>）&lt;/h6>
&lt;p>在一些实现中(比如Quartz)，当&lt;code>?&lt;/code>可以使用在&amp;quot;天（day-of-month）&amp;quot;和&amp;quot;周几（day-of-week）&amp;quot;，它的含义是“无确定值”，当我们需要在其中一个字段中指定某个值，而在另外一个字段中不指定值的时候使用。但无法在这两个字段中同时使用&lt;code>?&lt;/code>。&lt;/p>
&lt;p>而在另外一些实现中，&lt;code>?&lt;/code>代表随着Cron守护进程的启动时间，比如&amp;quot;&lt;code>? ? * * * *&lt;/code>&amp;quot;将会被动态替换为cron进程启动的时间，如果cron进程在早上8:25启动，那么表达式将变成&amp;quot;&lt;code>25 8 * * * *&lt;/code>&amp;quot;，并且在之后的每天早上8:25触发，知道cron进程再次重新启动。&lt;/p>
&lt;h6 id="字母hh">字母H（&lt;code>H&lt;/code>）&lt;/h6>
&lt;p>&lt;code>H&lt;/code>是&lt;a href="https://github.com/jenkinsci/jenkins/blob/master/core/src/main/resources/hudson/triggers/TimerTrigger/help-spec.jelly">Jenkins系统中特有的字符&lt;/a>，感兴趣的可跳转至原文或者&lt;a href="https://kiwi4814.github.io/posts/2022/cron-expression/#Jekins%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6H%E7%94%A8%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%B4%E6%98%8E">附录&lt;/a>查看。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="一些生成器">一些生成器&lt;/h3>
&lt;p>&lt;strong>默认的cron表达式生成器&lt;/strong>：&lt;a href="https://crontab.guru/">Crontab.guru&lt;/a>&lt;/p>
&lt;p>&lt;strong>Quartz实现的cron表达式生成器&lt;/strong>：&lt;a href="https://www.programmertools.online/generator/cron_expression.html">Cron Expression Generator&lt;/a>&lt;/p>
&lt;h3 id="jekins中关于字符h用法的一些说明">Jekins中关于字符H用法的一些说明&lt;/h3>
&lt;blockquote>
&lt;p>To allow periodically scheduled tasks to produce even load on the system,the symbol &lt;code>H&lt;/code> (for &amp;quot;hash&amp;quot;) should be used wherever possible.&lt;/p>
&lt;p>For example, using &lt;code>0 0 * * *&lt;/code> for a dozen daily jobs will cause a large spike at midnight.&lt;/p>
&lt;p>In contrast, using &lt;code>H H * * *&lt;/code> would still execute each job once a day,but not all at the same time, better using limited resources.&lt;/p>
&lt;p>The &lt;code>H&lt;/code> symbol can be used with a range. For example, &lt;code>H H(0-7) * * *&lt;/code> means some time between 12:00 AM (midnight) to 7:59 AM.
You can also use step intervals with &lt;code>H&lt;/code>, with or without ranges. The &lt;code>H&lt;/code> symbol can be thought of as a random value over a range, but it actually is a hash of the job name, not a random function, so that the value remains stable for any given project.&lt;/p>
&lt;p>Beware that for the day of month field, short cycles such as &lt;code>*/3&lt;/code> or &lt;code>H/3&lt;/code> will not work consistently near the end of most months, due to variable month lengths.&lt;/p>
&lt;p>For example, &lt;code>*/3&lt;/code> will run on the 1st, 4th, …31st days of a long month, then again the next day of the next month. Hashes are always chosen in the 1-28 range, so &lt;code>H/3&lt;/code> will produce a gap between runs of between 3 and 6 days at the end of a month. (Longer cycles will also have inconsistent lengths but the effect may be relatively less noticeable.)&lt;/p>
&lt;p>Empty lines and lines that start with &lt;code>#&lt;/code> will be ignored as comments.&lt;/p>
&lt;p>In addition, &lt;code>@yearly&lt;/code>, &lt;code>@annually&lt;/code>, &lt;code>@monthly&lt;/code>, &lt;code>@weekly&lt;/code>, &lt;code>@daily&lt;/code>, &lt;code>@midnight&lt;/code>, and &lt;code>@hourly&lt;/code> are supported as convenient aliases.&lt;/p>
&lt;p>These use the hash system for automatic balancing.&lt;/p>
&lt;p>For example, &lt;code>@hourly&lt;/code> is the same as &lt;code>H * * * *&lt;/code> and could mean at any time during the hour. &lt;code>@midnight&lt;/code> actually means some time between 12:00 AM and 2:59 AM.&lt;/p>
&lt;p>&lt;strong>Examples:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># Every fifteen minutes (perhaps at :07, :22, :37, :52):&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">H/15 * * * *&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Every ten minutes in the first half of every hour (three times, perhaps at :04, :14, :24):&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">H(0-29)/10 * * * *&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Once every two hours at 45 minutes past the hour starting at 9:45 AM and finishing at 3:45 PM every weekday:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="m">45&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9-16&lt;/span>&lt;span class="l">/2 * * 1-5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Once in every two hour slot between 8 AM and 4 PM every weekday (perhaps at 9:38 AM, 11:38 AM, 1:38 PM, 3:38 PM):&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">H H(8-15)/2 * * 1-5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Once a day on the 1st and 15th of every month except December:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">H H 1,15 1-11 *&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;h3 id="参考链接">参考链接&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Cron#CRON_expression">cron的维基百科&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://www.quartz-scheduler.org/">Quartz官方网站&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.gnu.org/software/mcron/manual/html_node/Crontab-file.html">Crontab file&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.baeldung.com/cron-expressions">A Guide To Cron Expressions | Baeldung&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/quartz-scheduler/quartz/blob/quartz-2.0.x/quartz/src/main/java/org/quartz/CronExpression.java">quartz/CronExpression.java at quartz-2.0.x · quartz-scheduler/quartz (github.com)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.netiq.com/documentation/cloud-manager-2-5/ncm-reference/data/bexyssf.html">Understanding Cron Syntax in the Job Scheduler - Cloud Manager Administrator Reference (netiq.com)&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2022/03/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/" term="cron表达式" label="cron表达式"/></entry><entry><title type="text">设计原则08：迪米特法则（LOD）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/law-of-demeter/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/law-of-demeter/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-22T22:03:12+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">什么是”高内聚、松耦合“？ ”高内聚、松耦合“是一个非常重要的设计思想，能够有效提高代……</summary><content type="html">&lt;h2 id="什么是高内聚松耦合">什么是”高内聚、松耦合“？&lt;/h2>
&lt;p>”高内聚、松耦合“是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。很多设计原则都是以实现代码的”高内聚、松耦合“为目的的，比如单一职责原则、基于接口而非实现编程等。&lt;/p>
&lt;p>”高内聚、松耦合“可以用来指导不同粒度代码的设计与开发，比如系统、模块、类甚至是函数，为了方便理解，接下来以类作为这个设计思想的应用对象来展开讲解，其他场景可以自行类比。&lt;/p>
&lt;p>在这个思想中，”高内聚“用来指导类本身的设计，”松耦合“用来指导类与类之间依赖关系的设计。不过二者并非完全独立，高内聚有助于松耦合，松耦合有需要高内聚的支持。&lt;/p>
&lt;h3 id="高内聚">高内聚&lt;/h3>
&lt;p>所谓高内聚，就是说相近的功能应该放到同一个类中，不相近的功能不要放到同一个类中。所以单一职责原则是实现代码高内聚非常有效的设计原则。&lt;/p>
&lt;h3 id="松耦合">松耦合&lt;/h3>
&lt;p>所谓松耦合，在代码中，类与类之间的依赖关系简单清晰。即使两个类有依赖关系，一个类的代码改动不会或者很少导致依赖类的代码改动。实际上，我们之前说过的依赖注入、接口隔离、基于接口而非实现编程，都是为了实现代码的松耦合。&lt;/p>
&lt;h3 id="内聚和耦合的关系">内聚和耦合的关系&lt;/h3>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/62275095f1f5817cad8a9ca129a6ec3c.jpg" alt="img" style="zoom: 33%;" />
&lt;p>为了便于理解，上面这张图中，左边部分的代码结构是“高内聚、松耦合”；右边部分正好相反，是“低内聚、紧耦合”。&lt;/p>
&lt;h2 id="迪米特法则">迪米特法则&lt;/h2>
&lt;p>迪米特法则的英文翻译是：Law of Demeter，但从名字来看是完全看不出来的，它还有另外一个名字，叫做最小知识原则，英文为：The Least Knowledge Principle。&lt;/p>
&lt;p>迪米特法则的英文定义为：&lt;/p>
&lt;blockquote>
&lt;p>Each unit should have only limited knowledge about other units: only units “closely” related to the current unit. Or: Each unit should only talk to its friends; Don’t talk to strangers.&lt;/p>
&lt;/blockquote>
&lt;p>我们把它直译成中文，就是下面这个样子：&lt;/p>
&lt;blockquote>
&lt;p>每个模块（unit）只应该了解那些与它关系密切的模块（units: only units “closely” related to the current unit）的有限知识（knowledge）。或者说，每个模块只和自己的朋友“说话”（talk），不和陌生人“说话”（talk）。&lt;/p>
&lt;/blockquote>
&lt;p>我们再来根据实战经验来润色一下：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;strong>不该有直接依赖关系的类之间，不要有依赖；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>有依赖关系的类之间，尽量只依赖必要的接口（也就是定义中的“有限知识”）。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>下面结合实战，我们分别来详细讲解下这两句话。&lt;/p>
&lt;h3 id="1不该有直接依赖关系的类之间不要有依赖">&lt;strong>1.不该有直接依赖关系的类之间，不要有依赖&lt;/strong>&lt;/h3>
&lt;p>现在有一个简化版的搜索引擎爬取网页的功能，代码中包含三个主要的类。其中，NetworkTransporter 类负责底层网络通信，根据请求获取数据；HtmlDownloader 类用来通过 URL 获取网页；Document 表示网页文档，后续的网页内容抽取、分词、索引都是以此为处理对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NetworkTransporter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 省略属性和其他方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HtmlRequest&lt;/span> &lt;span class="n">htmlRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HtmlDownloader&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">NetworkTransporter&lt;/span> &lt;span class="n">transporter&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//通过构造函数或IOC注入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Html&lt;/span> &lt;span class="nf">downloadHtml&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">rawHtml&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">transporter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HtmlRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Html&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rawHtml&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Document&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Html&lt;/span> &lt;span class="n">html&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Document&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HtmlDownloader&lt;/span> &lt;span class="n">downloader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HtmlDownloader&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">html&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">downloader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">downloadHtml&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码虽然能用，但是有很多的设计缺陷。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>NetworkTransporter作为底层网络通信类，我们希望它的功能尽可能通用而非只服务于Html，所以我们不应该直接依赖太具体的发送对象HtmlRequest&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NetworkTransporter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 省略属性和其他方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>HtmlDownloader类本身的设计没有问题，只需要按照NetworkTransporter的改动修改对应的入参即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HtmlDownloader&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">NetworkTransporter&lt;/span> &lt;span class="n">transporter&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//通过构造函数或IOC注入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// HtmlDownloader这里也要有相应的修改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Html&lt;/span> &lt;span class="nf">downloadHtml&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HtmlRequest&lt;/span> &lt;span class="n">htmlRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HtmlRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">rawHtml&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">transporter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">htmlRequest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAddress&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">htmlRequest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContent&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getBytes&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Html&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rawHtml&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Document类问题很多：第一，构造函数中的 downloader.downloadHtml() 逻辑复杂，耗时长，不应该放到构造函数中，会影响代码的可测试性。代码的可测试性我们后面会讲到，这里你先知道有这回事就可以了。第二，HtmlDownloader 对象在构造函数中通过 new 来创建，违反了基于接口而非实现编程的设计思想，也会影响到代码的可测试性。第三，从业务含义上来讲，Document 网页文档没必要依赖 HtmlDownloader 类，违背了迪米特法则。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Document&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Html&lt;/span> &lt;span class="n">html&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Document&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Html&lt;/span> &lt;span class="n">html&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">html&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">html&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 通过一个工厂方法来创建Document
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DocumentFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">HtmlDownloader&lt;/span> &lt;span class="n">downloader&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">DocumentFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HtmlDownloader&lt;/span> &lt;span class="n">downloader&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">downloader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">downloader&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Document&lt;/span> &lt;span class="nf">createDocument&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Html&lt;/span> &lt;span class="n">html&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">downloader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">downloadHtml&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Document&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">html&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="2有依赖关系的类之间尽量只依赖必要的接口">2.&lt;strong>有依赖关系的类之间，尽量只依赖必要的接口&lt;/strong>&lt;/h3>
&lt;p>下面这段代码非常简单，Serialization 类负责对象的序列化和反序列化。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Serialization&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">serialize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">serializedResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">serializedResult&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">deserialize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="n">deserializedResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">deserializedResult&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>假设在我们的项目中，有些类只用到了序列化操作，而另一些类只用到反序列化操作。那基于迪米特法则后半部分“有依赖关系的类之间，尽量只依赖必要的接口”，只用到序列化操作的那部分类不应该依赖反序列化接口。同理，只用到反序列化操作的那部分类不应该依赖序列化接口。&lt;/p>
&lt;p>根据这个思路，我们应该将 Serialization 类拆分为两个更小粒度的类，一个只负责序列化（Serializer 类），一个只负责反序列化（Deserializer 类）。拆分之后，使用序列化操作的类只需要依赖 Serializer 类，使用反序列化操作的类只需要依赖 Deserializer 类。&lt;/p>
&lt;p>不知道你有没有看出来，尽管拆分之后的代码更能满足迪米特法则，但却违背了高内聚的设计思想。如果我们既不想违背高内聚的设计思想，也不想违背迪米特法则，那我们该如何解决这个问题呢？实际上，通过引入两个接口就能轻松解决这个问题：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Serializable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="nf">serialize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Deserializable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="nf">deserialize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Serialization&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Serializable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Deserializable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">serialize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">serializedResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">serializedResult&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">deserialize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="n">deserializedResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">deserializedResult&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DemoClass_1&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Serializable&lt;/span> &lt;span class="n">serializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Demo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Serializable&lt;/span> &lt;span class="n">serializer&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serializer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">serializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DemoClass_2&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Deserializable&lt;/span> &lt;span class="n">deserializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Demo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Deserializable&lt;/span> &lt;span class="n">deserializer&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">deserializer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">deserializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际上，上面的的代码实现思路，也体现了“基于接口而非实现编程”的设计原则，结合迪米特法则，我们可以总结出一条新的设计原则，那就是“基于最小接口而非最大实现编程”。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">设计原则07：DRY原则和代码复用性</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/dry-code-reusability/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/dry-code-reusability/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-21T21:41:55+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">今天我们要研究的主题是DRY原则。 DRY原则，其英文原文是Don't Repeat Yoursel……</summary><content type="html">&lt;p>今天我们要研究的主题是DRY原则。&lt;/p>
&lt;p>DRY原则，其英文原文是&lt;code>Don't Repeat Yourself.&lt;/code>,在编程中可以理解为&lt;strong>不要写重复的代码。&lt;/strong>&lt;/p>
&lt;p>看似非常简单的一个原则，但其实有很多误区。重复的代码就一定违背DRY原则么？如何提高代码的复用性呢？&lt;/p>
&lt;h2 id="dry原则">DRY原则&lt;/h2>
&lt;p>我们从三种代码重复的实际具体情况来分析DRY原则的具体应用，这三种代码重复分别是实现逻辑重复、功能语义重复和代码执行重复。&lt;/p>
&lt;h3 id="实现逻辑重复">实现逻辑重复&lt;/h3>
&lt;p>假设现在有一个校验用户名和用户密码的功能，规则基本差不多，代码实现如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserAuthenticator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">authenticate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isValidUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...throw InvalidUsernameException...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isValidPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...throw InvalidPasswordException...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略其他代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isValidUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// check not null, not empty
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isBlank&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// check length: 4~64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// contains only lowcase characters
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAllLowerCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// contains only a~z,0~9,dot
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isValidPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// check not null, not empty
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isBlank&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// check length: 4~64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// contains only lowcase characters
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAllLowerCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// contains only a~z,0~9,dot
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的isValidUserName()函数和isValidPassword()函数中的代码都是一样的，重复的代码被敲了两次，看起来明显违反DRY原则，完全可以合并到一个方法中。&lt;/p>
&lt;p>事实上真的如此吗？&lt;/p>
&lt;p>答案是否定的，如果我们将其合到一起，明显违反了单一职责原则和接口隔离原则。假如将来某一天，密码的校验增加了新的逻辑，那么刚才的两个函数实现逻辑就会不相同。&lt;/p>
&lt;p>对于这种情况，我们可以将相同校验的部分封装成颗粒度更小的函数。&lt;/p>
&lt;h3 id="功能语义重复">功能语义重复&lt;/h3>
&lt;p>所谓的功能语义重复就是两段代码或者两个函数，虽然名称不同，实现逻辑不同，但是功能是相同的，比如上一节的校验IP地址是否合法的几个函数。&lt;/p>
&lt;p>这种功能语义函数是明显违反DRY原则的，在项目中对于同一个功能我们应该统一实现思路，否则会给其他人带来困扰，同事在阅读相关代码的时候会觉得写代码的人是不是有更高深的考量才会有这样的写法。&lt;/p>
&lt;h3 id="代码执行重复">代码执行重复&lt;/h3>
&lt;p>前两个例子一个是实现逻辑重复，一个是语义重复，我们再来看第三个例子。其中，UserService 中 login() 函数用来校验用户登录是否成功。如果失败，就返回异常；如果成功，就返回用户信息。&lt;/p>
&lt;p>具体代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">UserRepo&lt;/span> &lt;span class="n">userRepo&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//通过依赖注入或者IOC框架注入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">User&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">existed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">checkIfUserExisted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">existed&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... throw AuthenticationFailureException...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">User&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUserByEmail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserRepo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">checkIfUserExisted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">EmailValidation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">validate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... throw InvalidEmailException...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">PasswordValidation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">validate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... throw InvalidPasswordException...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...query db to check if email&amp;amp;password exists...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">User&lt;/span> &lt;span class="nf">getUserByEmail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">EmailValidation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">validate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... throw InvalidEmailException...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...query db to get user by email...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的代码既没有逻辑重复，也没有语义重复，但仍然违反了DRY原则，这是因为代码执行重复了。重复执行最明显的一个地方，就是在 login() 函数中，email 的校验逻辑被执行了两次。&lt;/p>
&lt;p>除此之外，代码中还有一处比较隐蔽的执行重复，不知道你发现了没有？实际上，login() 函数并不需要调用 checkIfUserExisted() 函数，只需要调用一次 getUserByEmail() 函数，从数据库中获取到用户的 email、password 等信息，然后跟用户输入的 email、password 信息做对比，依次判断是否登录成功。&lt;/p>
&lt;p>实际上，这样的优化是很有必要的。因为 checkIfUserExisted() 函数和 getUserByEmail() 函数都需要查询数据库，而数据库这类的 I/O 操作是比较耗时的。我们在写代码的时候，应当尽量减少这类 I/O 操作。&lt;/p>
&lt;h2 id="代码复用性code-reusability">代码复用性（Code Reusability）&lt;/h2>
&lt;h3 id="什么是代码的复用性">什么是代码的复用性？&lt;/h3>
&lt;p>我们先来区分三个概念，代码复用性（Code Reusability）、代码复用（Code Reuse）和DRY原则。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>代码复用是一种行为：开发新功能的时候尽量复用已经存在的代码；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可复用性是表示一段代码可以被复用的特性和能力：我们编写代码的时候，让代码尽量可复用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DRY原则是一条原则：不要写重复的代码。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="怎么提高代码复用性">怎么提高代码复用性？&lt;/h3>
&lt;ol>
&lt;li>减少代码耦合&lt;/li>
&lt;li>满足单一职责原则&lt;/li>
&lt;li>模块化（不仅仅指modules，单个类、函数都可以模块化，独立的模块就像积木，更易复用）&lt;/li>
&lt;li>业务与非业务逻辑分离（越是与业务无关的代码越容易复用）&lt;/li>
&lt;li>通用代码下沉&lt;/li>
&lt;li>继承、多态、抽象、封装&lt;/li>
&lt;li>应用模板模式等设计模式&lt;/li>
&lt;/ol>
&lt;p>实际上，除非有非常明确的复用需求，否则，为了暂时用不到的复用需求，花费太多的时间、精力，投入太多的开发成本，并不是一个值得推荐的做法。这也违反我们之前讲到的 YAGNI 原则。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">设计原则06：KISS原则和YAGNI原则</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/kiss-yagni/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/kiss-yagni/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-21T13:23:16+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">先看下面这些小问题。 怎么理解 KISS 原则中“简单”两个字？ 什么样的代码才算“简单”？ 怎样的……</summary><content type="html">&lt;p>先看下面这些小问题。&lt;/p>
&lt;ul>
&lt;li>怎么理解 KISS 原则中“简单”两个字？&lt;/li>
&lt;li>什么样的代码才算“简单”？&lt;/li>
&lt;li>怎样的代码才算“复杂”？&lt;/li>
&lt;li>如何才能写出“简单”的代码？&lt;/li>
&lt;li>YAGNI 原则跟 KISS 原则说的是一回事吗？&lt;/li>
&lt;/ul>
&lt;p>带着这些问题，我们进入今天的学习。&lt;/p>
&lt;h2 id="如何理解kiss原则">如何理解KISS原则？&lt;/h2>
&lt;p>KISS是个缩写这个我们都知道，那么它的原本英文是什么呢？网上有好多个版本，比如“&lt;code>Keep It Simple and Stupid.&lt;/code>”，“&lt;code>Keep It Short and Simple.&lt;/code>”，“&lt;code>Keep It Simple and Straigthforword.&lt;/code>”等等。不过，他们表达的意思都差不多——&lt;strong>尽量保持简单&lt;/strong>。&lt;/p>
&lt;p>代码的可读性和可维护性是衡量代码质量非常重要的两个标准，而KISS原则就是保持代码可读和可维护的重要手段。代码足够简单就意味着很容易读懂，即使有bug也很容易维护。&lt;/p>
&lt;p>那么，什么样的代码才能叫简单呢？&lt;/p>
&lt;p>先来看一个例子，现在需要实现一个功能：检查输入的字符串ipAddress是否是合法的IP地址？&lt;/p>
&lt;p>下面给出了三段代码实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ValidIpAddress&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第一种实现方式: 使用正则表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isValidIpAddressV1&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">ipAddress&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">CharSequenceUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isBlank&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ipAddress&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">regex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;^(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])\\.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)$&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ipAddress&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">matches&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">regex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第二种实现方式: 使用现成的工具类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isValidIpAddressV2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">ipAddress&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">CharSequenceUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isBlank&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ipAddress&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">ipUnits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CharSequenceUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">splitToArray&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ipAddress&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="sc">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ipUnits&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">ipUnitIntValue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parseInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ipUnits&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">NumberFormatException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第三种实现方式: 不使用任何工具类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isValidIpAddressV3&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">ipAddress&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">ipChars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ipAddress&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ipChars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isFirstUnit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">unitsCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">ipChars&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isFirstUnit&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isFirstUnit&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">isFirstUnit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">unitsCount&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ipUnitIntValue&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">unitsCount&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看完了上面这三种，你觉得哪一种最符合KISS原则呢？&lt;/p>
&lt;p>答案是第二种，第一种方法虽然代码行数最少，实际上很复杂，因为使用了正则表达式；而第三种方法虽然没有用任何工具函数，性能也是最高的，但是由于实现方式过于复杂很容易出Bug。从性能方面来说，其实是一种过度优化。&lt;/p>
&lt;p>那么，如何才能写出简单的代码呢？有下面几个原则稍微总结一下：&lt;/p>
&lt;ul>
&lt;li>不要使用其他人可能看不懂的技术来实现代码&lt;/li>
&lt;li>不要重复造轮子，使用已有的工具类库减少bug&lt;/li>
&lt;li>不要过度优化，不要使用一些奇技淫巧（位运算、底层函数）&lt;/li>
&lt;/ul>
&lt;p>我们在做开发的时候，一定不要过度设计，不要觉得简单的东西就没有技术含量。实际上，越是能用简单的方法解决复杂的问题，越能体现一个人的能力。&lt;/p>
&lt;h2 id="yagni原则">YAGNI原则&lt;/h2>
&lt;p>YAGNI原则的英文全称是&lt;code>You Ain't Gonna Need It.&lt;/code>，直译过来就是：**你不会需要它。**它的意思是在软件开发中，不要去设计当前用不到的功能，不要去编写当前用不到的代码。&lt;/p>
&lt;p>比如，我们的系统暂时只用 Redis 存储配置信息，以后可能会用到 ZooKeeper。根据 YAGNI 原则，在未用到 ZooKeeper 之前，我们没必要提前编写这部分代码。当然，这并不是说我们就不需要考虑代码的扩展性。我们还是要预留好扩展点，等到需要的时候，再去实现 ZooKeeper 存储配置信息这部分代码。&lt;/p>
&lt;p>再比如，我们不要在项目中提前引入不需要依赖的开发包。对于 Java 程序员来说，我们经常使用 Maven 或者 Gradle 来管理依赖的类库（library）。我发现，有些同事为了避免开发中 library 包缺失而频繁地修改 Maven 或者 Gradle 配置文件，提前往项目里引入大量常用的 library 包。实际上，这样的做法也是违背 YAGNI 原则的。&lt;/p>
&lt;p>从刚刚的分析我们可以看出，YAGNI 原则跟 KISS 原则并非一回事儿。KISS 原则讲的是“如何做”的问题（尽量保持简单），而 YAGNI 原则说的是“要不要做”的问题（当前不需要的就不要做）。&lt;/p>
&lt;h2 id="习题">习题&lt;/h2>
&lt;blockquote>
&lt;p>你怎么看待在开发中重复造轮子这件事情？什么时候要重复造轮子？什么时候应该使用现成的工具类库、开源框架？&lt;/p>
&lt;/blockquote>
&lt;p>我觉得在开发中重复造轮子不一定就一定是不好的，开源类库中的很多方法其实并用不到，为了通用性可能会舍弃掉一部分性能，而相反有些公司内部才用得到的方法在开源类库中是没有的。&lt;/p>
&lt;p>另外，有时候我们只需要其中很少一部分代码的时候，重复造轮子都没有问题，但是一定要做好测试，在造轮子的时候可以参考成熟的开源类库，从中学习也是不错的选择。&lt;/p>
&lt;p>什么时候该使用开源框架呢？我觉得至少团队中有人很熟悉这个开源类库或者框架，能够把其中的技术实现分享给团队，这样才不会在出现相关未知问题的时候束手无策。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">我常用的一些浏览器扩展</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/browser-extensions/"/><id>https://kiwi4814.github.io/posts/2022/browser-extensions/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-19T22:14:04+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">今天推荐一些我个人常用的一些浏览器扩展。 我使用的是Win10自带的Microsoft……</summary><content type="html">&lt;p>今天推荐一些我个人常用的一些浏览器扩展。&lt;/p>
&lt;p>我使用的是Win10自带的&lt;strong>Microsoft Edge浏览器&lt;/strong>，下载的扩展主要来源于这两个地方：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home">Microsoft Edge 加载项&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/category/extensions">Chrome 网上应用店 &lt;/a>&lt;/li>
&lt;/ul>
&lt;p>此外，在浏览器扩展页面（&lt;a href="chrome://extensions/">chrome&lt;/a>，&lt;a href="edge://extensions/">Edge&lt;/a>）打开开发人员模式，可以安装一些离线下载的或者只在chrome商店内上架的扩展，将解压后的文件夹拖到浏览器即可。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220320143356407.png" referrerpolicy='no-referrer' alt="image-20220320143356407" referrerpolicy='no-referrer' style="zoom:33%;" />
&lt;p>此外，关于浏览器扩展网上有很多推荐的帖子，这里仅列出我常用的一些，顺序也比较随心所欲，如果你想了解更多奇妙的浏览器扩展，可以在&lt;a href="https://zhaoolee.gitbooks.io/chrome/content/">Chrome插件英雄榜&lt;/a>去查找更多的推荐，也可以自行按照关键字搜索。&lt;/p>
&lt;h3 id="油猴脚本">油猴脚本&lt;/h3>
&lt;p>要说扩展类，最有名的应该是油猴了，这款最早出身于火狐浏览器的浏览器脚本扩展，可以说是浏览器里最强大的一个扩展了，其本质就是提供了一个脚本管理器（脚本就是一段代码，它们能够优化您的网页浏览体验），让浏览器在满足特定的条件下去执行什么样的代码。这么说可能有点抽象，列举几个我常用的脚本，你大概就能知道是干嘛的了。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在豆瓣找电影、书等时，详情页面自动列出相关资源，可以直接跳转去下载、观看&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浏览网页时字体自动简繁转换&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浏览器下载百度云文件解除大小限制&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各大视频在线站去片头广告&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常用网站（知乎贴吧微博）排版和使用优化&lt;/p>
&lt;/li>
&lt;li>
&lt;p>...&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220319224402775.png" alt="image-20220319224402775" referrerpolicy='no-referrer' style="zoom: 25%;" /> &lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220320143603405.png" alt="image-20220320143603405" referrerpolicy='no-referrer' style="zoom: 40%;" />&lt;/p>
&lt;p>&lt;strong>使用方法&lt;/strong>：先去安装一款名字&lt;font color="red">暴力猴&lt;/font>(&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E6%9A%B4%E5%8A%9B%E7%8C%B4/eeagobfjdenkkddmbclomhiblgggliao?hl=zh-CN">edge商店安装&lt;/a>)的扩展，这个扩展相当于一个容器，有了这个容器之后就可以往这里面添加各种功能了，脚本推荐在&lt;a href="https://greasyfork.org/zh-CN">这个网站&lt;/a>去查找和使用，如下图所示：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220319224827220.png" alt="image-20220319224827220" referrerpolicy='no-referrer' style="zoom: 25%;" />
&lt;p>当然了，脚本都是个人开发者上传的，其中质量好坏、是否好用是需要你自己去甄别的，而且官方会反制大部分“自动化”的脚本，不要过于依赖，尽量选择安装人数多的脚本。&lt;/p>
&lt;h3 id="去广告类">去广告类&lt;/h3>
&lt;p>很多网站为了生存下去，会在边边角角加上很多“很闪”的广告，非常影响浏览体验，所以我们一般会安装一款去广告的插件，这类型的插件有很多，Adblock、AdBlockPlus、AdGuard等等，其中AdGuard配合同名软件使用效果最佳，否则的话推荐使用ABP（&lt;font color="red">AdBlockPlus&lt;/font>&lt;a href="https://microsoftedge.microsoft.com/addons/detail/adblock-plus-%E5%85%8D%E8%B4%B9%E7%9A%84%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/gmgoamodcdcjnbaobigkjelfplakmdhh?hl=zh-CN">Edge商店安装&lt;/a>）即可，除了默认的规则之外，还能自己制定一些规则，比如遇到网站没有屏蔽完全的广告，随手加个规则就可以了。&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220319230154173.png" alt="image-20220319230154173" referrerpolicy='no-referrer' style="zoom: 25%;" />
&lt;h3 id="长截图">长截图&lt;/h3>
&lt;p>有时候我们需要对一些网页进行长截图，试过很多插件，都不太如人意，后来发现Edge浏览器自带功能就完全满足需求了。&lt;/p>
&lt;p>在网页中右键选择网页捕获或者Ctrl+Shift+S，然后选择捕获整页即可。&lt;/p>
&lt;h3 id="翻译类">翻译类&lt;/h3>
&lt;p>Edge浏览器可以一键翻译大部分的网页，效果其实还好，但是翻译软件翻译出来的总归错误点太多，只能看个大概，所以我一般会使用&lt;font color="red">沙拉查词&lt;/font>(&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/idghocbbahafpfhjnfhpbfbmpegphmmp?hl=zh-CN">Edge商店安装&lt;/a>)来进行&lt;strong>全文翻译和划词翻译&lt;/strong>，相比于自带的翻译，支持划词翻译、自定义翻译源（具体可参考提供的教程申请API）、网页一键翻译成双语（非常好用）以及生词典等等。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220320134821344.png" alt="image-20220320134821344" referrerpolicy='no-referrer' style="zoom: 50%;" />
&lt;h3 id="剪藏类">剪藏类&lt;/h3>
&lt;p>所谓的剪藏类，适合喜欢用电子笔记的朋友，当你浏览网页看到一篇很好的文章，想要收藏到自己的电子笔记时，如果手动复制的话会带来很多问题，格式、排版、图片等等需要花费很多精力，基于此很多电子笔记软件会额外提供剪藏插件，方便一键将网页保存到笔记中。比如Evernote的&lt;em>Evernote Web Clipper&lt;/em>，Notion的Notion Web Clipper等等。&lt;/p>
&lt;p>当然了，现在电子笔记软件越来越多，如果你在同时用2到3个，那么这种方式也没有那么简单了，我目前在用的是&lt;font color="red">简悦 - SimpRead&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E7%AE%80%E6%82%A6-simpread/clgdhlhfiocphghdkdbgdlmfaafccfmc?hl=zh-CN">Edge商店安装&lt;/a>），算是这类软件的“集大成者”了，可以切换阅读模式、笔记标注、并且支持剪藏到市面上大部分笔记软件中。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220320135003511.png" alt="image-20220320135003511" referrerpolicy='no-referrer' style="zoom: 33%;" />
&lt;h3 id="下载类">下载类&lt;/h3>
&lt;p>浏览器自带的下载其实并不是很好用，对于Windows系统，我一般将其托管给IDM（需要安装&lt;font color="red">IDM Integration Module&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/idm-integration-module/llbjbkhnmlidjebalopleeepgdfgcpec?hl=zh-CN">Edge商店安装&lt;/a>）这个扩展），Mac下我将其托管为Aria2（使用的是&lt;font color="red">Aria2 for Chrome&lt;/font>（&lt;a href="https://chrome.google.com/webstore/detail/aria2-for-chrome/mpkodccbngfoacfalldjimigbofkhgjn">Chrome商店安装&lt;/a>）这个扩展作为客户端，服务端需要自行安装下）。&lt;/p>
&lt;p>如果需要使用浏览器自带的下载（比如城通网盘），推荐开启浏览器的多线程下载（&lt;a href="chrome://flags/#enable-parallel-downloading">chrome浏览器&lt;/a>，&lt;a href="edge://flags/#enable-parallel-downloading">Edge浏览器&lt;/a>，将&lt;code>parallel-downloading&lt;/code>的选项改为enabled即可），如果觉得默认的下载界面不方面管理的话，可以安装&lt;font color="red">Chrono下载管理器&lt;/font>（&lt;a href="https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn?hl=zh-CN">Chrome商店安装&lt;/a>）这个扩展。&lt;/p>
&lt;h3 id="购物相关">购物相关&lt;/h3>
&lt;p>使用电脑浏览商品（淘宝、京东、苏宁等等）时，自动在商品详情页面增加比价、价格曲线等按钮，鼠标悬浮即可看到。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220320135159497.png" alt="image-20220320135159497" referrerpolicy='no-referrer' style="zoom: 33%;" />
&lt;p>这类型的比价扩展也很多，截图所示的是&lt;font color="red">购物党比价助手&lt;/font>（&lt;a href="https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah?hl=zh-CN">Chrome商店安装&lt;/a>）。&lt;/p>
&lt;p>另外，如果你使用京东比较多，可以安装&lt;font color="red">京价保&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E4%BA%AC%E4%BB%B7%E4%BF%9D-%E4%BA%AC%E4%B8%9C%E4%BB%B7%E4%BF%9D%E5%8A%A9%E6%89%8B/ljdjkkjiognkghfjndoddoplekppngge?hl=zh-CN">Edge商店安装&lt;/a>）这个插件，登陆账号后会帮你自动签到领京豆、自动抢优惠券，当然其主要的作用是申请价保，我们知道京东购买的商品如果30天内降价了是可以申请退款这个差价部分的，这个扩展会帮你自动检测价格并提交价格保护。当然了，这个扩展由于需要你登录京东账号，安全性请自行判断。&lt;/p>
&lt;p>当然了，不止是普通的购物，游戏界的购物比价助手 —— &lt;font color="red">Augmented Steam&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/augmented-steam/dnpjkgmekpilchdgolfifobohlohlioc?hl=zh-CN">Edge商店安装&lt;/a>），可以在你访问steam游戏商店的时候也达到上面展示的效果。&lt;/p>
&lt;h3 id="扩展管理">扩展管理&lt;/h3>
&lt;p>浏览器扩展在浏览器运行就好比软件在Windows系统中运行，是需要占内存的，所以当你安装了很多浏览器扩展后，需要一个管理器来控制这些扩展，因为很多扩展在特定情况下才有用，只需要在想用的时候开启即可，这里推荐&lt;font color="red">Extension Manager&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E6%89%A9%E5%B1%95%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88extension-manager%EF%BC%89/bhahgfgngfghgjhnpplmemebhenieijb?hl=zh-CN">Edge商店安装&lt;/a>）来进行扩展管理，支持扩展搜索、分组、一键开关，还可以制定扩展开启的规则，比如指定只有纽约客网站才开启bypass-paywalls插件等等。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220320151813228.png" alt="image-20220320151813228" referrerpolicy='no-referrer' style="zoom: 50%;" />
&lt;h3 id="标签页管理">标签页管理&lt;/h3>
&lt;p>虽然浏览器早就增加了标签页分组功能，但实际上使用的人并不多，虽然可以有效减轻混乱的情况，但是需要还是需要手动去维护的，而且我们知道Chrome浏览器号称内存杀手，尤其是我们找资料的时候，一次性打开几十个网页都是家常便饭，导致电脑非常卡顿，这种情况下，我一般使用&lt;font color="red">OneTab&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/onetab/hoimpamkkoehapgenciaoajfkfkpgfop?hl=zh-CN">Edge商店安装&lt;/a>）来一键缓存暂时用不到的网页，有点类似“Read Later”。&lt;/p>
&lt;p>另外，如果你已经习惯了标签页分组功能，可以使用&lt;font color="red">标签分组扩展&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E6%A0%87%E7%AD%BE%E5%88%86%E7%BB%84%E6%89%A9%E5%B1%95/jgcmbjdhakghmngjkdpejdcchbigdmgf?hl=zh-CN">Edge商店安装&lt;/a>），能给你带来更好的体验。&lt;/p>
&lt;h3 id="新标签页">新标签页&lt;/h3>
&lt;p>用来替代新标签页的插件，默认的新标签页实在是太丑了。如果你是互联网从业者，可以使用&lt;font color="red">稀土掘金&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E7%A8%80%E5%9C%9F%E6%8E%98%E9%87%91/iblloeofmdhfkbkpjkkombjngddeocjk?hl=zh-CN">Edge商店安装&lt;/a>）来替代默认的新标签页，否则可以考虑&lt;font color="red">iTab新标签页&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/itab%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5/inedkoakiaeepjoblbiiipedngonadhn?hl=zh-CN">Edge商店安装&lt;/a>）。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/Snipaste_2022-03-20_14-09-21.jpg" alt="Snipaste_2022-03-20_14-09-21" referrerpolicy='no-referrer' style="zoom: 25%;" />
&lt;p>此外，你可以将一些咨询整合类的网站设置为新标签页，这样就不会错过热点事件了，这里推荐两个：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.anyknew.com/#/">AnyKnew&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tophub.today/c/news">今日热榜 &lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="科研相关">科研相关&lt;/h3>
&lt;p>&lt;font color="red">Scholarscope&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/scholarscope/hlfcnjdnjmfimlffgdclgpomhppldgbe">Edge商店安装&lt;/a>）：自动加载PubMed搜索结果中期刊的信息，显示它们的影响力以及所在领域的排名。&lt;/p>
&lt;p>&lt;font color="red">EasyPubMed&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/easypubmed/daibhooimgnmhjagkkjamadijfambhid?hl=zh-CN">Edge商店安装&lt;/a>）：专为新版PubMed设计的工具条——看摘要、找全文、收藏文献等等&lt;/p>
&lt;p>&lt;font color="red">easyScholar&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/easyscholar/bpepicgagmdchlkjjeeiekpoafehpagm?hl=zh-CN">Edge商店安装&lt;/a>）：支持在各种论文网站显示会议、期刊等级。&lt;/p>
&lt;h3 id="bypass-paywalls">bypass-paywalls&lt;/h3>
&lt;p>跳过指定网站的付费墙，比如经济学人、纽约客等等（还可以自定义网站，理论上同样原理的付费墙都可以解锁）。&lt;/p>
&lt;p>下载地址：&lt;a href="https://github.com/iamadamdev/bypass-paywalls-chrome">bypass-paywalls-chrome&lt;/a>&lt;/p>
&lt;p>这款插件需要手动安装，打开浏览器的扩展页面并打开开发者模式，然后将解压后的扩展文件夹拖到浏览器中即可安装&lt;/p>
&lt;h3 id="微信读书助手">微信读书助手&lt;/h3>
&lt;p>&lt;font color="red">微信读书助手&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E8%AF%BB%E4%B9%A6%E5%8A%A9%E6%89%8B/hgnfmgflgppmiadfcfaecmogablfekof?hl=zh-CN">Edge商店安装&lt;/a>），浏览公众号、听书、一键组队、导出备份笔记。&lt;/p>
&lt;h3 id="影视类">影视类&lt;/h3>
&lt;ol>
&lt;li>&lt;font color="red">伽马影迷插件&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E4%BC%BD%E9%A9%AC%E5%BD%B1%E8%BF%B7%E6%8F%92%E4%BB%B6-%E5%BD%B1%E8%BF%B7%E5%92%8C%E5%BD%B1%E8%A7%86%E8%87%AA%E5%AA%92%E4%BD%93%E5%BF%85%E5%A4%87/cmnchflmcededjokdbjafjcpbhpodmmo?hl=zh-CN">Edge商店安装&lt;/a>）：在B站、豆瓣、IMDb、烂番茄、MetaCritic 网站上聚合显示电影评分、解说、片源等信息。该扩展有收费成分，如果用豆瓣比较多的话，使用体验不如油猴脚本中的豆瓣资源大师。&lt;/li>
&lt;li>&lt;font color="red">哔哩哔哩助手&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%8A%A9%E6%89%8B%EF%BC%9Abilibilicom-%E7%BB%BC%E5%90%88%E8%BE%85%E5%8A%A9%E6%89%A9/fcfebhekhbkhjjimonjmbgmkbclheaoh?hl=zh-CN">Edge商店安装&lt;/a>）：哔哩哔哩弹幕网辅助扩展，拥有视频区和直播区的人性化功能，以前很好用，被官方喝茶后只剩下一些我不怎么关注的功能了。&lt;/li>
&lt;/ol>
&lt;h3 id="rss">RSS&lt;/h3>
&lt;p>推荐两个，&lt;font color="red">feedbro&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/feedbro/pdfbckdfhgaohcfdkcgpggcifmalimfd?hl=zh-CN">Edge商店安装&lt;/a>）和&lt;font color="red">RSSHub&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/rsshub-radar/gangkeiaobmjcjokiofpkfpcobpbmnln?hl=zh-CN">Edge商店安装&lt;/a>），前者可以帮你查找和管理RSS订阅源，而后者可以帮你在任何网站上生成订阅源。&lt;/p>
&lt;h3 id="clear-cache">Clear Cache&lt;/h3>
&lt;p>Clear Cache（&lt;a href="https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?hl=zh_cn">Chrome商店安装&lt;/a>），一键清理浏览器缓存，可以设置清理最近多长时间、清理哪些内容，相比于浏览器自带的清理缓存要方便和快速很多。&lt;/p>
&lt;h3 id="simple-allow-copy">Simple Allow Copy&lt;/h3>
&lt;p>Simple Allow Copy（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/simple-allow-copy/kkemgiffjdndikokhpoecoloebgeibde?hl=zh-CN">Edge商店安装&lt;/a>）允许你在任何网页上复制，我们知道有些网站是不允许复制的，尤其是一些在线考试，这个插件可以帮助你去除这个限制。&lt;/p>
&lt;h3 id="floccus-bookmarks-sync">floccus bookmarks sync&lt;/h3>
&lt;p>如果你使用多个浏览器（多种类型），而且都支持floccus bookmarks sync（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/floccus-bookmarks-sync/gjkddcofhiifldbllobcamllmanombji?hl=zh-CN">Edge商店安装&lt;/a>）的话，这个插件可以在不借助账号同步的情况下帮你同步各个浏览器的收藏夹。&lt;/p>
&lt;h3 id="ie兼容">IE兼容&lt;/h3>
&lt;p>IE已经快要退出历史舞台了，但是由于国内很多系统（比如很多银行系统）是不支持非IE以外的浏览器的，如果你使用Edge浏览器，可以安装&lt;font color="red">IE Tab&lt;/font>（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/ie-tab/npjkkakdacjaihjaoeliacmecofghagh?hl=zh-CN">Edge商店安装&lt;/a>）这个扩展，这样就无需切换浏览器也能兼容IE了。&lt;/p>
&lt;h3 id="pt-plugin-plus">PT Plugin Plus&lt;/h3>
&lt;p>玩PT必装的插件。（&lt;a href="https://microsoftedge.microsoft.com/addons/detail/pt-plugin-plus/ekhingnlcjebipkdcgkkheigmljefepn?hl=zh-CN">Edge商店安装&lt;/a>）&lt;/p>
&lt;h3 id="程序员相关">程序员相关&lt;/h3>
&lt;ul>
&lt;li>&lt;font color="red">Octotree&lt;/font>：在github访问页面展示目录&lt;/li>
&lt;li>&lt;font color="red">稀土掘金&lt;/font>：新标签页插件，展示程序员常浏览的一些网站信息&lt;/li>
&lt;li>&lt;font color="red">Copy to Gist&lt;/font>：划词或者选中段落后保存到github gist中&lt;/li>
&lt;li>&lt;font color="red">EditThisCookie&lt;/font>：对cookie进行编辑和保存&lt;/li>
&lt;li>&lt;font color="red">FeHelper(前端助手)&lt;/font>：百度开发的前端助手插件&lt;/li>
&lt;li>&lt;font color="red">JSON Viewer&lt;/font>：浏览器访问JSON数据时自动进行格式化&lt;/li>
&lt;li>&lt;font color="red">Wappalyzer-Technology profiler&lt;/font>：分析网站使用的技术栈&lt;/li>
&lt;/ul>
&lt;h3 id="与软件绑定的插件">与软件绑定的插件&lt;/h3>
&lt;ul>
&lt;li>AdGuard浏览器助手&lt;/li>
&lt;li>Eagle for Edge&lt;/li>
&lt;li>IDM Integration Module&lt;/li>
&lt;li>NeatDownloadManager Extension&lt;/li>
&lt;li>Notion Web Clipper&lt;/li>
&lt;li>迅雷下载支持&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/tags/2023/02/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/><category scheme="https://kiwi4814.github.io/tags/2022/03/%E6%89%A9%E5%B1%95/" term="扩展" label="扩展"/></entry><entry><title type="text">设计原则05：控制反转原则（DIP）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/inversion-of-control/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/inversion-of-control/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-19T17:46:18+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">前面的四节课分别讲了SOLID原则中的单一职责、开闭、里式替换、接口隔离原则，今天要……</summary><content type="html">&lt;p>前面的四节课分别讲了SOLID原则中的单一职责、开闭、里式替换、接口隔离原则，今天要讲的是依赖反转原则（DIP）。&lt;/p>
&lt;p>先来看下这几个问题。&lt;/p>
&lt;ul>
&lt;li>“依赖反转”这个概念指的是“谁跟谁”的“什么依赖”被反转了？“反转”两个字该如何理解？&lt;/li>
&lt;li>我们还经常听到另外两个概念：“控制反转”和“依赖注入”。这两个概念跟“依赖反转”有什么区别和联系呢？它们说的是同一个事情吗？&lt;/li>
&lt;li>那 Spring 框架中的 IOC 跟这些概念又有什么关系呢？&lt;/li>
&lt;/ul>
&lt;p>带着这些问题，我们进入今天的学习。&lt;/p>
&lt;h2 id="控制反转iocinversion-of-control">控制反转（IOC，Inversion Of Control）&lt;/h2>
&lt;p>我们先来看一段代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">doTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//这部分逻辑可以放到框架中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">doTest&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test succeed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test failed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面的代码中，所有的流程都由程序员来控制。如果我们抽象出这样一个框架，我们再来看如何利用框架来实现同样的功能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestCase&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">doTest&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test succeed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test failed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">doTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JunitApplication&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TestCase&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">testCases&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TestCase&lt;/span> &lt;span class="n">testCase&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">testCases&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">testCase&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">TestCase&lt;/span> &lt;span class="k">case&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">testCases&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>利用这个框架，我们只需要实现TestCase类中的doTest()抽象函数就可以实现之前的功能了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserServiceTest&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">TestCase&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">doTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 注册操作还可以通过配置的方式来实现，不需要程序员显示调用register()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">JunitApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">UserServiceTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子，就是典型的通过框架来实现“控制反转”的例子。框架提供了一个可扩展的代码骨架，用来组装对象、管理整个执行流程。程序员利用框架进行开发的时候，只需要在预留的扩展点上，添加跟自己业务相关的代码，就可以利用框架来驱动整个程序流程的执行。&lt;/p>
&lt;p>这里的&lt;strong>控制&lt;/strong>指的是对程序执行流程的控制，而&lt;strong>反转&lt;/strong>指的是在没有使用框架之前，程序员自己控制整个流程的执行，在使用框架之后，整个程序的执行流程可以通过框架来控制了，流程的控制权由程序员“反转”到了框架。&lt;/p>
&lt;p>实际上，实现控制反转的方法有很多，除了刚才例子中所示的类似于模板设计模式的方法之外，还有马上要讲到的依赖注入等方法，所以，控制反转并不是一种具体的实现技巧，而是一个比较笼统的设计思想，一般用来指导框架层面的设计。&lt;/p>
&lt;h2 id="依赖注入didependency-injection">依赖注入（DI，Dependency Injection）&lt;/h2>
&lt;p>**依赖注入与控制反转恰恰相反，它是一种具体的编码技巧。**概括起来就是，不通过new()的方式在类的内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传入（或注入）给类使用。&lt;/p>
&lt;p>举个例子。我们用Notification类负责消息推送，依赖MessageSender类实现推送商品促销、验证码等消息给用户。我们分别用依赖注入和非依赖注入来实现一下。&lt;/p>
&lt;p>&lt;strong>依赖注入的实现方式如下：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 依赖注入的实现方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Notification&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通过构造函数将messageSender传递进来
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略校验逻辑等...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//使用Notification
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MessageSender&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">messageSender&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>非依赖注入的实现方式：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 非依赖注入实现方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Notification&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Notification&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MessageSender&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//此处有点像hardcode
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略校验逻辑等...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用Notification
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过依赖注入的方式将依赖的类对象传递进来，这样提高的代码的扩展性，我们可以灵活替换以来的类。当然，上面代码还有继续优化的空间，我们可以把MessageSender定义成接口，基于接口而非实现编程。改造后的代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Notification&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 短信发送类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SmsSender&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 站内信发送类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">InboxSender&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//使用Notification
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SmsSender&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">messageSender&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="依赖注入框架di-framework">依赖注入框架（DI Framework）&lt;/h2>
&lt;p>在上一节的例子中，当我们去发送消息时，仍然需要程序员来自己实现类的创建和组装，仅仅使用依赖注入实现了Notification类，事实上创建对象、组装（或注入）对象的工作仅仅是被移动到了更上层代码而已。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Demo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">sender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SmsSender&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//创建对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sender&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//依赖注入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;13918942177&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;短信验证码：2346&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在实际的软件开发中，一些项目可能会涉及几十、上百、甚至几百个类，类对象的创建和依赖注入会变得非常复杂。如果这部分工作都是靠程序员自己写代码来完成，容易出错且开发成本也比较高。而对象创建和依赖注入的工作，本身跟具体的业务无关，我们完全可以抽象成框架来自动完成。&lt;/p>
&lt;p>你可能已经猜到，这个框架就是“依赖注入框架”。我们只需要通过依赖注入框架提供的扩展点，简单配置一下所有需要创建的类对象、类与类之间的依赖关系，就可以实现由框架来自动创建对象、管理对象的生命周期、依赖注入等原本需要程序员来做的事情。实际上，现成的依赖注入框架有很多，比如 Google Guice、Java Spring、Pico Container、Butterfly Container 等。&lt;/p>
&lt;h2 id="依赖反转原则dip">依赖反转原则（DIP）&lt;/h2>
&lt;p>前面讲了控制反转、依赖注入、依赖注入框架，接下来我们正式讲讲今天的主角——依赖反转原则。&lt;/p>
&lt;p>依赖反转原则的英文翻译是Dependency Inversion Principle，缩写为DIP。其原本的英文如下：&lt;/p>
&lt;blockquote>
&lt;p>High-level modules shouldn’t depend on low-level modules. Both modules should depend on abstractions. In addition, abstractions shouldn’t depend on details. Details depend on abstractions.&lt;/p>
&lt;/blockquote>
&lt;p>大体翻译如下：&lt;/p>
&lt;p>&lt;strong>高层模块（high-level modules）不要依赖底层模块（low-level）。高层模块和底层模块应该通过抽象（abstractions）来互相依赖。除此以外，抽象（abstractions）不要依赖具体实现细节（details），具体实现细节（details）依赖抽象（abstractions）。&lt;/strong>&lt;/p>
&lt;p>这里所说的高层模块和底层模块的划分，简单来说，在调用链上，调用者属于高层，被调用者属于底层。实际上大部分开发过程中都是这样的，这条原则主要还是用来指导框架层面的设计，跟前面讲到的控制反转类似。&lt;/p>
&lt;p>我们拿Tomcat这个Servlet容器作为例子来解释一下。&lt;/p>
&lt;p>&lt;strong>Tomcat 是运行 Java Web 应用程序的容器。我们编写的 Web 应用程序代码只需要部署在 Tomcat 容器下，便可以被 Tomcat 容器调用执行。按照之前的划分原则，Tomcat 就是高层模块，我们编写的 Web 应用程序代码就是低层模块。Tomcat 和应用程序代码之间并没有直接的依赖关系，两者都依赖同一个“抽象”，也就是 Servlet 规范。Servlet 规范不依赖具体的 Tomcat 容器和应用程序的实现细节，而 Tomcat 容器和应用程序依赖 Servlet 规范。&lt;/strong>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">设计原则04：接口隔离原则（ISP）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/interface-segregation-principle/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/interface-segregation-principle/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-18T22:02:37+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">如何理解”接口隔离原则“？ 接口隔离原则的英文翻译是”Interface Segregation Princi……</summary><content type="html">&lt;h2 id="如何理解接口隔离原则">如何理解”接口隔离原则“？&lt;/h2>
&lt;p>接口隔离原则的英文翻译是”Interface Segregation Principle“，Robert Martin 在 SOLID 原则中是这样定义它的：“&lt;strong>Clients should not be forced to depend upon interfaces that they do not use。&lt;/strong>”直译成中文的话就是：**客户端不应该被强迫依赖它不需要的接口。**其中的“客户端”，可以理解为接口的调用者或者使用者。&lt;/p>
&lt;p>在这条原则中，接口一般可以理解为：一组API接口集合、单个API接口或函数、OOP中的接口概念。&lt;/p>
&lt;p>下面分别针对这三种情况来详细讲解这个原则。&lt;/p>
&lt;h3 id="接口是一组api接口或集合">接口是一组API接口或集合&lt;/h3>
&lt;p>假如现在有一个微服务用户系统，提供了一组和用户相关的API给其他系统使用，比如提供了一个UserService接口，其中包含了注册、登录、获取用户信息等功能。现在后台想要增加一个删除用户的功能，一般来说，我们只需要在这个UserService增加一个函数，提供删除的接口就行了。&lt;/p>
&lt;p>这个方法可以解决问题，但是也会带来一些隐患。&lt;/p>
&lt;p>我们知道删除用户是一个非常慎重的操作，如果这样设计，在没有鉴权系统的情况下，这个接口有可能会被误用。所有有权限使用UserService的系统都有可以调用这个删除接口，这样不加限制的被使用就有可能导致误删用户。&lt;/p>
&lt;p>我们参照接口隔离原则，调用者不应该强迫依赖它不需要的接口，将删除接口单独放在另外的一个接口RestrictedUserService中，然后将RestrictedUserService单独给后台系统使用，具体的代码实现如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">UserService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UserInfo&lt;/span> &lt;span class="nf">getUserInfoById&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UserInfo&lt;/span> &lt;span class="nf">getUserInfoByCellphone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">RestrictedUserService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">deleteUserByCellphone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">deleteUserById&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserServiceImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">UserService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RestrictedUserService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略实现代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以，当接口理解成一组集合接口，&lt;strong>在设计微服务或者类库接口时如果部分接口只被部分调用者使用，那我们需要将这部分接口隔离出来，单独给对应的调用者使用，而不是强迫其他调用者也依赖这部分不会用到的接口。&lt;/strong>&lt;/p>
&lt;h3 id="接口是单个api或者函数">接口是单个API或者函数&lt;/h3>
&lt;p>如果接口是个函数，那么接口隔离原则就可以理解为：&lt;strong>函数的设计要功能单一，不要将多个不同的功能逻辑在一个函数中实现。&lt;/strong>&lt;/p>
&lt;p>这时候，接口隔离原则其实比较类似单一职责原则，不过还是稍微有些区别。单一职责原则针对的是模块、类、接口的设计。而接口隔离原则更侧重于接口的设计，另一方面思考的角度也是不同的，它提供了一种判断接口是否职责单一的标准——通过调用者如何使用接口来判断。如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。&lt;/p>
&lt;h3 id="把接口理解成oop中的接口interface">把接口理解成OOP中的接口（Interface）&lt;/h3>
&lt;p>假设我们项目中用到了三个外部系统：Kafka、MySQL和Redis。每个系统都对应一系列配置信息，比如地址、端口、访问超时时间等。为了在内存中存储这些配置信息，供项目中的其他模块使用，我们分别设计了三个Configuration类：RedisConfig、MySQLConfig和KafkaConfig。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">ConfigSource&lt;/span> &lt;span class="n">configSource&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//配置中心（比如zookeeper）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxTotal&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//省略其他配置: maxWaitMillis,maxIdle,minIdle...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">RedisConfig&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigSource&lt;/span> &lt;span class="n">configSource&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configSource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">configSource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getAddress&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">address&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略其他get()、init()方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//从configSource加载配置到address/timeout/maxTotal...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">KafkaConfig&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//...省略... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MysqlConfig&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//...省略... }
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在我们有一个新的功能需求，要求支持Redis和Kafka配置信息的热更新，如果在配置中心更改了配置信息，不需要重启系统就能将更新加载到内存中，但是我们不希望对MySQL的配置信息进行热更新。&lt;/p>
&lt;p>为了实现这个功能，我们设计实现了一个ScheduledUpdater，以固定频率来调用RedisConfig和KafkaConfig中的update()方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Updater&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisConfig&lt;/span> &lt;span class="n">implemets&lt;/span> &lt;span class="n">Updater&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">KafkaConfig&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Updater&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MysqlConfig&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//...省略其他属性和方法... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ScheduledUpdater&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ScheduledExecutorService&lt;/span> &lt;span class="n">executor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Executors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newSingleThreadScheduledExecutor&lt;/span>&lt;span class="o">();;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">initialDelayInSeconds&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">periodInSeconds&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Updater&lt;/span> &lt;span class="n">updater&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">ScheduleUpdater&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Updater&lt;/span> &lt;span class="n">updater&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">initialDelayInSeconds&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">periodInSeconds&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">updater&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">updater&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initialDelayInSeconds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initialDelayInSeconds&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">periodInSeconds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">periodInSeconds&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleAtFixedRate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">updater&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">update&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">},&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initialDelayInSeconds&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">periodInSeconds&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConfigSource&lt;/span> &lt;span class="n">configSource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZookeeperConfigSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="cm">/*省略参数*/&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">RedisConfig&lt;/span> &lt;span class="n">redisConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RedisConfig&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">KafkaConfig&lt;/span> &lt;span class="n">kafkaConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KakfaConfig&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">MySqlConfig&lt;/span> &lt;span class="n">mysqlConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MysqlConfig&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ScheduledUpdater&lt;/span> &lt;span class="n">redisConfigUpdater&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ScheduledUpdater&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">redisConfig&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">redisConfigUpdater&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ScheduledUpdater&lt;/span> &lt;span class="n">kafkaConfigUpdater&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ScheduledUpdater&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">kafkaConfig&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">kafkaConfigUpdater&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>热更新的需求我们已经搞定了，不久之后，又来了一个新的需求，通过命令行来查看Zookeeper中的配置信息是比较麻烦的，所以我们需要有另外一种更加方便的配置信息查看方式。&lt;/p>
&lt;p>我们开发了一个内嵌的SimpleHttpServer，输出项目的配置信息到一个固定的HTTP地址，不过出于某些原因，我们不想暴露Kafka的配置信息，只想暴露MySQL和Redis的。&lt;/p>
&lt;p>为了实现这个功能，我们对代码进一步做了改造：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Updater&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Viewer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="nf">outputInPlainText&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">output&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisConfig&lt;/span> &lt;span class="n">implemets&lt;/span> &lt;span class="n">Updater&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Viewer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">outputInPlainText&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">output&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//...}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">KafkaConfig&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Updater&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MysqlConfig&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Viewer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">outputInPlainText&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">output&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//...}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SimpleHttpServer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Viewer&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">viewers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">SimpleHttpServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//...}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addViewers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">urlDirectory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Viewer&lt;/span> &lt;span class="n">viewer&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">viewers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">containsKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">urlDirectory&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">viewers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">urlDirectory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Viewer&lt;/span>&lt;span class="o">&amp;gt;());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">viewers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">urlDirectory&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">viewer&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConfigSource&lt;/span> &lt;span class="n">configSource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ZookeeperConfigSource&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">RedisConfig&lt;/span> &lt;span class="n">redisConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RedisConfig&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">KafkaConfig&lt;/span> &lt;span class="n">kafkaConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KakfaConfig&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">MySqlConfig&lt;/span> &lt;span class="n">mysqlConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MySqlConfig&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ScheduledUpdater&lt;/span> &lt;span class="n">redisConfigUpdater&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">ScheduledUpdater&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">redisConfig&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">redisConfigUpdater&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ScheduledUpdater&lt;/span> &lt;span class="n">kafkaConfigUpdater&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">ScheduledUpdater&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">kafkaConfig&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">redisConfigUpdater&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SimpleHttpServer&lt;/span> &lt;span class="n">simpleHttpServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SimpleHttpServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="mf">127.0.0.1&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">2389&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">simpleHttpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addViewer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/config&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">redisConfig&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">simpleHttpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addViewer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/config&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mysqlConfig&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">simpleHttpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>至此，热更新和监控的需求都实现了，我们来回顾一下其设计思想。&lt;/p>
&lt;p>我们设计了两个功能非常单一的接口：Updater 和 Viewer。ScheduledUpdater 只依赖 Updater 这个跟热更新相关的接口，不需要被强迫去依赖不需要的 Viewer 接口，满足接口隔离原则。同理，SimpleHttpServer 只依赖跟查看信息相关的 Viewer 接口，不依赖不需要的 Updater 接口，也满足接口隔离原则。&lt;/p>
&lt;h2 id="课堂问题">课堂问题&lt;/h2>
&lt;p>java.util.concurrent 并发包提供了 AtomicInteger 这样一个原子类，其中有一个函数 getAndIncrement() 是这样定义的：给整数增加一，并且返回未増之前的值。我的问题是，这个函数的设计是否符合单一职责原则和接口隔离原则？为什么？&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">设计原则03：里氏替换原则（LSP）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/liskov-substitution-principle/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/liskov-substitution-principle/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-17T19:38:36+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">里式替换原则的英文翻译是：Liskov Substitution Principle，缩写为 LSP。这个原则最……</summary><content type="html">&lt;p>里式替换原则的英文翻译是：Liskov Substitution Principle，缩写为 LSP。这个原则最早是在 1986 年由 Barbara Liskov 提出，他是这么描述这条原则的：&lt;/p>
&lt;blockquote>
&lt;p>If S is a subtype of T, then objects of type T may be replaced with objects of type S, without breaking the program。&lt;/p>
&lt;/blockquote>
&lt;p>在 1996 年，Robert Martin 在他的 SOLID 原则中，重新描述了这个原则，英文原话是这样的：&lt;/p>
&lt;blockquote>
&lt;p>Functions that use pointers of references to base classes must be able to use objects of derived classes without knowing it。&lt;/p>
&lt;/blockquote>
&lt;p>综合这两者的描述，其中文含义可以表述为：&lt;/p>
&lt;blockquote>
&lt;p>子类对象（object of subtype/derived class）能够替换程序（program）中父类对象（object of base/parent class）出现的任何地方，并且保证原来程序的逻辑行为（behavior）不变及正确性不被破坏。&lt;/p>
&lt;/blockquote>
&lt;p>说起来仍然比较抽象，我们该如何理解这个原则呢？&lt;/p>
&lt;h2 id="如何理解里氏替换原则">如何理解里氏替换原则？&lt;/h2>
&lt;p>我们来举个例子解释一下，如下代码中，父类 Transporter 使用 org.apache.http 库中的 HttpClient 类来传输网络数据。子类 SecurityTransporter 继承父类 Transporter，增加了额外的功能，支持传输 appId 和 appToken 安全认证信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Transporter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">HttpClient&lt;/span> &lt;span class="n">httpClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Transporter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpClient&lt;/span> &lt;span class="n">httpClient&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">httpClient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">httpClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Response&lt;/span> &lt;span class="nf">sendRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Request&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...use httpClient to send request
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SecurityTransporter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Transporter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">appId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">appToken&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">SecurityTransporter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpClient&lt;/span> &lt;span class="n">httpClient&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">appId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">appToken&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">httpClient&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">appId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">appId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">appToken&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">appToken&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Response&lt;/span> &lt;span class="nf">sendRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Request&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isNotBlank&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">appId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isNotBlank&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">appToken&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addPayload&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;app-id&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">appId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addPayload&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;app-token&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">appToken&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Demo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">demoFunction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Transporter&lt;/span> &lt;span class="n">transporter&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Reuqest&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Request&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略设置request中数据值的代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Response&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">transporter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略其他逻辑...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 里式替换原则
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Demo&lt;/span> &lt;span class="n">demo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Demo&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">demo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">demofunction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SecurityTransporter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="cm">/*省略参数*/&lt;/span>&lt;span class="o">););&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面的代码中，子类 SecurityTransporter 的设计完全符合里式替换原则，可以替换父类出现的任何位置，并且原来代码的逻辑行为不变且正确性也没有被破坏。&lt;/p>
&lt;p>不过，你可能会有这样的疑问，刚刚的代码设计不就是简单利用了面向对象的多态特性吗？多态和里式替换原则说的是不是一回事呢？从刚刚的例子和定义描述来看，里式替换原则跟多态看起来确实有点类似，但实际上它们完全是两回事。为什么这么说呢？&lt;/p>
&lt;p>其实不然，假如说子类的sendRequest方法中，对于appId和appToken的校验修改一下，如果检验失败或者不传那么直接抛出异常。这时候虽然用子类替换父类的代码语法上不会有问题，但是整个程序的逻辑行为已经发生了改变，在不传入appId和appToken的情况下我们已经无法使用这个方法了。从设计思路上来讲，这时候SecurityTransporter 的设计是不符合里式替换原则的。&lt;/p>
&lt;p>&lt;strong>与多态的区别&lt;/strong>&lt;/p>
&lt;p>多态是面向对象编程的一大特性，也是面向对象编程语言的一种语法。它是一种代码实现的思路。而里式替换是一种设计原则，是用来指导继承关系中子类该如何设计的，子类的设计要保证在替换父类的时候，不改变原有程序的逻辑以及不破坏原有程序的正确性。&lt;/p>
&lt;h2 id="哪些代码明显违背了里氏替换原则">哪些代码明显违背了里氏替换原则？&lt;/h2>
&lt;p>实际上，里氏替换原则还有另外一个更加能落地的描述，那就是“Design By Contract”，中文翻译就是“按照协议来设计”。即子类在设计的时候要遵守父类的行为约定，这里的行为约定包括：&lt;strong>函数声明要实现的功能；对输入、输出、异常的约定；甚至包括注释中所罗列的任何特殊说明。&lt;/strong>&lt;/p>
&lt;p>下面举几个明显违反里氏替换原则的反例来解释下。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>子类违背父类声明要实现的功能&lt;/strong>&lt;/p>
&lt;p>父类中提供的 sortOrdersByAmount() 订单排序函数，是按照金额从小到大来给订单排序的，而子类重写这个 sortOrdersByAmount() 订单排序函数之后，是按照创建日期来给订单排序的。那子类的设计就违背里式替换原则。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>子类违背父类对输入、输出、异常的约定&lt;/strong>&lt;/p>
&lt;p>在父类中，某个函数约定：运行出错的时候返回 null；获取数据为空的时候返回空集合（empty collection）。而子类重载函数之后，实现变了，运行出错返回异常（exception），获取不到数据返回 null。那子类的设计就违背里式替换原则。&lt;/p>
&lt;p>在父类中，某个函数约定，输入数据可以是任意整数，但子类实现的时候，只允许输入数据是正整数，负数就抛出，也就是说，子类对输入的数据的校验比父类更加严格，那子类的设计就违背了里式替换原则。&lt;/p>
&lt;p>在父类中，某个函数约定，只会抛出 ArgumentNullException 异常，那子类的设计实现中只允许抛出 ArgumentNullException 异常，任何其他异常的抛出，都会导致子类违背里式替换原则。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>子类违背父类注释中所罗列的任何特殊说明&lt;/strong>&lt;/p>
&lt;p>父类中定义的 withdraw() 提现函数的注释是这么写的：“用户的提现金额不得超过账户余额……”，而子类重写 withdraw() 函数之后，针对 VIP 账号实现了透支提现的功能，也就是提现金额可以大于账户余额，那这个子类的设计也是不符合里式替换原则的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">设计原则02：开闭原则（OCP）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/open-closed-principle/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/open-closed-principle/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-15T18:47:34+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">开闭原则（Open Closed Principle），英文描述为：Software entities(modules, classes, functions, etc.) should be open……</summary><content type="html">&lt;p>开闭原则（Open Closed Principle），英文描述为：Software entities(modules, classes, functions, etc.) should be open for extension, but closed for modification. 翻译过来就是对扩展开放、对修改关闭。&lt;/p>
&lt;p>这条原则是SOLID中最难理解同时也是最有用的一条原则。&lt;/p>
&lt;p>说难理解是因为“如何做到对扩展开放、对修改关闭？如何在项目中灵活的应用开闭原则？怎么才算满足或违反开闭原则？修改代码就一定意味着违反开闭原则吗？”这些问题都比较难理解。&lt;/p>
&lt;p>而之所以这条原则最有用，是因为，扩展性是代码质量最重要的衡量标准之一。在23种经典的设计模式之中，大部分设计模式是为了解决代码的扩展性问题而存在的，主要遵从的设计原则就是开闭原则。&lt;/p>
&lt;h2 id="如何理解对扩展开放对修改关闭">如何理解“对扩展开放、对修改关闭”？&lt;/h2>
&lt;p>为了更好的理解这个原则，我们举一个例子。这是一段API接口监控告警的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Alert&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlertRule&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Alert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AlertRule&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">rule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">check&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">api&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">requestCount&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">errorCount&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">durationOfSeconds&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">tps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requestCount&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">durationOfSeconds&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tps&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMatchedRule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">api&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getMaxTps&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">notification&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notify&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">NotificationEmergencyLevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">URGENCY&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;...&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">errorCount&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMatchedRule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">api&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getMaxErrorCount&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">notification&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notify&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">NotificationEmergencyLevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SEVERE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;...&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中，AlertRule是存储告警规则，可以自由设置；Notification是通知类，支持邮件、短信、微信、手机等各种告警渠道。NotificationEmergencyLevel 表示通知的紧急程度，包括 SEVERE（严重）、URGENCY（紧急）、NORMAL（普通）、TRIVIAL（无关紧要），不同的紧急程度对应不同的发送渠道。&lt;/p>
&lt;p>这段代码的逻辑非常简单，业务逻辑主要集中在check()函数中，当接口的TPS超过某个预先设置的最大值时，以及当接口请求出错数大于某个最大允许值时就会触发告警。现在我们要增加一个功能，当每秒钟接口超时请求个数超过预先设定的最大值，也要进行告警，那么我们该如何改动呢？&lt;/p>
&lt;p>一般来说，我们会在方法的入参中增加timeoutCount，然后再在方法中加入对应的判断逻辑。但这样改动存在很多问题，一方面我们对接口进行了修改就意味着调用这个接口的代码都要修改，另一方面修改了check()函数，对应的单元测试都要修改。&lt;/p>
&lt;p>上面的改动方法是基于“修改”的方式，如果我们遵循开闭原则，通过扩展的方式，来实现新的功能呢？&lt;/p>
&lt;p>主要改动点如下：&lt;/p>
&lt;ul>
&lt;li>check()函数的入参封装成ApiStatInfo类&lt;/li>
&lt;li>引入handler的概念，将if判断逻辑分散在各个handler中&lt;/li>
&lt;/ul>
&lt;p>具体代码改动后如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Alert&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">AlertHandler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">alertHandlers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addAlertHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AlertHandler&lt;/span> &lt;span class="n">alertHandler&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">alertHandlers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alertHandler&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">check&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApiStatInfo&lt;/span> &lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">AlertHandler&lt;/span> &lt;span class="n">handler&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">alertHandlers&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">handler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">check&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ApiStatInfo&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//省略constructor/getter/setter方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">api&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">requestCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">errorCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">durationOfSeconds&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlertHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="n">AlertRule&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">AlertHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AlertRule&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">rule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">check&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApiStatInfo&lt;/span> &lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TpsAlertHandler&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AlertHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">TpsAlertHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AlertRule&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">check&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApiStatInfo&lt;/span> &lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">tps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestCount&lt;/span>&lt;span class="o">()/&lt;/span> &lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDurationOfSeconds&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tps&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMatchedRule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getApi&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">getMaxTps&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">notification&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notify&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">NotificationEmergencyLevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">URGENCY&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;...&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ErrorAlertHandler&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AlertHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">ErrorAlertHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AlertRule&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">check&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApiStatInfo&lt;/span> &lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getErrorCount&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMatchedRule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getApi&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">getMaxErrorCount&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">notification&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notify&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">NotificationEmergencyLevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SEVERE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;...&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面就是对Alert的重构了，那么重构之后的代码如何使用呢？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ApplicationContext&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlertRule&lt;/span> &lt;span class="n">alertRule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Alert&lt;/span> &lt;span class="n">alert&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initializeBeans&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">alertRule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AlertRule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="cm">/*.省略参数.*/&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//省略一些初始化代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="cm">/*.省略参数.*/&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//省略一些初始化代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">alert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Alert&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">alert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addAlertHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">TpsAlertHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alertRule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">alert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addAlertHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ErrorAlertHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alertRule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Alert&lt;/span> &lt;span class="nf">getAlert&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">alert&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 饿汉式单例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ApplicationContext&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ApplicationContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">ApplicationContext&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initializeBeans&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ApplicationContext&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Demo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ApiStatInfo&lt;/span> &lt;span class="n">apiStatInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ApiStatInfo&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略设置apiStatInfo数据值的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ApplicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getAlert&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">check&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">apiStatInfo&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中，ApplicationContext 是一个单例类，负责 Alert 的创建、组装（alertRule 和 notification 的依赖注入）、初始化（添加 handlers）工作。&lt;/p>
&lt;p>如果基于以上的代码，当我们新增上面的新功能点时，只需要去创建新的handler即可，不需要改动原本的check()函数，而且原本的单元测试也不会受到影响。&lt;/p>
&lt;p>具体的改动点如下，代码略：&lt;/p>
&lt;ul>
&lt;li>第一处改动是：在 ApiStatInfo 类中添加新的属性 timeoutCount。&lt;/li>
&lt;li>第二处改动是：添加新的 TimeoutAlertHander 类。&lt;/li>
&lt;li>第三处改动是：在 ApplicationContext 类的 initializeBeans() 方法中，往 alert 对象中注册新的 timeoutAlertHandler。&lt;/li>
&lt;li>第四处改动是：在使用 Alert 类的时候，需要给 check() 函数的入参 apiStatInfo 对象设置 timeoutCount 的值。&lt;/li>
&lt;/ul>
&lt;h2 id="修改代码就意味着违背开闭原则吗">修改代码就意味着违背开闭原则吗？&lt;/h2>
&lt;p>上面的四点改动中，貌似只有第二点是基于扩展而非修改的，那么一三四违背开闭原则么？&lt;/p>
&lt;p>&lt;strong>首先第一点，在 ApiStatInfo 类中添加新的属性 timeoutCount。&lt;/strong> 我们增加了新的属性，新的getter/setter方法。从类的层面来看确实修改了代码，但是从方法/属性这一层面相当于是增加了新的属性，又可以被认定为“扩展”。所以，只要它没有破坏原有的代码正常运行，没有破坏原有的单元测试，我们就可以说这是一个合格的代码改动。&lt;/p>
&lt;p>&lt;strong>然后再分析一下改动三和改动四。&lt;/strong>&lt;/p>
&lt;p>这两点无论怎么说都可以算是对代码的“修改”，但是我们需要知道的是，增加新功能不可能任何模块、类、方法的代码都不修改，我们要做的是尽量让修改操作更集中、更少、更上层，尽量让最核心、最复杂的那部分逻辑代码满足开闭原则。&lt;/p>
&lt;h3 id="如何做到对扩展开放对修改关闭">如何做到对扩展开放、对修改关闭？&lt;/h3>
&lt;p>上面那种handler的写法，你可能会想：这样的代码设计思路我怎么想不到呢？你是怎么想到的呢？&lt;/p>
&lt;p>实际上，这靠的是理论知识和实战经验，先掌握理论知识，然后在实战中慢慢积攒经验即可。&lt;/p>
&lt;h4 id="指导思想">指导思想&lt;/h4>
&lt;p>&lt;strong>为了尽量写出扩展性好的代码，我们要时刻具备扩展意识、抽象意识、封装意识。这些“潜意识”可能比任何开发技巧都重要。&lt;/strong>&lt;/p>
&lt;p>写代码的时候要做好充足的思考，事先留好扩展点，识别出代码的可变部分和不可变部分，当具体的实现发生变化的时候，我们只需要基于相同的抽象接口，扩展一个新的实现，替换掉老的实现即可。&lt;/p>
&lt;h4 id="方法论">方法论&lt;/h4>
&lt;p>代码的扩展性是评判代码质量最重要的标准之一。常用来提高扩展性的方法有：多态、依赖注入、基于接口而非实现编程、大部分的设计模式等等。而且，很多设计原则、思想、模式都是相通的。&lt;/p>
&lt;h3 id="如何在项目中灵活应用开闭原则">如何在项目中灵活应用开闭原则？&lt;/h3>
&lt;p>写出支持“对扩展开放、对修改关闭”的代码的关键是预留扩展点。那问题是如何才能识别出所有可能的扩展点呢？&lt;/p>
&lt;p>软件开发中“唯一不变的就是变化本身”。我们很难识别出所有的扩展点，对于短期的、确定的扩展，我们可以实现做扩展性设计，对于长期的或者实现成本很高的扩展点，我们可以等到有需求驱动的时候进行重构。&lt;/p>
&lt;p>另外开闭原则有时候会和可读性相冲突，我们也需要做一些平衡。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">设计原则01：单一职责原则（SRP）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/single-responsibility-principle/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/single-responsibility-principle/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-15T18:07:00+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">我们都知道单一职责原则，其原本的英文描述是：A class or module should have a single responsibili……</summary><content type="html">&lt;p>我们都知道单一职责原则，其原本的英文描述是：A class or module should have a single responsibility。&lt;/p>
&lt;p>这里描述的对象有两个，一个是class（类），一个是module（模块），模块是比类更加抽象的概念，但是原则上都是一样的。&lt;/p>
&lt;p>单一职责的定义非常简单，一个类只负责一个职责或者功能。那么，如何判定这个类的职责是否足够“单一”呢？&lt;/p>
&lt;h2 id="如何判断类的职责是否足够单一">如何判断类的职责是否足够单一？&lt;/h2>
&lt;p>假如说在一个社交产品中，我们用下面的UserInfo来记录用户信息，判断一下这个类的职责是否满足“单一职责”呢？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserInfo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">telephone&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">createTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">lastLoginTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">avatarUrl&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">provinceOfAddress&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 省
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">cityOfAddress&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 市
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">regionOfAddress&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">detailedAddress&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 详细地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于这个问题的答案是要结合具体场景来看的，并不是一个固定的答案，在不同的场景甚至不同阶段的需求中，都有可能发生变化，这里举几个例子。&lt;/p>
&lt;ul>
&lt;li>地址信息只用来展示，那么这个类的设计就是合理的；如果有电商模块，那么地址的信息就应该被独立拆分出来；&lt;/li>
&lt;li>如果公司发展出了独立的APP，需要做统一认证，那么跟身份相关的字段就应该抽取出来作为独立的类；&lt;/li>
&lt;/ul>
&lt;p>所以说，评价一个类的职责是否单一是需要结合具体业务的，通常情况下，我们可以先做一个粗粒度的划分，满足业务需求，随着业务的发展，可以逐步拆分成更细的类，这就是所谓的**“持续重构”**。&lt;/p>
&lt;p>但是有几条判断原则是可以去参考的：&lt;/p>
&lt;ul>
&lt;li>类的代码行数、函数或属性过多；&lt;/li>
&lt;li>类依赖的其他类过多，不符合高内聚、低耦合的设计思想；&lt;/li>
&lt;li>私有方法过多；&lt;/li>
&lt;li>比较难给类起一个合适的名字，很难用一个业务名词概括，说明职责定义不够清晰；&lt;/li>
&lt;li>类中大量方法都在集中操作类中的几个属性，比如userInfo中很多方法都在操作address信息，就可以考虑将相关代码拆分出来&lt;/li>
&lt;/ul>
&lt;p>以上情况的代码，都是可以考虑将类进行拆分的。&lt;/p>
&lt;h2 id="类的职责是否设计得越单一越好">类的职责是否设计得越单一越好？&lt;/h2>
&lt;p>当然不是。比如类的序列化和反序列化功能，如果想让类的职责更加单一，我们将其拆为一个只负责序列化工作的 Serializer 类和另一个只负责反序列化工作的 Deserializer 类。&lt;/p>
&lt;p>虽然拆分之后类的职责更加单一了，但是这样增加了代码维护的难度，比如我们修改了序列化方式，从XML修改为JSON，我们需要同时对这两个类和进行修改，代码的可维护性就变差了。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">面向对象编程05：如何利用面向对象编程开发接口鉴权功能？</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/practice-oop-auth/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/practice-oop-auth/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-14T16:47:37+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">对于面向对象的设计思想，大部分人还只是停留在理论层面，但更重要的是需要知道“怎么做”……</summary><content type="html">&lt;p>对于面向对象的设计思想，大部分人还只是停留在理论层面，但更重要的是需要知道“怎么做”，也就是如何使用面向对象进行分析、设计和编程。下面将结合一个真实的开发案例，从基础的需求分析、职责划分、类的定义、交互、组装运行讲起，将最基础的面向对象分析、设计、编程讲清楚。&lt;/p>
&lt;h2 id="一如何进行面向对象分析ooa">一、如何进行面向对象分析（OOA）&lt;/h2>
&lt;h3 id="1案例介绍">1.案例介绍&lt;/h3>
&lt;p>假设你正在开发一个微服务，通过HTTP协议暴露接口给其他系统调用。为了保证接口调用的安全性，我们希望设计一个接口调用鉴权功能，没有认证过的系统调用我们的接口会被拒绝。&lt;/p>
&lt;h3 id="2需求分析">2.需求分析&lt;/h3>
&lt;h4 id="1第一轮基础分析---用户名密码">（1）第一轮基础分析 - 用户名密码&lt;/h4>
&lt;p>很直观的就可以想到，最简单的解决方案就是通过用户名和密码来认证。每个调用方都有一个应用ID和对应的密钥，调用方在请求接口的时候携带，微服务解析并进行对比，一致后再进行接口调用。&lt;/p>
&lt;h4 id="2第二轮分析优化---加密">（2）第二轮分析优化 - 加密&lt;/h4>
&lt;p>不过，这样的验证方式，每次都要明文传输密码。所以我们借助算法加密，对密码进行加密处理，但是实际上这也不行，因为加密之后的账号密码同样可以被截获，这就是典型的“重放攻击”。&lt;/p>
&lt;p>对于这个问题，我们来借住OAuth的验证思路来解决：&lt;/p>
&lt;ol>
&lt;li>调用方将URL、AppID以及AppSecret拼接在一起，然后进行加密，生成一个token；&lt;/li>
&lt;li>调用方调用接口时将原本的URL、AppID以及第一步生成的token一起传递出去；&lt;/li>
&lt;li>微服务端收到请求后，根据AppID取出AppSecret，然后用同样的算法生成另外一个token，命名为token_s&lt;/li>
&lt;li>对比token以及token_s，如果一致就允许接口调用请求&lt;/li>
&lt;/ol>
&lt;h4 id="3第三轮分析优化---引入随机变量时间戳">（3）第三轮分析优化 - 引入随机变量时间戳&lt;/h4>
&lt;p>即使是这样，也会有“重放攻击”的风险，因为URL、AppID以及AppSecret都是固定的，未认证系统截获后仍然可以伪装成认证系统去进行调用。为了解决这个问题，我们进一步优化token生成算法，引入一个随机变量，让每次接口请求生成的token不一样，比如我们使用时间戳作为随机变量。&lt;/p>
&lt;p>现在我们将URL、AppID、AppSecret、时间戳四者进行加密来生成token，调用方在接口请求的时候将token、AppID、时间戳一起随着URL传递给服务端。这样的话，微服务由于有了时间戳，可以判定是否在一定的时间窗口内，如果超过指定的时间就认为token过期而拒绝调用。&lt;/p>
&lt;h4 id="4第四轮分析优化">（4）第四轮分析优化&lt;/h4>
&lt;p>你可能会说，这样扔拦截不了这个指定时间内的“重放攻击”啊，是的，这个方案仍然有漏洞。但是安全本身就是相对的，我们需要衡量安全性、开发成本、对系统性能的影响等等来做出合理的方案。&lt;/p>
&lt;p>我们还有一个细节需要考虑，那就是微服务端如何存储每个客户端的账户密码（即AppID和AppSecret），最容易想到的方案就是存储到MySQL中。不过，像这种非业务功能，最好不要与具体的第三方有过度的耦合。&lt;/p>
&lt;p>针对存储方案，我们最好能灵活的支持各种存储方式，不一定每一种都要实现，但都要保留扩展点，保证系统有足够的灵活性和扩展性，能够在我们切换存储方式的时候，尽可能地减少代码的改动。&lt;/p>
&lt;h4 id="5确定最终需求">（5）确定最终需求&lt;/h4>
&lt;blockquote>
&lt;ol>
&lt;li>调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算法生成 token，并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。&lt;/li>
&lt;li>微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。&lt;/li>
&lt;li>微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。如果已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。&lt;/li>
&lt;li>如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密码，通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进行匹配；如果一致，则鉴权成功，允许接口调用，否则就拒绝接口调用。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>需求分析的过程实际上是一个不断迭代优化的过程。我们不要试图一下就能给出一个完美的解决方案，而是先给出一个粗糙的、基础的方案，有一个迭代的基础，然后再慢慢优化，这样一个思考过程能让我们摆脱无从下手的窘境。&lt;/p>
&lt;h2 id="二如何进行面向对象设计ood">二、如何进行面向对象设计（OOD）&lt;/h2>
&lt;p>第一步，我们使用面向对象分析，并且最终产出了详细的需求。下面我们来进行面向对象设计，最终的产出是：类。&lt;/p>
&lt;p>主要包含下面几个部分：&lt;/p>
&lt;h3 id="1划分职责进而识别出有哪些类">1.划分职责进而识别出有哪些类？&lt;/h3>
&lt;p>根据详细的的需求分析，将涉及到的功能点罗列出来，然后去看哪些功能点职责相近，操作同样的属性，是否应该属于同一个类。如果是大型的业务系统，那么先进行模块的拆分即可。&lt;/p>
&lt;p>针对鉴权这个业务场景，我们可以拆解出来以下功能点：&lt;/p>
&lt;ul>
&lt;li>拼接字符串，URL+AppID+AppSecret+Timestamp&lt;/li>
&lt;li>token加密&lt;/li>
&lt;li>拼接字符串为新的URL&lt;/li>
&lt;li>解析URL&lt;/li>
&lt;li>从存储中取出对应的AppID和AppSecret&lt;/li>
&lt;li>判断token是否过期&lt;/li>
&lt;li>验证token是否匹配&lt;/li>
&lt;/ul>
&lt;p>这其中可以粗略的分为三类，AuthToken，负责token的生成和验证；Url负责URL的拼接和解析；CredentialStorage，负责从存储中取数据。&lt;/p>
&lt;h3 id="2定义类及其属性和方法">2.定义类及其属性和方法&lt;/h3>
&lt;h4 id="authtoken">AuthToken&lt;/h4>
&lt;p>接下来具体定义每个类的属性和方法，先看AuthToken：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/202203141908823.jpg" alt="img">&lt;/p>
&lt;p>从上图中可以发现几个细节：&lt;/p>
&lt;ul>
&lt;li>并不是所有的名词都被定义为类的属性了，比如URL、AppID、密码、时间戳是定义为方法的参数的；&lt;/li>
&lt;li>新增的createTime，expireTimeInterval这两个属性是没有出现在功能点描述中的，但是我们需要用它来在isExpired()函数中来判定token是否过期&lt;/li>
&lt;li>我们给AuthToken这个类中增加了一个功能点中没有描述的方法getToken()&lt;/li>
&lt;/ul>
&lt;p>这告诉我们，在业务模型上来说，不属于这个类的属性和方法，不应该被放到这个类里；此外，在设计类具有哪些属性和方法的时候，不止要分析当下，还要分析这个类从业务模型上来讲了理应有哪些属性和方法。&lt;/p>
&lt;h4 id="url">Url&lt;/h4>
&lt;p>虽然在需求描述中，我们定义这个类为URL，但实际的接口请求不一定是Url的形式，还有可能是Dubbo、RPC等其他形式，为了更加通用，我们命名为ApiRequest。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/202203141915811.jpg" alt="img">&lt;/p>
&lt;h4 id="credentialstorage">CredentialStorage&lt;/h4>
&lt;p>CredentialStorage 类非常简单，类图如下所示。为了做到抽象封装具体的存储方式，我们将 CredentialStorage 设计成了接口，基于接口而非具体的实现编程。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/202203141918591.png" alt="image-20220314191859560">&lt;/p>
&lt;h3 id="3定义类与类之间的交互关系">3.定义类与类之间的交互关系&lt;/h3>
&lt;p>UML统一建模语言中定义了六种类之间的关系，它们分别是泛化、实现、关联、聚合、组合、依赖。&lt;/p>
&lt;ul>
&lt;li>泛化（Generalization）：就是继承关系&lt;/li>
&lt;li>实现（Realization）：一般是接口和实现类的关系&lt;/li>
&lt;li>聚合（Aggregation）：是一种包含关系。A 类对象包含 B 类对象，B 类对象的生命周期可以不依赖 A 类对象的生命周期，也就是说可以单独销毁 A 类对象而不影响 B 对象
&lt;ul>
&lt;li>组合（Composition）：也是一种包含关系。A 类对象包含 B 类对象，B 类对象的生命周期依赖 A 类对象的生命周期，B 类对象不可单独存在，比如鸟与翅膀之间的关系。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>关联（Association）：是一种非常弱的关系，包含聚合、组合两种关系。具体到代码层面，如果 B 类对象是 A 类的成员变量，那 B 类和 A 类就是关联关系。&lt;/li>
&lt;li>依赖（Dependency）：是一种比关联关系更加弱的关系，包含关联关系。不管是 B 类对象是 A 类对象的成员变量，还是 A 类的方法使用 B 类对象作为参数或者返回值、局部变量，只要 B 类对象和 A 类对象有任何使用关系，我们都称它们有依赖关系。&lt;/li>
&lt;/ul>
&lt;p>刚刚我们定义的类之间都有哪些关系呢？因为目前只有三个核心的类，所以只用到了实现关系，也即 CredentialStorage 和 MysqlCredentialStorage 之间的关系。&lt;/p>
&lt;h3 id="4将类组装起来并提供执行入口">4.将类组装起来并提供执行入口&lt;/h3>
&lt;p>接口鉴权并不是一个独立运行的系统，而是一个集成在系统上运行的组件，所以，我们封装所有的实现细节，设计了一个最顶层的 ApiAuthenticator 接口类，暴露一组给外部调用者使用的 API 接口，作为触发执行鉴权逻辑的入口。具体的类的设计如下所示：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/202203150941804.jpg" alt="img">&lt;/p>
&lt;h2 id="三如何进行面向对象编程oop">三、如何进行面向对象编程（OOP）&lt;/h2>
&lt;p>面向对象编程就是按照设计好的类，翻译成代码实现就行了，这部分工作比较简单，这里给出ApiAuthenticator的实现。&lt;/p>
&lt;pre tabindex="0">&lt;code>
public interface ApiAuthenticator {
void auth(String url);
void auth(ApiRequest apiRequest);
}
public class DefaultApiAuthenticatorImpl implements ApiAuthenticator {
private CredentialStorage credentialStorage;
public DefaultApiAuthenticatorImpl() {
this.credentialStorage = new MysqlCredentialStorage();
}
public DefaultApiAuthenticatorImpl(CredentialStorage credentialStorage) {
this.credentialStorage = credentialStorage;
}
@Override
public void auth(String url) {
ApiRequest apiRequest = ApiRequest.buildFromUrl(url);
auth(apiRequest);
}
@Override
public void auth(ApiRequest apiRequest) {
String appId = apiRequest.getAppId();
String token = apiRequest.getToken();
long timestamp = apiRequest.getTimestamp();
String originalUrl = apiRequest.getOriginalUrl();
AuthToken clientAuthToken = new AuthToken(token, timestamp);
if (clientAuthToken.isExpired()) {
throw new RuntimeException(&amp;#34;Token is expired.&amp;#34;);
}
String password = credentialStorage.getPasswordByAppId(appId);
AuthToken serverAuthToken = AuthToken.generate(originalUrl, appId, password, timestamp);
if (!serverAuthToken.match(clientAuthToken)) {
throw new RuntimeException(&amp;#34;Token verfication failed.&amp;#34;);
}
}
}
&lt;/code>&lt;/pre>&lt;p>不过，在平时的工作中，大部分程序员往往都是在脑子里或者草纸上完成面向对象分析和设计，然后就开始写代码了，边写边思考边重构，并不会严格地按照刚刚的流程来执行。而且，说实话，即便我们在写代码之前，花很多时间做分析和设计，绘制出完美的类图、UML 图，也不可能把每个细节、交互都想得很清楚。在落实到代码的时候，我们还是要反复迭代、重构、打破重写。毕竟，整个软件开发本来就是一个迭代、修修补补、遇到问题解决问题的过程，是一个不断重构的过程。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">面向对象编程04：贫血模型与充血模型</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/anaemic-and-rich-domain-model/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/anaemic-and-rich-domain-model/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-13T18:21:11+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">我们都知道，很多业务系统都是基于MVC三层架构来开发，实际上，这是一种基于贫血模型的……</summary><content type="html">&lt;p>我们都知道，很多业务系统都是基于MVC三层架构来开发，实际上，这是一种基于贫血模型的MVC三层架构开发模式。虽然现在以及成为标准的web项目开发模式，但是却违反了面向对象编程风格，因而被人称为”反模式“。特别是&lt;strong>领域驱动设计&lt;/strong>（Domain Driven Design，简称DDD）盛行之后，这种基于贫血模型的传统的开发模式就更加被人诟病。&lt;/p>
&lt;h2 id="充血模型与贫血模型">充血模型与贫血模型&lt;/h2>
&lt;h3 id="1什么是基于贫血模型的传统开发模式">1.什么是基于贫血模型的传统开发模式？&lt;/h3>
&lt;p>做过Java开发项目的，都知道MVC架构模式。MVC 三层架构中的 M 表示 Model，V 表示 View，C 表示 Controller。它将整个项目分为三层：展示层、逻辑层、数据层。MVC 三层开发架构是一个比较笼统的分层方式，落实到具体的开发层面，很多项目也并不会 100% 遵从 MVC 固定的分层方式，而是会根据具体的项目需求，做适当的调整。&lt;/p>
&lt;p>比如，现在很多 Web 或者 App 项目都是前后端分离的，后端负责暴露接口给前端调用。这种情况下，我们一般就将后端项目分为 Repository 层、Service 层、Controller 层。其中，Repository 层负责数据访问，Service 层负责业务逻辑，Controller 层负责暴露接口。当然，这只是其中一种分层和命名方式。不同的项目、不同的团队，可能会对此有所调整。不过，万变不离其宗，只要是依赖数据库开发的 Web 项目，基本的分层思路都大差不差。&lt;/p>
&lt;p>在这种MVC架构里面，有很多只包含数据（成员变量及对应的getter、setter方法），不包含业务逻辑的类，这种就叫做&lt;strong>贫血模型（Anemic Domain Model）&lt;/strong>。这种贫血模型将数据与操作分离，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。&lt;/p>
&lt;h3 id="2什么是基于充血模型的ddd开发模式">2.什么是基于充血模型的DDD开发模式？&lt;/h3>
&lt;h4 id="充血模型">充血模型&lt;/h4>
&lt;p>在贫血模型中，数据和业务逻辑被分割到不同的类中。充血模型（Rich Domain Model）则正好相反，数据和对应的业务逻辑被封装到同一个类中。因此，这种充血模型满足面向对象的封装特性，是典型的面向对象编程风格。&lt;/p>
&lt;h4 id="领域驱动设计">领域驱动设计&lt;/h4>
&lt;p>领域驱动设计主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。这个概念在2004年就被提出，不过它被大众所熟知还得基于另外一个概念的兴起，那就是&lt;strong>微服务&lt;/strong>。&lt;/p>
&lt;p>我们知道，除了监控、调用链追踪、API 网关等服务治理系统的开发之外，微服务还有另外一个更加重要的工作，那就是针对公司的业务，合理地做微服务拆分。而领域驱动设计恰好就是用来指导划分服务的。所以，微服务加速了领域驱动设计的盛行。&lt;/p>
&lt;p>不过领域驱动设计不是银弹，也没必要花很多时间研究它。做好领域驱动设计的关键是对业务的熟悉程度，而不是对DDD的熟悉程度。实际上，基于充血模型的DDD开发模式实现的代码，也是按照MVC三层架构分的。Controller层负责暴露接口，Repository层还是负责数据存取，Service层负责核心业务逻辑，它们之间的主要区别在于Service层。&lt;/p>
&lt;p>在传统的贫血模型开发模式中，Service层包含Service和Bo两个部分，Bo只包含数据不包含业务逻辑，业务逻辑集中在Service层；而在DDD开发模式种，Service层包含Service类和Domain类两个部分，Domain就相当于贫血模型中的BO，不过Domain是既包含数据，又包含业务逻辑的，相对的是Service类变得非常单薄。&lt;/p>
&lt;h3 id="3为什么贫血模式更加受欢迎">3.为什么贫血模式更加受欢迎？&lt;/h3>
&lt;blockquote>
&lt;p>我们前面也讲过，面向过程编程风格有种种弊端，比如，数据和操作分离之后，数据本身的操作就不受限制了。任何代码都可以随意修改数据。既然基于贫血模型的这种传统开发模式是面向过程编程风格的，那它又为什么会被广大程序员所接受呢？关于这个问题，我总结了下面三点原因。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>业务系统足够简单，很多系统几乎是基于SQL的CRUD操作，贫血模型就足以应对&lt;/li>
&lt;li>充血模型的设计比贫血模型更加有难度，贫血模型只需要定义好数据，在service实现功能即可&lt;/li>
&lt;li>思维固化，转型有成本&lt;/li>
&lt;/ul>
&lt;h3 id="4什么项目应该使用基于充血模型的ddd开发模式">4.什么项目应该使用基于充血模型的DDD开发模式&lt;/h3>
&lt;blockquote>
&lt;p>刚刚我们讲到，基于贫血模型的传统的开发模式，比较适合业务比较简单的系统开发。相对应的，基于充血模型的 DDD 开发模式，更适合业务复杂的系统开发。比如，包含各种利息计算模型、还款模型等复杂业务的金融系统。&lt;/p>
&lt;/blockquote>
&lt;p>两者的区别一个重逻辑，一个重数据，所以根本的区别是什么呢？为什么复杂系统要用基于充血模型的DDD模式开发更有优势？&lt;/p>
&lt;p>实际上，这两者还有一个非常重要的区别：&lt;strong>会导致不同的开发流程&lt;/strong>。而基于充血模型的DDD开发模式在应对大型复杂系统时更有优势，为什么这么说呢？&lt;/p>
&lt;p>在基于贫血模型开发时，大部分是SQL驱动的，按照固定的模板，实现SQL和接口返回，这样时间久了，各种长得差不多的、区别很小的SQL语句满天飞。这个过程中很少有人会应用领域模型、OOP的概念，也很少有代码复用意识。对于复杂的业务系统来说，这种开发方式会让代码越来越混乱，最终导致无法维护。&lt;/p>
&lt;p>在DDD开发模式下，我们需要事先理清所有的业务，定义领域模型所包含的属性和方法，领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。越是复杂的系统，对代码的复用性、易维护性要求就越高，我们越是应该花时间在前期设计上【90%设计，10%编码】。而基于充血模型的 DDD 开发模式，正好需要我们前期做大量的业务调研、领域模型设计，所以它更加适合这种复杂系统的开发。&lt;/p>
&lt;h2 id="利用ddd开发一个虚拟钱包系统">利用DDD开发一个虚拟钱包系统&lt;/h2>
&lt;h3 id="业务场景">业务场景&lt;/h3>
&lt;p>很多具有支付、购买功能的应用（比如淘宝、滴滴出行、极客时间等）都支持钱包的功能。应用为每个用户开设一个系统内的虚拟钱包账户，支持用户&lt;strong>充值、提现、支付、冻结、透支、转赠、查询账户余额、查询交易流水&lt;/strong>等操作。为了方便理解，我们现在给这个钱包定义以下五个功能：&lt;/p>
&lt;h4 id="1充值">1.充值&lt;/h4>
&lt;ul>
&lt;li>从用户的银行卡账户转账到应用的公共银行卡账户&lt;/li>
&lt;li>将用户的充值金额加到虚拟钱包余额上&lt;/li>
&lt;li>记录刚刚的操作流水&lt;/li>
&lt;/ul>
&lt;h4 id="2支付">2.支付&lt;/h4>
&lt;ul>
&lt;li>从用户的虚拟钱包划钱到商家的虚拟钱包账户&lt;/li>
&lt;li>记录流水&lt;/li>
&lt;/ul>
&lt;h4 id="3提现">3.提现&lt;/h4>
&lt;ul>
&lt;li>扣减虚拟钱包余额&lt;/li>
&lt;li>转账到真实的银行卡&lt;/li>
&lt;li>记录流水&lt;/li>
&lt;/ul>
&lt;h4 id="4查询余额">4.查询余额&lt;/h4>
&lt;ul>
&lt;li>查看余额数字即可&lt;/li>
&lt;/ul>
&lt;h4 id="5查询交易流水">5.查询交易流水&lt;/h4>
&lt;ul>
&lt;li>查询充值、支付、提现的记录列表&lt;/li>
&lt;/ul>
&lt;h3 id="设计思路">设计思路&lt;/h3>
&lt;p>我们可以把整个钱包系统的业务划分为两部分，其中一部分单纯跟应用内的虚拟钱包账户打交道，另一部分单纯跟银行账户打交道。我们基于这样一个业务划分，给系统解耦，将整个钱包系统拆分为两个子系统：虚拟钱包系统和三方支付系统。&lt;/p>
&lt;p>我们在这里只讲解虚拟钱包系统。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/202203141253373.jpg" alt="img">&lt;/p>
&lt;p>从图中我们可以看出，虚拟钱包系统要支持的操作非常简单，就是余额的加加减减。其中，充值、提现、查询余额三个功能，只涉及一个账户余额的加减操作，而支付功能涉及两个账户的余额加减操作：一个账户减余额，另一个账户加余额。&lt;/p>
&lt;p>至于交易流水，交易流水的数据格式包含两个钱包账号，一个是入账钱包账号，一个是出账钱包账号。为什么要有两个账号信息呢？这主要是为了兼容支付这种涉及两个账户的交易类型。不过，对于充值、提现这两种交易类型来说，我们只需要记录一个钱包账户信息就够了。&lt;/p>
&lt;p>下面来看一下如何用两种模式来实现这样的虚拟钱包系统？&lt;/p>
&lt;h3 id="基于贫血模型的传统开发模式">基于贫血模型的传统开发模式&lt;/h3>
&lt;p>如果你有开发web项目的经验，那么这个系统对你来说将会非常简单，这是一个典型的Web后端项目三层架构，Controller和VO负责暴露接口，伪代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">VirtualWalletController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通过构造函数或者IOC框架注入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">VirtualWalletService&lt;/span> &lt;span class="n">virtualWalletService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="nf">getBalance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1">//查询余额
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">debit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1">//出账
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">credit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1">//入账
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">transfer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">fromWalletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">toWalletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...}&lt;/span> &lt;span class="c1">//转账
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//省略查询transaction的接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Service 和 BO 负责核心业务逻辑，Repository 和 Entity 负责数据存取。Service层的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">VirtualWalletBo&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//省略getter/setter/constructor方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">createTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">balance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="n">Enum&lt;/span> &lt;span class="n">TransactionType&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DEBIT&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CREDIT&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TRANSFER&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">VirtualWalletService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通过构造函数或者IOC框架注入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">VirtualWalletRepository&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">VirtualWalletTransactionRepository&lt;/span> &lt;span class="n">transactionRepo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">VirtualWalletBo&lt;/span> &lt;span class="nf">getVirtualWallet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletEntity&lt;/span> &lt;span class="n">walletEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWalletEntity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletBo&lt;/span> &lt;span class="n">walletBo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletEntity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">walletBo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="nf">getBalance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBalance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">debit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletEntity&lt;/span> &lt;span class="n">walletEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWalletEntity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">walletEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBalance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NoSufficientBalanceException&lt;/span>&lt;span class="o">(...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span> &lt;span class="n">transactionEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAmount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCreateTime&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TransactionType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DEBIT&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFromWalletId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">saveTransaction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">updateBalance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">balance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">subtract&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">credit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span> &lt;span class="n">transactionEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAmount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCreateTime&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TransactionType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CREDIT&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFromWalletId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">saveTransaction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletEntity&lt;/span> &lt;span class="n">walletEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWalletEntity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">walletEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBalance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">updateBalance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">balance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">transfer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">fromWalletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">toWalletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span> &lt;span class="n">transactionEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAmount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCreateTime&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TransactionType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TRANSFER&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFromWalletId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fromWalletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setToWalletId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">toWalletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">saveTransaction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">debit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fromWalletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">credit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">toWalletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="基于充血模型的ddd开发模式">基于充血模型的DDD开发模式&lt;/h3>
&lt;p>在上一节课中，我们讲到，基于充血模型的 DDD 开发模式，跟基于贫血模型的传统开发模式的主要区别就在 Service 层，Controller 层和 Repository 层的代码基本上相同。所以，我们重点看一下，Service 层按照基于充血模型的 DDD 开发模式该如何来实现。&lt;/p>
&lt;p>在这种开发模式下，我们把虚拟钱包 VirtualWallet 类设计成一个充血的 Domain 领域模型，并且将原来在 Service 类中的部分业务逻辑移动到 VirtualWallet 类中，让 Service 类的实现依赖 VirtualWallet 类。具体的代码实现如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">VirtualWallet&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// Domain领域模型(充血模型)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">createTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BigDecimal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ZERO&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">VirtualWallet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">preAllocatedId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">preAllocatedId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="nf">balance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">debit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InsufficientBalanceException&lt;/span>&lt;span class="o">(...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">subtract&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">credit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ZERO&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InvalidAmountException&lt;/span>&lt;span class="o">(...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">VirtualWalletService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通过构造函数或者IOC框架注入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">VirtualWalletRepository&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">VirtualWalletTransactionRepository&lt;/span> &lt;span class="n">transactionRepo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">VirtualWallet&lt;/span> &lt;span class="nf">getVirtualWallet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletEntity&lt;/span> &lt;span class="n">walletEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWalletEntity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWallet&lt;/span> &lt;span class="n">wallet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletEntity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">wallet&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="nf">getBalance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBalance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">debit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletEntity&lt;/span> &lt;span class="n">walletEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWalletEntity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWallet&lt;/span> &lt;span class="n">wallet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletEntity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wallet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span> &lt;span class="n">transactionEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAmount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCreateTime&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TransactionType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DEBIT&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFromWalletId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">saveTransaction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">updateBalance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">wallet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">credit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletEntity&lt;/span> &lt;span class="n">walletEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWalletEntity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWallet&lt;/span> &lt;span class="n">wallet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletEntity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wallet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">credit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span> &lt;span class="n">transactionEntity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">VirtualWalletTransactionEntity&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAmount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCreateTime&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TransactionType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CREDIT&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFromWalletId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transactionRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">saveTransaction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">transactionEntity&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">walletRepo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">updateBalance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">walletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">wallet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">transfer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">fromWalletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">toWalletId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...跟基于贫血模型的传统开发模式的代码一样...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看了上面的代码，你可能会说，领域模型 VirtualWallet 类很单薄，包含的业务逻辑很简单。相对于原来的贫血模型的设计思路，这种充血模型的设计思路，貌似并没有太大优势。你说得没错！这也是大部分业务系统都使用基于贫血模型开发的原因。不过，如果虚拟钱包系统需要支持更复杂的业务逻辑，那充血模型的优势就显现出来了。比如，我们要支持透支一定额度和冻结部分余额的功能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">VirtualWallet&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">createTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BigDecimal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ZERO&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isAllowedOverdraft&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">overdraftAmount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BigDecimal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ZERO&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">frozenAmount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BigDecimal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ZERO&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">VirtualWallet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">preAllocatedId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">preAllocatedId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">freeze&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">unfreeze&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">increaseOverdraftAmount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">decreaseOverdraftAmount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">closeOverdraft&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">openOverdraft&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="nf">balance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="nf">getAvaliableBalance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">totalAvaliableBalance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">subtract&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">frozenAmount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isAllowedOverdraft&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">totalAvaliableBalance&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">overdraftAmount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">totalAvaliableBalance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">debit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">totalAvaliableBalance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getAvaliableBalance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">totoalAvaliableBalance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InsufficientBalanceException&lt;/span>&lt;span class="o">(...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">subtract&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">credit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BigDecimal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ZERO&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InvalidAmountException&lt;/span>&lt;span class="o">(...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">balance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>领域模型 VirtualWallet 类添加了简单的冻结和透支逻辑之后，功能看起来就丰富了很多，代码也没那么单薄了。如果功能继续演进，我们可以增加更加细化的冻结策略、透支策略、支持钱包账号（VirtualWallet id 字段）自动生成的逻辑（不是通过构造函数经外部传入 ID，而是通过分布式 ID 生成算法来自动生成 ID）等等。VirtualWallet 类的业务逻辑会变得越来越复杂，也就很值得设计成充血模型了。&lt;/p>
&lt;h3 id="辩证思考">辩证思考&lt;/h3>
&lt;p>1.DDD开发模式中业务逻辑都在Domain中，那么Service的职责是什么？&lt;/p>
&lt;ul>
&lt;li>负责与repo层交流，保持领域模型的独立性，不与其他层耦合过深&lt;/li>
&lt;li>业务聚合，有些逻辑是多个函数组合到一起的，使用service进行聚合&lt;/li>
&lt;li>Service负责一些非功能性及与三方系统交互的工作，比如幂等、事务、发邮件、发消息、记录日志等&lt;/li>
&lt;/ul>
&lt;p>2.Controller和Repo层仍然是贫血模型，是否有必要进行充血领域建模呢？&lt;/p>
&lt;ul>
&lt;li>没有必要，Controller 层主要负责接口的暴露，Repository 层主要负责与数据库打交道，这两层包含的业务逻辑并不多&lt;/li>
&lt;li>Repo层的Entity由于生命周期有限，一旦传递到Service层后就会被转化为BO或者Domain来处理后续逻辑，所以不需要充血模型&lt;/li>
&lt;li>Controller层的VO实际上是一种DTO，从功能上来讲是不包含逻辑只包含数据的，所以设计成贫血模型也是合理的&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">面向对象编程03：组合、继承与委托</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/composition-inheritance-delegation/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/composition-inheritance-delegation/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-13T18:00:56+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">多用组合少用继承 我们再来讲讲另外一个原则：组合优于继承，多用组合少用继承。 为什么这么……</summary><content type="html">&lt;h2 id="多用组合少用继承">多用组合少用继承&lt;/h2>
&lt;p>我们再来讲讲另外一个原则：&lt;strong>组合优于继承，多用组合少用继承。&lt;/strong>&lt;/p>
&lt;p>为什么这么说呢？&lt;/p>
&lt;h3 id="1为什么不推荐使用继承">1.为什么不推荐使用继承？&lt;/h3>
&lt;p>由于继承层次过深、过复杂，很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们举个例子来解释一下。&lt;/p>
&lt;p>假设我们要设计一个关于鸟的类，我们定义了一个抽象类AbstractBird，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。&lt;/p>
&lt;p>大部分鸟都会飞，所以我们定义了一个fly()方法，但是凡事有例外，比如鸵鸟是不会飞的，所以我们让鸵鸟类重写了fly()方法，让它抛出UnSupportedMethodException异常：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbstractBird&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">fly&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Ostrich&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractBird&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//鸵鸟
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//...省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">fly&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UnSupportedMethodException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;I can&amp;#39;t fly.&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种设计思路虽然可以解决问题，但是不够优美。因为还有很多其他鸟也不会飞，这样写增加了代码的维护量，也不符合最小知识原则。&lt;/p>
&lt;p>所以我们提出另外一种方案，我们把AbstractBird派生出另外两个细分的抽象类：会飞的鸟类 AbstractFlyableBird 和不会飞的鸟类 AbstractUnFlyableBird，继承关系如下图所示：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/1e27919f63ef615dba98bc00673914b7.jpg" alt="img" style="zoom: 33%;" />
&lt;p>整体来讲，目前的继承关系还比较简洁，层次也不深，可以接受。但是实际情况中随着业务的深入，我们的实现会越来越复杂。比如说现在又增加了”鸟会不会叫“这个关注点，这时候我们又该如何设计呢？&lt;/p>
&lt;p>按照刚才的设计思路，我们需要定义四个抽象类，如果再考虑”鸟会不会下蛋“，那这个抽象类的个数是指数级上升的。&lt;/p>
&lt;p>类的继承层次越深，继承关系越复杂，代码的可读性就会越差。子类的实现依赖父类的实现，两者高度耦合，一旦父类代码修改就会影响所有子类的逻辑。&lt;/p>
&lt;h3 id="2组合相比继承有哪些优势">2.组合相比继承有哪些优势？&lt;/h3>
&lt;p>实际上，我们可以使用**组合（composition）、接口（interface）、委托（delegation）**三个技术手段，来解决刚刚继承存在的问题。&lt;/p>
&lt;p>我们知道接口具有行为特性，针对”会飞“这样一个行为特性，我们定义一个Flyable接口，所有会飞的鸟都实现这个接口，对于会叫、下蛋这些行为，也是如此。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Flyable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">fly&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Tweetable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">tweet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">EggLayable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">layEgg&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Ostrich&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Tweetable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EggLayable&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//鸵鸟
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//... 省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">tweet&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">layEgg&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Sparrow&lt;/span> &lt;span class="n">impelents&lt;/span> &lt;span class="n">Flyable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Tweetable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EggLayable&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//麻雀
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//... 省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">fly&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">tweet&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">layEgg&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是接口只声明方法，不定义实现，也就是说每个会下蛋的鸟都要事先下蛋的方法。这样就会导致代码重复问题，那么这个问题又该如何解决呢？？&lt;/p>
&lt;p>我们针对这三个接口，再定义三个实现类，这三个实现类分别实现了fly()、tweet()和layEgg()方法，然后在具体的”鸟“对象中委托这三个实现类来实现相应的功能，通过组合和委托技术来消除代码重复，伪代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Flyable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">fly&lt;/span>&lt;span class="o">()&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FlyAbility&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Flyable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">fly&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//省略Tweetable/TweetAbility/EggLayable/EggLayAbility
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Ostrich&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Tweetable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">EggLayable&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//鸵鸟
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">TweetAbility&lt;/span> &lt;span class="n">tweetAbility&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TweetAbility&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//组合
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">EggLayAbility&lt;/span> &lt;span class="n">eggLayAbility&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EggLayAbility&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//组合
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//... 省略其他属性和方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">tweet&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tweetAbility&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">tweet&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 委托
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">layEgg&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">eggLayAbility&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">layEgg&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 委托
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="小结">小结&lt;/h4>
&lt;p>我们知道继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。而这三个作用都可以通过其他技术手段来达成。比如 is-a 关系，我们可以通过组合和接口的 has-a 关系来替代；多态特性我们可以利用接口来实现；代码复用我们可以通过组合和委托来实现。所以，从理论上讲，通过组合、接口、委托三个技术手段，我们完全可以替换掉继承，在项目中不用或者少用继承关系，特别是一些复杂的继承关系。&lt;/p>
&lt;h3 id="3如何判断该用组合还是继承">3.如何判断该用组合还是继承？&lt;/h3>
&lt;p>尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。&lt;/p>
&lt;p>&lt;strong>基本原则&lt;/strong>&lt;/p>
&lt;p>如果类之间的继承结构稳定，继承层次较浅。继承关系不复杂，我们可以大胆地使用继承；反之则尽量用组合来替代继承。&lt;/p>
&lt;p>&lt;strong>设计模式中的固定用法&lt;/strong>&lt;/p>
&lt;p>除此以外，还有一些设计模式会固定使用继承或者组合，比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。&lt;/p>
&lt;p>&lt;strong>其他特殊场景&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>有的时候，A和B有共同的代码但是并不具有继承关系（既不是父子也不是兄弟），这时候应该是用组合更加合理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你不能改变一个函数的入参类型，而入参又非接口，为了支持多态，只能采用继承来实现。比如下面这样一段代码，其中 FeignClient 是一个外部类，我们没有权限去修改这部分代码，但是我们希望能重写这个类在运行时执行的 encode() 函数。这个时候，我们只能采用继承来实现了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FeignClient&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// Feign Client框架代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//...省略其他代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">encode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//... }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">demofunction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">FeignClient&lt;/span> &lt;span class="n">feignClient&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">feignClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">encode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CustomizedFeignClient&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">FeignClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">encode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//...重写encode的实现...}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">FeignClient&lt;/span> &lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CustomizedFeignClient&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">demofunction&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">client&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">面向对象编程02：接口与抽象类</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/interface-abstract-class/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/interface-abstract-class/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-11T19:59:00+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、接口和抽象类 众所周知，我们可以使用接口来实现面向对象的抽象特性、多态特性和基于接……</summary><content type="html">&lt;h2 id="一接口和抽象类">一、接口和抽象类&lt;/h2>
&lt;p>众所周知，我们可以使用接口来实现面向对象的&lt;strong>抽象特性&lt;/strong>、&lt;strong>多态特性&lt;/strong>和&lt;strong>基于接口而非实现&lt;/strong>的设计原则，使用抽象类来实现面向对象的&lt;strong>继承&lt;/strong>特性和&lt;strong>模板设计模式&lt;/strong>等等。&lt;/p>
&lt;h3 id="1-接口和抽象类的区别">1. 接口和抽象类的区别&lt;/h3>
&lt;h4 id="抽象类">抽象类&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Logger&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Level&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Logger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Level&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">enabled&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">minPermittedLevel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Level&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">loggable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enabled&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">intValue&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">intValue&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">loggable&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">doLog&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">level&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doLog&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Level&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象类的子类：输出日志到文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FileLogger&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Writer&lt;/span> &lt;span class="n">fileWriter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">FileLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Level&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">filepath&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fileWriter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FileWriter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">filepath&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doLog&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Level&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">mesage&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 格式化level和message,输出到日志文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">fileWriter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象类的子类: 输出日志到消息中间件(比如kafka)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MessageQueueLogger&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageQueueClient&lt;/span> &lt;span class="n">msgQueueClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">MessageQueueLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Level&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MessageQueueClient&lt;/span> &lt;span class="n">msgQueueClient&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">msgQueueClient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">msgQueueClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doLog&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Level&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">mesage&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 格式化level和message,输出到消息中间件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">msgQueueClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面这段代码中，Logger是一个记录日志的抽象类，而FileLogger和MessageQueueLogger分别是两个子类，用于记录日志到文件和记录日志到消息队列。这两个子类复用了父类name、enabled、minPermittedLevel属性和log方法，但是因为这两个子类写日志的方式不同，它们又各自重写了父类中的doLog()方法。&lt;/p>
&lt;p>我们可以看到，抽象类有以下几个特性：&lt;/p>
&lt;ul>
&lt;li>抽象类不允许被实例化，只能被继承；&lt;/li>
&lt;li>抽象类可以包含属性和方法。其中方法可以包含代码实现，也可以不包含，不包含代码实现的叫抽象方法；&lt;/li>
&lt;li>子类继承抽象类，必须重写抽象类中的所有抽象方法。&lt;/li>
&lt;/ul>
&lt;h4 id="接口">接口&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Filter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RpcRequest&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">RpcException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 接口实现类：鉴权过滤器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AuthencationFilter&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Filter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RpcRequest&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">RpcException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...鉴权逻辑..
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 接口实现类：限流过滤器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RateLimitFilter&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Filter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RpcRequest&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">RpcException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...限流逻辑...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 过滤器使用Demo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// filters.add(new AuthencationFilter());
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// filters.add(new RateLimitFilter());
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filters&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">handleRpcRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RpcRequest&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Filter&lt;/span> &lt;span class="n">filter&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">filters&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">filter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RpcException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...处理过滤结果...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略其他处理逻辑...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上是一个典型的Filter接口，AuthencationFilter 和 RateLimitFilter 是接口的两个实现类，分别实现了对 RPC 请求鉴权和限流的过滤功能。&lt;/p>
&lt;p>接口具有以下特性：&lt;/p>
&lt;ul>
&lt;li>接口不能包含属性（也就是成员变量）&lt;/li>
&lt;li>接口只能声明方法，方法不能包含代码实现&lt;/li>
&lt;li>类实现接口的时候，必须实现接口中声明的所有方法&lt;/li>
&lt;/ul>
&lt;h4 id="接口和抽象类之间的区别">接口和抽象类之间的区别&lt;/h4>
&lt;p>抽象类实际上就是一种特殊的类，这种类不能被实例化，只能被子类继承。如果说抽象类是一种is-a的关系，那么接口就是has-a的关系，表示具有某种功能。&lt;/p>
&lt;h3 id="2-抽象类和接口类能解决什么编程问题">2. 抽象类和接口类能解决什么编程问题？&lt;/h3>
&lt;p>&lt;strong>既然继承本身能实现代码复用，抽象类有什么其他存在的意义吗？&lt;/strong>&lt;/p>
&lt;p>我们改造一下一开始的Logger类，具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 父类：非抽象类，就是普通的类. 删除了log(),doLog()，新增了isLoggable().
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Logger&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Level&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Logger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Level&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...构造函数不变，代码省略...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isLoggable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">loggable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enabled&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">intValue&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">intValue&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">loggable&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 子类：输出日志到文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FileLogger&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Writer&lt;/span> &lt;span class="n">fileWriter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">FileLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Level&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">filepath&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...构造函数不变，代码省略...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Level&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">mesage&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isLoggable&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 格式化level和message,输出到日志文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">fileWriter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 子类: 输出日志到消息中间件(比如kafka)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MessageQueueLogger&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageQueueClient&lt;/span> &lt;span class="n">msgQueueClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">MessageQueueLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Level&lt;/span> &lt;span class="n">minPermittedLevel&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MessageQueueClient&lt;/span> &lt;span class="n">msgQueueClient&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...构造函数不变，代码省略...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Level&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">mesage&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isLoggable&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 格式化level和message,输出到消息中间件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">msgQueueClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，这个代码虽然达到了代码复用的目的，但是以及无法使用多态特性了。所以我们为了能够实现多态，要在Logger类中定义一个log方法，然后子类重写log方法以达到多态的目的，但是这样实现太不“优雅”了，主要原因有以下几点：&lt;/p>
&lt;ul>
&lt;li>影响代码可读性，如果不了解Logger的设计思想，那么很难理解这里为什么会定义一个空的log方法&lt;/li>
&lt;li>抽象类会强制子类重写log方法，防止遗漏&lt;/li>
&lt;li>Logger类如果不是抽象类，是可以被实例化的&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>下面说说为什么需要接口，接口能够解决什么编程问题？&lt;/strong>&lt;/p>
&lt;p>抽象类更多的是为了代码复用，而接口更侧重于解耦。接口是对行为的一种抽象，调用者只需要关注抽象的接口，而不需要了解具体的实现，实现了约定和实现相分离，降低了代码间的耦合性。&lt;/p>
&lt;p>&lt;strong>如何决定该用抽象类还是接口？&lt;/strong>&lt;/p>
&lt;p>如果我们要表示一种 &lt;code>is-a&lt;/code> 的关系，并且是为了解决代码复用的问题，我们就用抽象类；如果我们要表示一种 &lt;code>has-a&lt;/code> 关系，并且是为了解决抽象而非代码复用的问题，那我们就可以使用接口。&lt;/p>
&lt;p>从类的继承层次上来看，抽象类是一种自下而上的设计思路，先有子类的代码重复，然后再抽象成上层的父类（也就是抽象类）。而接口正好相反，它是一种自上而下的设计思路。我们在编程的时候，一般都是先设计接口，再去考虑具体的实现。&lt;/p>
&lt;h2 id="二基于接口而非实现编程">二、基于接口而非实现编程&lt;/h2>
&lt;p>在面向对象编程中，有一条非常经典的设计原则，那就是“&lt;strong>基于接口而非实现编程&lt;/strong>”，主要有以下几点：&lt;/p>
&lt;ul>
&lt;li>函数的命名不能暴露任何实现细节&lt;/li>
&lt;li>封装具体的实现细节&lt;/li>
&lt;li>为实现类定义抽象的接口，具体的实现类都依赖统一的接口定义，使用者依赖接口而非具体的实现类编程&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">面向对象编程01：面向对象与面向过程</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/design-patterns/object-oriented-procedural/"/><id>https://kiwi4814.github.io/posts/2022/design-patterns/object-oriented-procedural/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-03-08T22:40:15+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">理论一：什么是面向对象？ 面向对象编程和面向对象编程语言的区别？ 面向对象是一种编程风格……</summary><content type="html">&lt;h2 id="理论一什么是面向对象">理论一：什么是面向对象？&lt;/h2>
&lt;p>面向对象编程和面向对象编程语言的区别？&lt;/p>
&lt;blockquote>
&lt;p>面向对象是一种编程风格，面向对象编程语言是支持类或者对象的语法机制，使用面向对象语言能够很方便的实现面向对象编程。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>核心概念&lt;/strong>： 类（class）和对象（object）
&lt;strong>四大特性&lt;/strong>：封装、抽象、继承、多态&lt;/p>
&lt;p>UML（Unified Model Language），统一建模语言。&lt;/p>
&lt;p>&lt;a href="https://github.com/gdhucoder/Algorithms4/blob/master/designpattern/pic/umlcheatsheet.jpg">Algorithms4/umlcheatsheet.jpg at master · gdhucoder/Algorithms4 (github.com)&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/gdhucoder/Algorithms4/master/designpattern/pic/umlcheatsheet.jpg" alt="img">&lt;/p>
&lt;h2 id="理论二封装抽象继承多态分别可以解决哪些编程问题">理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？&lt;/h2>
&lt;h3 id="封装encapsulation">封装（Encapsulation）&lt;/h3>
&lt;p>使用钱包的例子，id和createTime在初始化的时候生成，同时只提供增加和修改余额的方法。&lt;/p>
&lt;p>封装的意义：可控、通过有限的方法暴露必要的属性，一方面可以控制权限和保护数据一致性，另一方面也更加易于使用。&lt;/p>
&lt;h3 id="抽象abstraction">抽象（Abstraction）&lt;/h3>
&lt;p>过滤非必要信息：抽象只关注功能点不关注实现过程&lt;/p>
&lt;p>很多设计原则都体现了抽象的思想，比如开闭原则、基于接口而非实现编程&lt;/p>
&lt;p>定义接口名称的时候要有抽象思维，不要在方法定义中暴露太多的实现细节&lt;/p>
&lt;h3 id="继承inheritance">继承（inheritance）&lt;/h3>
&lt;p>符合人类的认知，但是过多的继承会导致代码可读性、可维护性变差。所以很多人觉得继承是一种反模式。比如”多用组合少用继承“这一设计思想。&lt;/p>
&lt;h3 id="多态polymorphism">多态（polymorphism）&lt;/h3>
&lt;p>多态的定义：子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现。&lt;/p>
&lt;p>多态的前提是编程语言提供的特殊语法机制——&lt;strong>继承加方法重写&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>父类对象可以引用子类对象，DynamicArray dynamicArray = new SortedDynamicArray();&lt;/li>
&lt;li>支持继承&lt;/li>
&lt;li>支持子类重写父类的方法&lt;/li>
&lt;/ul>
&lt;p>除了这种方式外，还有两种常见的方式 —— 一是利用接口类语法，二是duck-typing语法。&lt;/p>
&lt;p>**多态能解决的问题：**提高代码的可扩展性和复用性。&lt;/p>
&lt;h2 id="理论三面向对象和面向过程">理论三：面向对象和面向过程&lt;/h2>
&lt;p>&lt;strong>发展流程&lt;/strong>：面向过程 -》 面向对象 -》 函数式编程&lt;/p>
&lt;p>其中粗略的来讲，面向过程已经几乎过时，面向对象是当前主流的设计思想，而函数式编程目前还没有被广泛接受。&lt;/p>
&lt;p>在实际工作中，很多人只是在用面向对象语言实现面向过程的编码罢了。&lt;/p>
&lt;p>&lt;strong>抛出问题&lt;/strong>：&lt;/p>
&lt;p>（1）什么是面向过程编程与面向过程编程语言？&lt;/p>
&lt;p>（2）面向对象编程相比面向过程编程有哪些优势？&lt;/p>
&lt;p>（3）为什么说面向对象编程语言比面向过程编程语言更高级？&lt;/p>
&lt;p>（4）有哪些看似是面向对象实际是面向过程风格的代码？&lt;/p>
&lt;p>（5）在面向对象编程中，为什么容易写出面向过程风格的代码？&lt;/p>
&lt;p>（6）面向过程编程和面向过程编程语言就真的无用武之地了吗？&lt;/p>
&lt;p>（1）&lt;strong>定义&lt;/strong>：&lt;strong>面向过程编程也是一种编程范式，以过程（可以理解为方法、函数、操作）作为组织代码的基本单元，以数据（可以理解为成员变量、属性）与方法相分离为主要的特点。&lt;/strong>&lt;/p>
&lt;p>（2）&lt;strong>优势&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>大规模复杂程序的开发（对于简单编程来说，面向过程反倒更有优势；对于大规模开发流程来说，面向对象编程提供了一种更加清晰的、更加模块化的代码组织方式）&lt;/li>
&lt;li>OOP风格的代码更易复用、易扩展、易维护 —— 也就是四大特性：封装、抽象、继承、多态&lt;/li>
&lt;li>OOP语言更加人性化、更加高级、更加智能&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在文章中我讲到，面向对象编程比面向过程编程，更加容易应对大规模复杂程序的开发。但像 Unix、Linux 这些复杂的系统，也都是基于 C 语言这种面向过程的编程语言开发的，你怎么看待这个现象？这跟我之前的讲解相矛盾吗？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用任何一个编程语言编写的程序，最终执行上都要落实到CPU一条一条指令的执行（无论通过虚拟机解释执行，还是直接编译为机器码），CPU看不到是使用何种语言编写的程序。对于所有编程语言最终目的是两种：提高硬件的运行效率和提高程序员的开发效率。然而这两种很难兼得。
C语言在效率方面几乎做到了极致，它更适合挖掘硬件的价值，如：C语言用数组char a[8]，经过编译以后变成了（基地址＋偏移量）的方式。对于CPU来说，没有运算比加法更快，它的执行效率的算法复杂度是O(1)的。从执行效率这个方面看，开发操作系统和贴近硬件的底层程序，C语言是极好的选择。
C语言带来的问题是内存越界、野指针、内存泄露等。它只关心程序飞的高不高，不关心程序猿飞的累不累。为了解脱程序员，提高开发效率，设计了OOP等更“智能”的编程语言，但是开发容易毕竟来源于对底层的一层一层又一层的包装。完成一个特定操作有了更多的中间环节, 占用了更大的内存空间, 占用了更多的CPU运算。从这个角度看，OOP这种高级语言的流行是因为硬件越来越便宜了。我们可以想象如果大众消费级的主控芯片仍然是单核600MHz为主流，运行Android系统点击一个界面需要2秒才能响应，那我们现在用的大部分手机程序绝对不是使用JAVA开发的，Android操作系统也不可能建立起这么大的生态。&lt;/p>
&lt;/blockquote>
&lt;h2 id="理论四哪些代码看似是面向对象实际是面向过程的">理论四：哪些代码看似是面向对象，实际是面向过程的？&lt;/h2>
&lt;p>这一章节主要回答的是上一章节的后三个问题。&lt;/p>
&lt;h3 id="三个典型的看似是面向对象风格但其实是面向编程的代码案例">三个典型的看似是面向对象风格但其实是面向编程的代码案例&lt;/h3>
&lt;h4 id="1-滥用gettersetter方法">1. 滥用getter、setter方法&lt;/h4>
&lt;p>不推荐使用Lombok这样的插件，它违反了面向对象编程的封装特性。&lt;/p>
&lt;p>比如一个购物车类，有三个属性：数量、价格和购物车列表。&lt;/p>
&lt;p>数量和价格定义getter和setter方法明显违反了面向对象的封装特性，items即使只暴露getter方法也是有问题的，因为上层代码拿到list之后仍然可以对购物车中的数据做修改，比如像下面这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ShoppingCart&lt;/span> &lt;span class="n">cart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShoppCart&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getItems&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">clear&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 清空购物车
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是如果不提供getter方法实际上是看不到购物车的，这时候怎么办呢？解决方法也很简单，以Java为例,&lt;strong>我们可以通过 Java 提供的 Collections.unmodifiableList() 方法，让 getter 方法返回一个不可被修改的 UnmodifiableList 集合容器，而这个容器类重写了 List 容器中跟修改数据相关的方法，比如 add()、clear() 等方法。一旦我们调用这些修改数据的方法，代码就会抛出 UnsupportedOperationException 异常，这样就避免了容器中的数据被修改。具体的代码实现如下所示。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShoppingCart&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略其他代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShoppingCartItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getItems&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unmodifiableList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">items&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UnmodifiableList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">UnmodifiableCollection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">implements&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UnsupportedOperationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">clear&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UnsupportedOperationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略其他代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ShoppingCart&lt;/span> &lt;span class="n">cart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShoppingCart&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShoppingCartItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getItems&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clear&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//抛出UnsupportedOperationException异常
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过这样也是有风险的，因为即使无法修改List，也可以修改List中的item，这个问题可以留待日后讨论。&lt;/p>
&lt;p>&lt;strong>总结：&lt;/strong> 在设计实现类的时候，除非真的需要，尽量不要给属性定义setter方法。除此之外，尽管getter方法相对setter方法要安全些，但是如果返回的是集合容器（比如List），也要防范集合内部数据被修改的风险。&lt;/p>
&lt;h4 id="2-滥用全局变量和全局方法">2. 滥用全局变量和全局方法&lt;/h4>
&lt;blockquote>
&lt;p>在面向对象编程中，常见的全局变量有单例类对象、静态成员变量、常量等，常见的全局方法有静态方法。单例类对象在全局代码中只有一份，所以，它相当于一个全局变量。静态成员变量归属于类上的数据，被所有的实例化对象所共享，也相当于一定程度上的全局变量。而常量是一种非常常见的全局变量，比如一些代码中的配置参数，一般都设置为常量，放到一个 Constants 类中。静态方法一般用来操作静态变量或者外部数据。你可以联想一下我们常用的各种 Utils 类，里面的方法一般都会定义成静态方法，可以在不用创建对象的情况下，直接拿来使用。静态方法将方法与数据分离，破坏了封装特性，是典型的面向过程风格。&lt;/p>
&lt;/blockquote>
&lt;p>下面以Constants和Utils这两种常见的类为例，说说全局变量和全局方法的利与弊。&lt;/p>
&lt;h5 id="constants">Constants&lt;/h5>
&lt;p>定义一个又大又全的常量类不是一个很好的设计思路，主要原因有：&lt;/p>
&lt;ul>
&lt;li>影响代码的可维护性，增加了代码冲突的概率&lt;/li>
&lt;li>增加代码的编译时间，对于比较大的工程来说，编译一次项目花费的时间可能会很长&lt;/li>
&lt;li>影响代码的复用性&lt;/li>
&lt;/ul>
&lt;p>如何解决？&lt;/p>
&lt;ul>
&lt;li>其一是按照功能进行拆分，比如MySQLConstants、RedisConstants等等&lt;/li>
&lt;li>其二是不单独设计Constants常量类，而是直接定义在使用的类中，这样也提高了类设计的内聚性和代码的复用性&lt;/li>
&lt;/ul>
&lt;h5 id="utils">Utils&lt;/h5>
&lt;p>Utils类我们一般会放一些很常用的操作，比如URL拼接、JSON数据的处理等等，这些方法不需要共享任何数据，不需要定义任何属性，所以是彻彻底底的面向过程的编程风格。在这种情况下，我们是可以使用Utils类的，只是要避免滥用，要避免不加思考的随意定义Utils类。&lt;/p>
&lt;p>此外，与常量类一样，尽量针对不同的功能设计不同的Utils类，比如FileUtils、IOUtils、StringUtils、UrlUtils等。&lt;/p>
&lt;h4 id="3-定义数据和方法分离的类">3. 定义数据和方法分离的类&lt;/h4>
&lt;blockquote>
&lt;p>我们再来看最后一种面向对象编程过程中，常见的面向过程风格的代码。那就是，数据定义在一个类中，方法定义在另一个类中。你可能会觉得，这么明显的面向过程风格的代码，谁会这么写呢？实际上，如果你是基于 MVC 三层结构做 Web 方面的后端开发，这样的代码你可能天天都在写。&lt;/p>
&lt;/blockquote>
&lt;p>传统的MVC架构（前后端分离的模式）分为Controller层、Service层、Repository层（Dao层），在每一层中也会定义相应的VO、Dto、Entity等。一般情况下，VO、Dto只会定义数据不会定义方法，所有操作都在对应的controller、Service以及Dao中，而这就是典型的面向过程的编程风格。&lt;/p>
&lt;p>实际上，这种开发模式叫做基于贫血模型的开发模式。&lt;/p>
&lt;h3 id="为什么在面向对象编程中容易写出面向过程风格的代码">为什么在面向对象编程中容易写出面向过程风格的代码？&lt;/h3>
&lt;ul>
&lt;li>面向过程符合流程化的思维模式，而面向对象是自底向上的，将任务进行拆解和组装&lt;/li>
&lt;li>面向对象设计起来比较难，而很多工程师在开发的过程中更倾向于不动脑子的方式去实现需求&lt;/li>
&lt;/ul>
&lt;h3 id="面向过程及面向过程的编程语言真的再无用武之地了吗">面向过程及面向过程的编程语言真的再无用武之地了吗？&lt;/h3>
&lt;ul>
&lt;li>在一些微小程序、数据处理和算法中，脚本式的面向过程的编程风格更合适&lt;/li>
&lt;li>面向过程是面向对象的基础，即使在面向对象语言中，类里面每个方法的实现过程就是面向过程的&lt;/li>
&lt;li>我们的最终目的是写出易维护、易读、易复用的高质量代码，所以这两种编程风格并不是非黑即白的。&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/series/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" term="阅读笔记" label="阅读笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">从零开始搭建个人博客01：准备工作（施工中...）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/hugo-github-pages/"/><id>https://kiwi4814.github.io/posts/2022/hugo-github-pages/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2022-01-03T22:10:15+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">很久以来我的电子笔记都是通过本地化文件来管理的，中间也经历过很多痛苦的过程，Ever……</summary><content type="html">&lt;p>很久以来我的电子笔记都是通过本地化文件来管理的，中间也经历过很多痛苦的过程，Evernote、Notion、Typora以及目前主力使用的Obsidian，但是我发现这些管理方式都有着比较致命的缺点：知识过于碎片化以及过于依赖我的自制力。&lt;/p>
&lt;p>卡片式笔记法固然优秀，但是目前里面的很多文字都是随意写就，力求自己能够看懂，搭建自己的知识体系足够，但是想要分享的话却是难上加难。基于以上种种，有了搭建一个个人博客的想法，一方面尝试着分享一下自己粗浅的知识储备，另一方面借此机会学习一下这个过程。&lt;/p>
&lt;p>因而有了这篇文章，或者说这个系列的文章，希望能够让看到这篇文章的人也能学会如何搭建自己的个人博客。&lt;/p>
&lt;p>本文为此系列的第一章，主要介绍下我们需要预先准备的账号、需要了解的知识以及需要安装的工具。&lt;/p>
&lt;h2 id="一github简介">一、Github简介&lt;/h2>
&lt;p>如果你是一个程序员或者相关从业者，跳过此节即可。&lt;/p>
&lt;h3 id="1-github是啥">1. GitHub是啥？&lt;/h3>
&lt;p>&lt;strong>GitHub&lt;/strong>是通过Git进行版本控制的软件源代码托管服务平台，简单来说就是一个帮你管理代码以及代码历史记录的平台，很多教程网上特别多，&lt;a href="https://www.zhihu.com/question/21669554">适合新手的&lt;/a>也有很多，这里不作过多的介绍了，我们需要的是注册一个github账号，才能进行接下来的一些操作。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>打开&lt;a href="https://github.com/">Github官网&lt;/a>，然后点击右上角&lt;code>Sign Up&lt;/code>，如下图所示按照提示填写信息操作即可：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/github1.png" alt="github1">&lt;/p>
&lt;p>创建完之后会有一些初始化的过程，可以选择跳过，也可以根据需要勾选一些配置和选项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>账号注册后登录系统，点击右上角头像，在下拉选项中找到 &lt;code>your repositories&lt;/code>并打开，然后点击&lt;code>new&lt;/code>创建一个仓库：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/github2.png" alt="github2">&lt;/p>
&lt;p>点击&lt;code>new&lt;/code>创建一个新的仓库：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/github3.png" alt="github3">&lt;/p>
&lt;p>我们先来建立一个普通仓库：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/github4.png" alt="github4">&lt;/p>
&lt;p>创建后自动跳转到项目主页，如果你没勾选&lt;code>Add a README file&lt;/code>，那么看到的应该是如下页面，这里介绍了git的一些主要命令和用法，建议可以按照提示操作一下。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/github5.png" alt="github5">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="2-github-pages">2. Github Pages&lt;/h3>
&lt;p>下面我们来建立另外一个仓库，步骤与第一个一样，不同的是仓库名称有所区别。仓库名称固定为&lt;code>你的用户名+.github.io&lt;/code>，比如我上面截图的用户名是&lt;code>tsuchinoe&lt;/code>，那么我仓库的名称就应该写成&lt;code>tsuchinoe.github.io&lt;/code>&lt;strong>（注意这次勾选一下&lt;code>Add a README file&lt;/code>）&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/github6.png" alt="">&lt;/p>
&lt;p>仓库创建完后，自动跳转到项目主页，可以看到仓库中已经存在一个&lt;code>README.md&lt;/code>，并且里面的内容中已经自动填充了仓库名以及仓库简介。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/github7.png" alt="github7">&lt;/p>
&lt;p>接下来我们试试在浏览器中直接输入仓库名称，比如我直接在浏览器地址栏输入&lt;code>tsuchinoe.github.io&lt;/code>，会发现这个地址是可以打开的，而且里面的内容就是刚刚创建好的&lt;code>README.md&lt;/code>里面的内容，这就是Github Pages。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/github8.png" alt="github8">&lt;/p>
&lt;h3 id="3-git的简单用法">3. Git的简单用法&lt;/h3>
&lt;h2 id="二安装hugo">二、安装Hugo&lt;/h2>
&lt;h2 id="三购买自己的域名可选">三、购买自己的域名（可选）&lt;/h2></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2022/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" term="从零开始搭建个人博客" label="从零开始搭建个人博客"/><category scheme="https://kiwi4814.github.io/tags/2022/01/hugo/" term="Hugo" label="Hugo"/><category scheme="https://kiwi4814.github.io/tags/2022/01/github/" term="Github" label="Github"/><category scheme="https://kiwi4814.github.io/tags/2022/01/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" term="个人博客" label="个人博客"/></entry><entry><title type="text">windows软件不完全推荐03：工具篇（施工中...）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/windows-software-tools/"/><id>https://kiwi4814.github.io/posts/2021/windows-software-tools/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-12-29T22:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本篇会放一些使用频率没那么高但也同样优秀的软件。也会按照第一章那样进行归类，同时也会……</summary><content type="html">&lt;p>本篇会放一些使用频率没那么高但也同样优秀的软件。也会按照第一章那样进行归类，同时也会介绍一些前文提到的同类软件。&lt;/p>
&lt;p>增加了关键词的词条，可以按照想要的功能检索。&lt;/p>
&lt;h3 id="截图类">截图类&lt;/h3>
&lt;h4 id="snipastehttpszhsnipastecom">&lt;a href="https://zh.snipaste.com/">Snipaste&lt;/a>&lt;/h4>
&lt;h3 id="文件管理类">文件管理类&lt;/h3>
&lt;h4 id="adrenamer">AdRenamer&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="handshaker">HandShaker&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="synergyhttpssymlesscomsynergy">&lt;a href="https://symless.com/synergy">Synergy&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="faststone">FastStone&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="beyond-comparehttpwwwscootersoftwarecom">&lt;a href="http://www.scootersoftware.com/">Beyond Compare&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="wirelesskeyviewhttpwwwnirsoftnetutilswireless_keyhtml">&lt;a href="http://www.nirsoft.net/utils/wireless_key.html">WirelessKeyView&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="windows-terminalhttpswwwmicrosoftcomzh-cnpwindows-terminal9n0dx20hk701">&lt;a href="https://www.microsoft.com/zh-cn/p/windows-terminal/9n0dx20hk701">Windows Terminal&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="迅雷httpsxl11xunleicom">&lt;a href="https://xl11.xunlei.com/">迅雷&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：不用介绍了，不过迅雷已经不是迅雷极速版/尊享版那个年代的良心迅雷了，装软件喜欢一路下一步的慎装。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：额外安装一个迅雷的目的是，有些资源真的用什么都下不动，但是迅雷可以有速度（玄学），所以我会额外装一个以备不时之需。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：下载最新的安装包，安装时勾选掉所有的捆绑项目，安装后打开设置，取消所有的开机启动、接管设置、文件关联等配置项，然后就可以关掉了。&lt;/li>
&lt;/ul>
&lt;h4 id="picgo">PicGo&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="heu-kms-activator">HEU KMS Activator&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="directx-repair">DirectX Repair&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h3 id="电子书">电子书&lt;/h3>
&lt;p>如果你喜欢看电子书，那么你肯定对epub、mobi、azw3，甚至CBZ、CBR这些格式都不陌生。其中epub为开放标准，mobi和azw3主要是亚马逊在用。这几种格式的电子书相比于远古时期的text，支持更精细的排版、脚本，公式，矢量图形等，是目前主流的几种电子书格式。&lt;/p>
&lt;p>下面是我常用的一些相关的软件：&lt;/p>
&lt;h4 id="calibrehttpscalibre-ebookcom">&lt;a href="https://calibre-ebook.com/">calibre&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：calibre是一个自由开源的电子书软体套装，可以用来组织、存放、以及管理电子书，支援大多数的电子书格式。 同时也支援与许多流行的电子书阅读器进行同步，並可能在DRM的限制下转换电子书的格式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：Kindle最佳伴侣。可以在电脑上管理和增加Kindle书籍，个性化修改书籍封面和内容，转换格式（epub、mobi、azw3），当然也可以直接当作电子书阅读器使用，是一个功能非常齐全的电子书管理器。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/wt9UqNFAC4pjaRI.png" alt="image-20211128202259395">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：使用可以参照&lt;a href="https://sspai.com/post/43843">最强大的本地电子书管理工具：Calibre 使用指南&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>关键词&lt;/strong>：电子书管理、Kindle、epub、mobi、azw3&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="kindle-comic-converterhttpskcciosphere">&lt;a href="https://kcc.iosphe.re/">Kindle Comic Converter&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Kindle Comic Converter (KCC) 是一个可以把 PNG、JPG、GIF、CBZ、CBR 和 CB7 格式的漫画转换成 EPUB 或 MOBI 格式电子书的免费开源软件，制作 E-Ink 设备适用的电子书从此轻而易举。KCC 最初是专门为 Kindle 所开发的，但是现在对 EPUB 3.0 和 CBZ 也有效。此外 KCC 在处理图片时会针对电子墨水显示屏进行全面优化。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：如果你喜欢在Kindle看漫画，通常我们网上找到的资源是以多张图片压缩包的形式呈现给我们的，一般我会使用此软件来将图片转换为mobi格式的漫画。针对不同的Kindle版本优化分辨率，根据文件夹自动分章节等等，非常好用。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：参考&lt;a href="https://bookfere.com/post/164.html">最简单的漫画转换工具&lt;/a>。实际使用的时候注意不要一次转换太多章节，容易失败。&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：Kindle，漫画&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：亚马逊官方的Kindle Comic Creator，使用繁琐，不推荐。&lt;/li>
&lt;/ul>
&lt;h4 id="comicshttpswwwmicrosoftcomzh-cnpcomics9nblgggzlsmqactivetabpivotoverviewtab">&lt;a href="https://www.microsoft.com/zh-cn/p/comics/9nblgggzlsmq?activetab=pivot:overviewtab">Comics++&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：优秀的漫画阅读器，支持ZIP/CBZ、RAR/CBR、7Z/CB7、PDF和文件夹图像文件。此程序由C++/CX语言写成，操作简单，速度敏捷，功能具备。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：在PC上按照文件夹读漫画的时候会选择用它。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费UWP&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：打开后选择你要看的漫画所在文件夹或者压缩包即可。&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：漫画阅读器&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.cdisplayex.com/">CBR Reader（前身Comic reader）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="aria">Aria&lt;/h4>
&lt;h3 id="影音工具">影音工具&lt;/h3>
&lt;p>此部分适合家里有NAS的小伙伴。&lt;/p>
&lt;h4 id="tmmhttpswwwtinymediamanagerorg">&lt;a href="https://www.tinymediamanager.org/">TMM&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：tinyMediaManager作为一款电影信息刮削神器，目前支持Linux、Windows、Mac三个平台。而tinyMediaManager是基于Java开发的，需要Java 1.8以上版本的运行时环境支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：如果你喜欢自己打造属于自己的电影墙，你肯定会爱上它，支持从各大数据库刮削电影和电视剧对的海报、简介、分集介绍等等。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/ir9kWldhb35v6LF.png" alt="image-20211128182340967">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：使用免费的4.0.6版本即可&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：选择自己收藏电影或者电视剧的文件夹，然后在主界面刮削即可，可以自定义从哪个数据库进行刮削。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>关键词&lt;/strong>：刮削，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="kodi">Kodi&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="jellyfinhttpsjellyfinorg">&lt;a href="https://jellyfin.org/">jellyfin&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Jellyfin 是一个自由的软件媒体系统，用于控制和管理媒体和流媒体。本质就是用照片墙的形式展示你自己的电影、电视剧等多媒体数据，并提供多平台访问播放服务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：搭配群晖QuickConnect、公网IP或者其他内网穿透软件就可以在任何地方观看你在家里存储的电影电视了，最终实现的效果可以参考下图所示。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/aR5Qmp3dYskSLj7.jpg" alt="image-20211128184640304 (1)">&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/reO3KygQYZtVxL5.png" alt="image-20211128184015350">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：折腾&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>关键词&lt;/strong>：群晖，NAS，海报墙，家庭影院&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.plex.tv/">plex&lt;/a>，&lt;a href="https://emby.media/">emby&lt;/a>，&lt;a href="https://jellyfin.org/">Jellyfin&lt;/a>一般我们并称家庭影院三剑客，其中Plex体验最好但也最贵，emby和jellyfin同出一源，Jellyfin为emby的开源免费版。另外两个不再做过多的额外介绍了。&lt;/p>
&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/series/2021/12/windows%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8E%A8%E8%8D%90/" term="windows软件不完全推荐" label="windows软件不完全推荐"/><category scheme="https://kiwi4814.github.io/tags/2021/12/windows/" term="windows" label="windows"/><category scheme="https://kiwi4814.github.io/tags/2023/02/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/></entry><entry><title type="text">windows软件不完全推荐02：办公篇</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/windows-software-work/"/><id>https://kiwi4814.github.io/posts/2021/windows-software-work/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-12-28T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">其实大部分行业我都不太了解，所以这里也就只能放放一些我认为比较通用的办公软件了。 办公……</summary><content type="html">&lt;p>&lt;em>&lt;strong>其实大部分行业我都不太了解，所以这里也就只能放放一些我认为比较通用的办公软件了。&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="办公软件">办公软件&lt;/h2>
&lt;h3 id="零一些在线网站">零：一些在线网站&lt;/h3>
&lt;p>&lt;a href="https://tophub.today/">今日热榜&lt;/a>：嗯，每天摸鱼看热搜&lt;/p>
&lt;p>&lt;a href="https://www.todaybing.com/">必应壁纸&lt;/a>：必应4K壁纸&lt;/p>
&lt;p>&lt;a href="https://hellogithub.com/">Github热门开源项目&lt;/a>：发现好玩的好用的项目&lt;/p>
&lt;h3 id="一工具箱">一、工具箱&lt;/h3>
&lt;h4 id="万彩办公大师httpwwwwofficeboxcomabouthtml">&lt;a href="http://www.wofficebox.com/about.html">万彩办公大师&lt;/a>&lt;/h4>
&lt;p>用的不多，但是功能齐全，一般我U盘里会放一个完整离线版的。这里贴一个官网的介绍还有软件首页的截图吧。&lt;/p>
&lt;blockquote>
&lt;p>万彩办公大师OfficeBox是一款由广州万彩信息技术有限公司研发的免费办公工具软件超级套装，几乎可以满足日常各种办公工具需求。它内置了60多款强大的，无任何广告及插件的绿色办公组件，如PDF工具集（PDF转换（PDF 转 Word/Excel/PPT， PDF 合并分割水印）；文档/音视频/图片转换工具集；OCR工具集；屏幕录制工具集；图片处理工具集；文件处理工具集等。所有的套装工具不需要安装，直接可以绿色加载启动，省去了用户为安装各种办公软件而寻找工具、安装及卸载的麻烦。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211127231339424.png" alt="image-20211127231339424">&lt;/p>
&lt;h3 id="二office全家桶">二、Office全家桶&lt;/h3>
&lt;p>说到办公，肯定离不开Office三件套，对于微软的Microsoft Office版本而言，目前最常用的应该是Office 2013，Office 2016，Office 2019以及随Windows11发布的Office 2021。&lt;/p>
&lt;p>这里推荐大家直接使用Microsoft 365，如果有熟悉的小伙伴或者家人一起使用可以选择Microsoft 365 家庭版，最多支持6个人使用并且每个人附赠1T的OneDrive空间，官网购买即可，还是挺香的。&lt;/p>
&lt;p>白嫖的话，建议如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一种，如果你有一个&lt;strong>国外EDU邮箱&lt;/strong>的话，可以来&lt;a href="https://www.microsoft.com/zh-cn/education/products/office">这里&lt;/a>申请Office 365 教育版，同样含有1TB的OneDrive，但这里就不建议存储太过私人的东西了哈，可以当中转站使用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二种，&lt;strong>安装Office 2019&lt;/strong>使用。在&lt;a href="https://msdn.itellyou.cn/">这里&lt;/a>下载官方原版镜像（不建议下载网上的各种私人破解版），然后使用KMS工具（例如&lt;a href="https://github.com/zbezj/HEU_KMS_Activator">HEU KMS Activator&lt;/a>）或者用&lt;a href="https://cmwtat.cloudmoe.com/cn.html">云萌&lt;/a>进行破解激活；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第三种，使用WPS全家桶（可以找WPS2019的专业版）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>除此以外，推荐一些与Office相关的套件：&lt;/p>
&lt;h4 id="islidehttpswwwislidecc">&lt;a href="https://www.islide.cc/">iSlide&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：iSlide是一款基于PowerPoint的一键化效率插件，提供了便捷的排版设计工具，能够帮助使用者快速进行字体统一、色彩统一、矩形/环形布局、批量裁剪图片等操作。具备8个资源库，包括主题库、色彩库、图示库、智能图表库、图标库、图片库和插图库，所有资源即插即用。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：做PPT的时候不需要关注配色、字体、图标库什么的了，只需要关注内容就好了，剩下的iSlide几乎都可以帮你搞定。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>，而且是最讨厌的订阅制！&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;a href="https://sspai.com/post/42773">如何快速设计出令人满意的 PPT？用 iSlide 四步帮你搞定&lt;/a>&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="http://meihua.docer.com/">PPT美化大师&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="方方格子httpwwwffcellcom">&lt;a href="http://www.ffcell.com/">方方格子&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：方方格子 Excel工具箱是一款Excel工具箱软件。上百个实用功能：文本处理、批量录入、删除工具、合并转换、重复值工具、数据对比、高级排序、颜色排序、合并单元格排序、 聚光灯、宏收纳箱等。另外还有会员工具：汇总拆分（含汇总大师）、导航、图片专题工具、快查快录、身份证工具、拼音笔画、打印专题、邮件群发、翻译、财务工具等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：集成了一些Excel快捷操作，每个人的使用习惯不同，可以根据官网或者其他论坛的介绍先看一眼是否有心水的快捷操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>使用，但也有很多工具是付费的，深度使用的话可以考虑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后会额外多出方方格子和DIY工具箱两栏&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/97WVstQzOa1e6Zh.png" alt="image-20211206234550340">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="datacharts-for-excel-34httpsclubexcelhomenetthread-1310268-1-1html">&lt;a href="https://club.excelhome.net/thread-1310268-1-1.html">&lt;strong>DataCharts For Excel 3.4&lt;/strong>&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：初衷是将百度的Echarts搬到Excel中，让不懂的开发的人也开始使用绚丽的图表，但因为只有业余时间且对js不熟悉，搬的过程很吃力，进展比较慢。关于Echarts可访问百度浏览图表效果。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：网络大神自主研发，安全性和稳定性不敢保障，抛个链接，自行判断。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;/ul>
&lt;h4 id="小恐龙公文排版助手httpsgwxkonglongcom">&lt;a href="https://gw.xkonglong.com/#/">小恐龙公文排版助手&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：根据《党政机关公文格式国家标准》(GB/T 9704—2012)的格式要求，快速设置页面版式、快速设置常用文字格式、插入常用符号、版头、版记、公文页码、红线等。支持对文字的快速排版，中文首行缩进2字符、删除空白，断句重排等。支持对文档盖章、可以在文档同目录下生成 PDF/ doc /图片 格式的副本。可广泛用于各类规范文本的排版。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：按照指引安装后会在功能菜单最右边出现公文菜单。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/gmA42kr8VyJqvYa.png" alt="image-20211207223022212">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="三pdf处理">三、PDF处理&lt;/h3>
&lt;p>上面的&lt;strong>万彩办公大师&lt;/strong>里其实已经有很多针对PDF文件的处理了，如果还是不能满足需求的话，这里推荐几个更专业的软件。&lt;/p>
&lt;h4 id="福昕pdf编辑器httpseditorfoxitsoftwarecn万兴pdf专家httpspdfwondersharecn">&lt;a href="https://editor.foxitsoftware.cn/">福昕PDF编辑器&lt;/a>、&lt;a href="https://pdf.wondershare.cn/">万兴PDF专家&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：福昕PDF编辑器一款简单方便的PDF编辑器。 主要功能及优势：轻松修改PDF文档内容，以所见即所得的方式实现可靠、方便的编辑，无需了解PDF格式知识。此外，PDF Element（国内叫万兴PDF专家）几乎和福昕PDF编辑器功能一样，要用的话二选一即可。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：大学时候不想用笨重的Adobe阅读器的时候一直在用福昕，后来需要对PDF进行编辑的时候，自然而然也会想到他们家的编辑器。现在PDF编辑器的软件非常多，国内比较有名的就是福昕和万兴了。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：两款软件都是&lt;font>付费&lt;/font>的，都很贵，&lt;del>但是破解版也都很多&lt;/del>。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.adobe.com/acrobat/acrobat-pro.html">Adobe Acrobat Pro DC&lt;/a> 、&lt;a href="https://pdf.wondershare.cn/">PDF Element&lt;/a>、&lt;a href="https://www.pdfshaper.com/">PDFShaper&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="pdf24-toolshttpstoolspdf24orgzh">&lt;a href="https://tools.pdf24.org/zh/">PDF24 Tools&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：PDF24 Tools是一个免费且易于使用的&lt;strong>线上PDF工具&lt;/strong>，一共收录28个PDF功能，包括很常见的PDF转档、合并、编辑、压缩、加密解密、旋转、分割页面、加入浮水印或页码、提取图片、比较PDF文件、注释等等，PDF24 Tools另一特色是已经内建包括中文在内等多国语言，操作起来也很简单。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：这款工具最大的几个优势：①线上工具，打开网页就能直接用；②完全免费，允许商业化使用；③不想线上的话安装客户端也支持&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211207224040240.png" alt="image-20211207224040240">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：各类线上工具，如：&lt;a href="https://easypdf.com/cn">easypdf&lt;/a>、&lt;a href="https://pdf.io/">PDF.io&lt;/a>、&lt;a href="https://smallpdf.com/cn">Smallpdf&lt;/a>等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="四图片处理">四、图片处理&lt;/h3>
&lt;h4 id="在线工具">在线工具&lt;/h4>
&lt;p>在线工具主要适合应急使用，所以推荐的尽量以免费的为主，或者那种免费的也够用了的。&lt;/p>
&lt;h5 id="图片综合处理">图片综合处理&lt;/h5>
&lt;ul>
&lt;li>&lt;a href="https://www.iloveimg.com/zh-cn">iLoveIMG&lt;/a>：图片综合处理工具，&lt;font style="background-color:#8bc34a">免费&lt;/font>可用，高级帐户可解锁更多功能&lt;/li>
&lt;li>&lt;a href="https://renzhezhilu.gitee.io/webp2jpg-online/#/">多功能图片转换器&lt;/a>：图片格式转换器，此作者另有&lt;a href="https://renzhezhilu.gitee.io/webp2jpg-online/batch.html">图片加水印&lt;/a>以及&lt;a href="https://renzhezhilu.gitee.io/webp2jpg-online/splicing.html#/splicing">视频字幕拼接&lt;/a>工具，&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;a href="https://www.canva.com/">Canva可画&lt;/a>：在线设计平台，设计贺卡、海报、Logo等，&lt;font style="background-color:#8bc34a">免费&lt;/font>可用，亦可选择付费解锁更多模板&lt;/li>
&lt;li>&lt;a href="https://www.jpeg.io/">Jpeg.io | Convert any major image format into a highly optimized JPEG&lt;/a>&lt;/li>
&lt;/ul>
&lt;h5 id="图片压缩">图片压缩&lt;/h5>
&lt;ul>
&lt;li>&lt;a href="https://squoosh.app/">Squoosh&lt;/a>：Google的压缩神器，&lt;font style="background-color:#8bc34a">完全免费&lt;/font>&lt;/li>
&lt;li>&lt;a href="https://zh.recompressor.com/">最优图像优化&lt;/a>：在文件尺寸和质量之间选择完美平衡，并且可获取完整在线预览，&lt;font style="background-color:#8bc34a">完全免费&lt;/font>&lt;/li>
&lt;li>&lt;a href="https://www.picdiet.com/zh-cn">Picdiet&lt;/a>：基于浏览器的本地压缩工具，&lt;font style="background-color:#8bc34a">完全免费&lt;/font>&lt;/li>
&lt;li>&lt;a href="https://imagecompressor.com/zh/">在线图片优化器 (imagecompressor.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h5 id="图片放大">图片放大&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://bigjpg.com/">Bigjpg&lt;/a>：无损放大图片的在线工具，&lt;font style="background-color:#8bc34a">免费&lt;/font>但每个月限制20张&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://imglarger.com/">imglarger&lt;/a>：AI图像放大，&lt;font style="background-color:#8bc34a">免费&lt;/font>空间只有8个&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="在线ps">在线PS&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.photopea.com/">Photopea &lt;/a>：最早做在线PS的网站，免费账户就可以使用全部功能了，会员去广告&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ps.gaoding.com/#/">稿定设计PS&lt;/a>：国内的Photopea，网络不好的可以用这个代替，此外，他们家还有很多工具，不过很多都是收费的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://photoeditor.polarr.com/">Polarr&lt;/a>：泼辣修图的网页版，会员功能更多&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.remove.bg/">Remove.bg&lt;/a>：扣除图片背景&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="客户端">客户端&lt;/h4>
&lt;p>如果电脑配置允许，并且有一定的技术基础的话，编辑图片肯定还是要选用专业的软件的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Adobe全家桶&lt;/strong>：安装破解版的话可以跳转到微博大佬&lt;a href="https://weibo.com/vposy">@vposy&lt;/a>&lt;/li>
&lt;li>&lt;strong>Topaz全家桶&lt;/strong>：主打AI智能处理，无损放大、清晰度增强、降噪、扣图、HDR效果增强、4K视频修复等等，用过几次，操作非常简单，破解版网上也很多。&lt;/li>
&lt;/ul>
&lt;h3 id="五文本编辑">五、文本编辑&lt;/h3>
&lt;p>&lt;em>如果不喜欢用Word，那么非常推荐使用markdown来做文字相关类的工作，具体可在【常用篇】里的云笔记里看一些相关的软件推荐。&lt;/em>&lt;/p>
&lt;h4 id="visual-studio-codehttpscodevisualstudiocom">&lt;a href="https://code.visualstudio.com/">Visual Studio Code&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：VSCode 全称 Visual Studio Code，是微软出的一款轻量级代码编辑器，免费、开源而且功能强大。它支持几乎所有主流的程序语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：原本一直是使用Notepad++来代替默认记事本的，后来因为作者发布反华言论寻找替代品时发现微软的Visual Studio Code简直太好用了，不愧是最优秀的代码编辑器，丰富的插件让你可以在上面做任何事（&lt;del>比如我之前上班就在VS Code上看微信读书&lt;/del>）。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：微软出品，&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：不是用来开发的话，开启文本类文件（txt,log,conf,无后缀..）的时候右键选择使用code打开即可。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.sublimetext.com/blog/articles/sublime-text-4">Sublime Text &lt;/a>，&lt;a href="https://www.ultraedit.com/">UltraEdit&lt;/a>，&lt;a href="https://atom.io/">Atom&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="beyond-comparehttpswwwbeyondcomparecc">&lt;a href="https://www.beyondcompare.cc/">Beyond Compare&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Beyond Compare 是一套由 Scooter Software 推出的非常实用的文件及文件夹对比工具，丌仅可以快速比较出两个文件夹的不同之处，还可以详细的比较文件之间的内容差异，并将差异以颜色标示。 程序内建了文件浏览器，方便您对文件、文件夹、压缩包、FTP 网站之间的差异对比以及资料同步。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：对于会用git的人应该很熟悉show diff的操作，其实就是对比文件的历史版本的差异。而不熟悉git或者我们想要对比Office、图像文件时，Beyond Compare目前还是市面上首屈一指的对比软件。建议搭配git使用效果更佳，再也不怕自己写过的东西丢了。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211128105911299.png" alt="image-20211128105911299">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>，有点贵，用的话建议破解版就好&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：拖动文件&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211128110108145.png" alt="image-20211128110108145">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：git、&lt;a href="https://winmerge.org/">Winmerge&lt;/a>、&lt;a href="https://sourcegear.com/diffmerge/">DiffMerge&lt;/a>都是开源免费的，但是功能不如BC强大。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="六文本识别ocr">六、文本识别（OCR）&lt;/h3>
&lt;p>在线OCR：&lt;a href="https://gongpeione.github.io/quick-js-ocr/example/">JsOCR (gongpeione.github.io)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/AnyListen/tianruoocr">tianruoocr开源版本&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://ocr.tianruo.net/">天若OCR文字识别-59&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/AnyListen/tools-ocr">树洞OCR/tools-ocr)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://gitee.com/wanglifree/tianruoocr-cl">tianruoocr-cl: 天若ocr开源版本的本地版，采用Chinese-lite和paddleocr识别框架 (gitee.com)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/miaomiaosoft/PandaOCR">PandaOCR&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/miaomiaosoft/PandaOCR.Pro">PandaOCR.Pro&lt;/a>&lt;/p>
&lt;p>使用教程：&lt;a href="https://support.qq.com/products/322047/faqs-more/">PandaOCR专业版 (qq.com)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/PaddlePaddle/PaddleOCR">PaddleOCR&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://sspai.com/post/44944">这款被忽视的大厂作品，其实有更出色的中文 OCR 效果：ABBYY FineScanner - 少数派 (sspai.com)&lt;/a>&lt;/p>
&lt;h3 id="七流程图思维导图">七、流程图&amp;amp;思维导图&lt;/h3>
&lt;p>推荐一些相关的软件/网站：&lt;/p>
&lt;h4 id="microsoft-office-visio">Microsoft Office Visio&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="drawiohttpsappdiagramsnet">&lt;a href="https://app.diagrams.net/">drawio&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：draw.io 是一个强大简洁的在线的绘图网站，支持流程图，UML图，架构图，原型图等图标。支持Github，Google Drive, One drive等网盘同步，并且永久免费。如果觉得使用Web版不方便，draw.io 也提供了多平台的离线桌面版可供下载。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="xmind">Xmind&lt;/h4>
&lt;h4 id="edrawmax">EdrawMax&lt;/h4>
&lt;h4 id="coggle">coggle&lt;/h4>
&lt;p>coggle&lt;/p>
&lt;h4 id="processon">ProcessOn&lt;/h4>
&lt;p>网站&lt;/p>
&lt;h4 id="httpswwwzhixicom">&lt;a href="https://www.zhixi.com/">https://www.zhixi.com/&lt;/a>&lt;/h4>
&lt;p>客户端&lt;/p>
&lt;h3 id="七邮箱">七、邮箱&lt;/h3>
&lt;p>邮箱类的软件坑比较少，我一般常用的有两个：Foxmail和OutLook，前者是腾讯收购的张小龙（微信）研发的邮箱产品，符合国人的使用习惯，非常轻量、简洁和易用；后者是微软官方的邮件客户端，优点是功能强大、高效协同而且与Office套件、exchange无缝集成，缺点是使用起来过于麻烦，远远不如Foxmail。其他的同类产品还有网易邮箱，QQ邮箱，Gmail客户端等等。&lt;/p>
&lt;h3 id="八gtd">八、GTD&lt;/h3>
&lt;p>GTD类软件相信大家有这个习惯的肯定都有自己惯用的了，市面上能找到的GTD软件数不胜数，这里只列两个，一个是微软收购奇妙清单后开发的&lt;a href="https://todo.microsoft.com/tasks/">Microsoft To Do&lt;/a>，另外一个是辅助办公的番茄钟软件&lt;a href="https://pomofocus.io/">Pomofocus&lt;/a>。&lt;/p>
&lt;p>目前前者已经被我用Notion替代掉了，Notion强大的定制化功能（&lt;del>抄别人模板很方便&lt;/del>）足以应对大部分的GTD需求。&lt;/p>
&lt;p>Pomofocus则是我常用的另一款软件（PS：其网页端也可以集成在Notion里面，就不需要额外安装软件了），主要功能非常简单，就是计时，附带的任务管理和数据统计可以忽略，颜值尚可。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211128165134247.png" alt="image-20211128165134247">&lt;/p>
&lt;h3 id="九协同办公">九、协同办公&lt;/h3>
&lt;p>&lt;a href="https://docs.qq.com/desktop/">腾讯文档 (qq.com)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://shimo.im/welcome">石墨文档-企业在线协同办公系统平台,支持云端多人在线协作编辑文档和表格 (shimo.im)&lt;/a>&lt;/p>
&lt;h3 id="十开会">十、开会&lt;/h3></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/series/2021/12/windows%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8E%A8%E8%8D%90/" term="windows软件不完全推荐" label="windows软件不完全推荐"/><category scheme="https://kiwi4814.github.io/tags/2021/12/windows/" term="windows" label="windows"/><category scheme="https://kiwi4814.github.io/tags/2023/02/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/></entry><entry><title type="text">windows软件不完全推荐01：常用篇</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/windows-software-common/"/><id>https://kiwi4814.github.io/posts/2021/windows-software-common/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-12-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">前言 初衷：除了分享给大家之外，也用来备份大部分我平时使用频率很低的软件； 软件大家用着……</summary><content type="html">&lt;h2 id="前言">前言&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>初衷：除了分享给大家之外，也用来备份大部分我平时使用频率很低的软件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>软件大家用着舒服即可，本文旨抛砖引玉，同类型下在没有更好软件的时候可以考虑尝试；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关于软件的一些描述：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>代表源代码开放，可以放心使用；&lt;font style="background-color:#8bc34a">免费&lt;/font>仅指当前免费，不排除以后会商业化；&lt;font>付费&lt;/font>软件一般分为买断制或者订阅制；&lt;/p>
&lt;p>&lt;strong>当然有条件的话还是尽量支持正版。（&lt;del>&lt;a title="可ta卖的实在是太贵了....">🌚&lt;/a>&lt;/del>）&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>点击标题可跳转官网，下载的话一定去官网下载，其他版本都可能有风险；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="系统信息">系统信息&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>系统：Windows 10 专业版 21H2 19044.1387&lt;/p>
&lt;/li>
&lt;li>
&lt;p>时间：2021年12月01日&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="目录">目录&lt;/h2>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="正文">正文&lt;/h2>
&lt;h3 id="01-解压缩类">01. 解压缩类&lt;/h3>
&lt;h4 id="bandiziphttpswwwbandisoftcombandizip">&lt;a href="https://www.bandisoft.com/bandizip/">Bandizip&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：由Bandisoft出品（韩国开发商，他们家的几个软件都还不错）的Bandizip 是一个强大的多功能解压缩文件管理工具，它提供了高速的解压缩速度和其他各种实用功能。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：曾经尝试过很多解压缩软件，直到切换到Bandizip就再也没换过其他的了，无广告、无弹窗、多线程压缩，解决压缩包乱码问题的神器。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：从7.0版本开始&lt;font>收费&lt;/font>，建议使用6.29版即可。&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：使用6.29版本记得关闭自动更新。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：WinRar、&lt;a href="http://7-zip.org/">7-Zip&lt;/a>等等&lt;/li>
&lt;/ul>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211127161546420.png" alt="image-20211127161546420" style="zoom: 50%;" />
&lt;h3 id="02-浏览器">02. 浏览器&lt;/h3>
&lt;h4 id="microsoft-edgehttpswwwmicrosoftcomen-usedgefeaturesformmy01rzocidmy01rz">&lt;a href="https://www.microsoft.com/en-us/edge/features?form=MY01RZ&amp;amp;OCID=MY01RZ">MicroSoft Edge&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：微软在2020 年 1 月发布了基于 Chromium 的新版 Microsoft Edge（国内的大部分厂商的浏览器都是基于Chromium内核的，比如360浏览器、QQ浏览器，其本质就是Chrome），喜欢使用chrome的小伙伴可以考虑直接无缝迁移过来。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：操作系统自带的&lt;em>Chrome浏览器++&lt;/em>，对于小伙伴们来说最大的好处就是不需要代理就可以进行账号同步、密码管理、安装扩展等一系列操作，与windows深度集成，微软也一直在更新好用的功能，配合丰富的浏览器插件使用更加完美。&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：有机会的话单独再介绍一下我认为好用的浏览器插件&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：Google Chrome、Mozilla Firefox（喜欢火狐的可以尝试&lt;a href="https://www.runningcheese.com/">runningcheese&lt;/a>）&lt;/li>
&lt;/ul>
&lt;h3 id="03-阅读器">03. 阅读器&lt;/h3>
&lt;h4 id="sumatrapdfhttpswwwsumatrapdfreaderorgfree-pdf-reader">&lt;a href="https://www.sumatrapdfreader.org/free-pdf-reader">SumatraPDF&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：一款开源免费、超级小巧、快速快捷的Windows平台阅读器，不仅支持PDF格式，也支持 XPS、DjVu、CBZ、CBR 格式。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：启动非常快、占空间小&amp;amp;便携（只有6M左右，U盘必备）、支持的格式多（支持电子书，漫画等都可以看）&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：本机使用直接安装exe即可，放U盘下载个Portable version。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：对PDF其他要求的（比如文档注释、编辑、转换、合并和水印签名等）可以看后续的办公类软件中的推荐，一般我默认开启PDF的软件是SumatraPDF，同时会额外安装一个更加专业的PDF处理软件用于复杂的需求。&lt;/li>
&lt;/ul>
&lt;h3 id="04-启动器">04. 启动器&lt;/h3>
&lt;h4 id="woxhttpsgithubcomwox-launcherwox">&lt;a href="https://github.com/Wox-launcher/Wox">Wox&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：一个非常简单的程序启动器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：刚开始用电脑的时候，都是直接双击桌面上的图标打开软件，时间久了桌面上的图标会越来越多也越来越乱，以至于开一个软件要找很久的快捷方式。后来发现了Wox这个启动器，可以直接通过键盘启动程序、查找文件（默认集成everything）、搜索网页、使用计算器等等。&lt;strong>最重要的是，可以还我一个干净的桌面&amp;amp;挑选自己喜欢的壁纸。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：键盘&lt;code>Alt+Space&lt;/code>按下后输入想要做的事就可以了。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/NPfw6S1j8OhCp7k.gif" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：同类的软件有很多，比如说&lt;a href="https://www.launchy.net/">Launchy&lt;/a>，&lt;a href="https://www.listary.com/">Listary&lt;/a>，&lt;a href="https://docs.microsoft.com/zh-cn/windows/powertoys/">Power Toys&lt;/a>等等。值得一提的是，Power Toy是微软官方出的，算是微软认识早自己系统不足之后钦点的官方启动器了，虽然没有集成everything（但是也同样包含文件检索，需要实现设置好索引，感觉没有everything好用），但也加了很多有意思的功能，尚可一试。&lt;/p>
&lt;blockquote>
&lt;p>微软可能是看到了开源软件的各种优势，终于重新拾起了时隔许多年的PowerToys项目，将一些GitHub上的小工具集成到了这款效率工具中。PowerToys包含很多工具，例如能够改变窗口布局的FancyZones、能够调整图片尺寸的Image Resizer、能够丰富批量文件重命名的Power rename，以及照抄Wox的PowerToys Run等等。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h4 id="utoolshttpsutools">&lt;a href="https://u.tools/">utools&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：uTools 是一个极简、插件化的现代桌面软件，通过自由选配丰富的插件，打造得心应手的工具集合。说白了就是一个工具箱，集成各种小工具，开启软件、搜索网页、翻译、计算、记录备忘等等都可以通过它来完成而非手动一步一步操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：如果你喜欢用MacOS，那你一定知道Alfred，它基本上替代了苹果自家的Spotlight，在我看来，上面说的Wox及其同类软件做的就是Spotlight做的事情，而utools想做的是Alfred，虽然相比于万能的Alfred还逊色很多，但总归有这样的软件出现了，希望能越做越好。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/wD7RhGYyEpFImTo.png" alt="image-20211129213706647">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>使用，升级VIP有更多功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：与大部分启动器一样，&lt;code>Alt+Space&lt;/code>触发（快捷键可自由设置）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.launchy.net/">Launchy&lt;/a>，&lt;a href="https://www.listary.com/">Listary&lt;/a>，&lt;a href="https://docs.microsoft.com/zh-cn/windows/powertoys/">Power Toys&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="fenceshttpswwwstardockcomproductsfences">&lt;a href="https://www.stardock.com/products/fences/">Fences&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Fences也被称为栅栏桌面，是著名的Stardock公司推出的一款软件。Fences栅栏桌面可以将不同的图标放到不同的“容器”当中，使用者还可以移动和拉伸这个“容器”。这样将图标分类以后，桌面再也不会看起来一团糟了。它还提供了一个有趣的功能：双击桌面，隐藏所有图标；再次双击桌面，显示所有图标。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：虽然使用启动器代替了文件检索和程序开启，但总有些文件夹、文件或者快捷方式需要放到桌面的，这时候就需要Fences来帮我整理了。将桌面切成一块块矩形区域，每一块放置不同类型的文件，不用的时候双击隐藏，用到的时候随时打开即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>，推荐官网试用，想入正的话steam购买，价格只有官方网站的一半。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：使用起来非常简单，在桌面上绘制一个矩形，然后进行分类即可；双击隐藏所有文件（也可以设置哪些区域不隐藏）。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/ROAW86uwKnJ1LBF.png" alt="image-20211205165111007">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://guanjia.qq.com/product/zmzl/">腾讯桌面&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="05-效率类">05. 效率类&lt;/h3>
&lt;p>效率类的软件有很多，包括上一节介绍的启动器也可以说是效率类的一种，这些软件的功能并不是完全相互独立的，甚至很多重复的功能，找到自己喜欢的那款就好，如果过度执着于使用这些软件，很可能会起到反效果，自然也就无法提高效率了。&lt;/p>
&lt;p>有些软件是潜移默化的改变我的工作和学习习惯的，比如下面的everything、ditto、aText等，而有些软件则是属于锦上添花，会用可以极大的提高效率，不会用也最多就是鼠标多点几下的事情。&lt;/p>
&lt;h4 id="everythinghttpswwwvoidtoolscomzh-cn">&lt;a href="https://www.voidtools.com/zh-cn/">Everything&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;strong>Everything&lt;/strong>是voidtools开发的一款文件搜索工具，官网描述为&amp;quot;基于名称实时定位文件和目录&amp;quot;。它体积小巧，界面简洁易用，快速建立索引，快速搜索，同时占用极低的系统资源，实时跟踪文件变化，并且还可以通过http或ftp形式分享搜索。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：好用，Windows必装软件。配合Wox或者其他启动器找文件非常方便。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：建议搭配启动器使用&lt;/li>
&lt;/ul>
&lt;h4 id="dittohttpsditto-cpsourceforgeio">&lt;a href="https://ditto-cp.sourceforge.io/">Ditto&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Ditto 是一款强大的Windows 剪贴板增强工具，免费、开源、支持中文，而且还有免安装的绿色版本。 开启Ditto 后，不会有任何程序界面出现，它只是默默地在系统右下角弹出了一个蓝色的托盘图标，这时候你复制任何内容到剪贴板都会被Ditto 一一记录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：经常需要复制粘贴的小伙伴应该都有类似的需求，比如需要连续复制多段文字，或者最近复制过的东西想要再次使用的，都可以通过这款软件实现，支持文字和文件，并且能够检索。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：设置好自己熟悉的快捷键，比如我自己设置的时&lt;strong>Ctrl+`&lt;/strong>，当我想要使用的时候快速呼出，方向键选择或者直接搜索后按Enter即可。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/KIbCoPnzO891Eje.gif" alt="动画">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：windows自带的&lt;code>Win+V&lt;/code>、开源软件CopyQ，此外还有多平台支持的云剪切板工具&lt;a href="https://clipber.com/">快贴&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="atexthttpswwwtrankynamcomatext">&lt;a href="https://www.trankynam.com/atext/">aText&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：aText 是一款文字输入效率工具，可以配置常用的文本、代码模板、邮件模板等，并通过短语形式进行触发替换。国内的同学可能听过名气更大的 TextExpander，但是 TextExpander 改成订阅制后性价比极低，且很多细节甚至没有 aText 打磨的精细，所以个人更推荐 aText。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：如果ditto解决了我剪切板的问题，aText能够帮我做的就是记住我常用的短语。比如说我的一些邮箱号码、短语、脚本，常用的邮件模板等等，都可以事先维护好，然后在用到的时候快速找到。另外比如python脚本、shellScript、日期、随机密码等等高阶用法也都非常好用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>版本已经够用，深度使用可以尝试付费版（USD 4.99）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：两种，一种是快捷键呼出搜索常用短语，另外一种是设置快捷短语，比如我输入&lt;code>@163&lt;/code>这四个字符的时候，就会快速把我的网易邮箱替换上去，非常方便。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/MbLpdKgjJCVmOHc.gif" alt="1">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：几乎所有的输入法都带有自定义短语的功能，上面说的邮箱、电话也是可以实现的，但是d动态渲染、脚本之类的就不支持了；此外还有&lt;a href="https://textexpander.com/download">TextExpander&lt;/a>，价格太贵，同样不推荐。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="quickerhttpsgetquickernet">&lt;a href="https://getquicker.net/">Quicker&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Quicker 是一款 Windows 平台的效率工具，由独立开发者 &lt;a href="https://www.weibo.com/cuiliang123">@崔亮&lt;/a> 开发。Quicker 的使用逻辑和软件启动器比较接近，在快捷调用的基础上增加了更深度的功能。它的亮点在于用户可以通过&lt;strong>可视化编程&lt;/strong>的方式编写属于自己的动作，官方共享库中有意思的动作也是层出不穷，堪称 Windows 上的快捷指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：Windows工作流的集大成者，将一套指令做成动作库。比如说有人发给我一张图片，里面的文字，我想要识别出里面的文字并使用Google搜索相关信息，正常我需要OCR识别，打开浏览器开始搜索，使用Quicker的话只需要触发一个动作即可。当然这是很基础的应用了，可以去官网的动作库去查看更多复杂的指令。&lt;/p>
&lt;p>&lt;em>其实这个软件和上面的很多功能都有重叠，尤其是utools，都是集合了很多丰富功能的效率软件，但是Quicker侧重点在于工作流，utools本质还是启动器+工具。即便如此，要用的话只需要选一个使用就可以了。&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/apOHgyohsntqX2Q.png" alt="image-20211205173110301">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：免费使用，但有限制，收费的话是&lt;font>订阅制&lt;/font>的形式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：因为是国人开发，官网文档教程非常详细，我不算深度用户，这里贴几篇文章吧。&lt;/p>
&lt;p>&lt;a href="https://sspai.com/post/47776">Quicker -- 一种全新的Windows效率神器&lt;/a>
&lt;a href="https://sspai.com/post/53336">在 Windows 里实现 6 个不为人知的文件操作&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/48181379">Quicker -- 新一代Windows效率神器 &lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="quicklookhttpsgithubcomql-winquicklook">&lt;a href="https://github.com/QL-Win/QuickLook">QuickLook&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Windows上的一款快速预览软件，选中文件，按下空格就可以快速查看文件的内容了。支持图片、视频、压缩文件、PSD等，通过插件还可以支持预览Office、epub、apk等等。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：MacOS带来的恶习，打开文件之前总要先空格按下去看看里面是啥，于是在windows上也找到了类似的软件。与之相似的还有Seer，设置和功能更加丰富，但是预览速度略慢一点，见仁见智即可。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：单击想要查看的文件，按下空格松开就可以预览了。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="http://1218.io/">Seer&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="total-commanderhttpswwwghislercom">&lt;a href="https://www.ghisler.com/">Total Commander&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Total Commander 是一款应用于Windows 平台的文件管理器 ，它包含两个并排的窗口，这种设计可以让用户方便地对不同位置的“文件或文件夹”进行操作，例如复制、移动、刪除、比较等，相对Windows 资源管理器而言方便很多，极大地提高了文件操作的效率，被广大软件爱好者亲切地简称为：TC 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：一直在被安利这款软件，每次下载完感觉学习成本太高了就弃用了，直到第N次重装系统之后，潜心学习了一下，才发现这款软件的强大之处。如果你是个程序员或者囤囤鼠，喜欢在电脑里存储大量的资源，并且不怕折腾的话，这款软件将极大的方便你整理资料的速度，虽然界面古朴了一点，但是确实非常好用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>，可以找到各种&lt;del>破解版&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：&lt;a href="https://xbeta.info/studytc/">教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://doc.qt.io/">Q-Dir&lt;/a>、&lt;a href="https://www.xyplorer.com/">XYplorer&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="anytxt-searcherhttpsanytxtnet">&lt;a href="https://anytxt.net/">AnyTXT Searcher&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：AnyTXT Searcher是一款功能强大的本地数据全文搜索引擎，就像本地磁盘Google搜索引擎一样，它是文件搜索工具Everything作者推荐的文档和文本内容搜索工具。简单来说就是everything检索文档名称，AnyTXT Searcher检索文档内容，支持纯文本、Office文档、PDF、电子书的检索。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：这个软件本应该放在工具类推荐的，因为使用频率真的很低。不过作为和everything互补的一款软件，放在这里也没什么问题。使用场景的话，大概就是忘记了文件名字但是记得大概内容的时候可能会用？反正我基本没用到过。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：不常用的话记得关闭开机自启。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.textseek.net/cn/">TextSeek&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="06-图像视频类">06. 图像视频类&lt;/h3>
&lt;h4 id="honeyviewhttpswwwbandisoftcomhoneyview">&lt;a href="https://www.bandisoft.com/honeyview/">honeyview&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>： 蜂蜜浏览器Honeyview 是一款快速的图片查看器，Bandisoft出品（上面介绍的解压缩软件也是）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：一般来说我们用Windows系统自带的图片查看器就足以查看各种图片格式，比如JPG、PNG、GIF等格式，但要查看PSD、RAW等格式就比较麻烦了。我一般使用Honeyview替代默认图片浏览器，主要支持的特色功能有：查看WEBP、PSD、RAW等多种格式，无边框浏览，预览压缩包内图片以及批量编辑图片等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：作为默认的图像浏览器使用即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://imageglass.org/">ImageGlass&lt;/a>等等等等等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="eaglehttpscneaglecool">&lt;a href="https://cn.eagle.cool/">Eagle&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Eagle 是国人开发的一款图片管理软件，借助 Eagle 软件，设计师可以方便的创建，专属自己的设计素材库、灵感库，在这个线上素材管理越来越不靠谱的今天，一个线下本地的专业素材管理软件，是最靠谱的！&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：工作非设计师，不过喜欢收集壁纸、美图、表情包等等（仓鼠的本质）。配合浏览器插件以及云盘同步，收藏和管理图片非常方便。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：由于是国人开发，官方文档非常详细，使用方法也很简单，安装浏览器插件，遇到喜欢的图片拖一下就可以保存了。在软件管理界面可以设置分类、标签、文件夹等等。&lt;/li>
&lt;/ul>
&lt;h4 id="sharexhttpsgetsharexcom">&lt;a href="https://getsharex.com/">ShareX&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>： &lt;em>ShareX&lt;/em> 是一款开源的截图录屏工具，支持截图，录制视频，录制Gif，也支持图片上传，拾色器等功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：功能非常齐全，如果你只用一款截图软件，那么推荐你用这个，特色功能：截图后上传到图床、截图后自动OCR、也可以直接录屏或者GIF（第一次使用会提示你下载FFmpeg ）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后设置常用的快捷键以及截图后的默认动作，比如我一般设置快捷键为Ctrl+Shift+A，录屏为Ctrl+Shift+PrintScreen，截图后复制到剪切板。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211127181335391.png" alt="image-20211127181335391">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：Snipaste，FastStone等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="screentogifhttpswwwscreentogifcom">&lt;a href="https://www.screentogif.com/">ScreenToGif&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：ScreenToGif 是一款录制屏幕、摄像头、画板于一身的 GIF 制作软件。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：虽然有很多软件可以制作Gif（比如上文的ShareX也可以），但是仍然要推荐一下这个，小而精，功能非常强大，本文的一些演示gif即是用本软件录制而成。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：以录制Gif来说，点击录制后框选要录制的范围，录制完成后可以逐帧进行编辑，最后输出为gif，中间还有很多高级选项可以自己研究。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.bandisoft.com/honeycam/">Honeycam&lt;/a>，&lt;a href="https://gifcam.en.softonic.com/download">GifCam&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="tiantuoocr">TianTuoOCR&lt;/h4>
&lt;p>天若OCR免费版由于接口限制太严重已经不如之前那么好用，OCR软件在办公篇单独推荐。&lt;/p>
&lt;h3 id="07-影音类">07. 影音类&lt;/h3>
&lt;h4 id="potplayerhttpspotplayerdaumnet">&lt;a href="https://potplayer.daum.net/">PotPlayer&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：PotPlayer 是KMPlayer 的原制作者姜龙喜先生（韩国）进入Daum 公司后的新一代网络播放器。 PotPlayer 的优势在于强大的内置解码器；而KMPlayer 的优势在于强大的定制能力和个性化功能。 PotPlayer 使用VC++ 编写， KMPlayer 为Delphi 编写。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：电脑上的离线播放器，是我用了很多年也不打算换的一个，曾经痴迷于折腾这个软件的皮肤、徽标、字幕、滤镜、直播源等，功能非常强大，配置也十分丰富，是PC观看高清影视剧的不二之选。最近更新支持从subHD直接检索字幕，很方便。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：默认快捷键与其他播放器不太一样，比如双击暂停、右键选项菜单、鼠标中键切换全屏等，不习惯的可以自定义。另外，倍速播放、切换音轨、切换字幕都是很方便的快捷键，可以自行搜索下，记住常用的即可。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：KMPlayer 、迅雷影音等&lt;/li>
&lt;/ul>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211127164723187.png" alt="image-20211127164723187" style="zoom:67%;" />
&lt;h4 id="yesplaymusichttpsgithubcomqier222yesplaymusic">&lt;a href="https://github.com/qier222/YesPlayMusic">YesPlayMusic&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：高颜值的第三方网易云播放器。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/2TvV3RA41xSltW6.png" alt="image-20211202221610043">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：最近发现的一个三方客户端，颜值很高，喜欢折腾的可以去尝试&lt;a href="https://github.com/revincx/UnblockNeteaseMusic">UnblockNeteaseMusic&lt;/a>，这样最头疼的版权问题也能解决，顺便还支持Last.fm，喜欢看数据的话可以关联一下。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/oFzmsPybitjfckw.png" alt="image-20211202221406255">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：设置中可以登录网易云账号，音质改成无损，全局快捷键开关酌情选择开启或者关闭，不然发现自己其他软件的快捷键莫名其妙不能用了而干着急。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：Apple Music、Spotify等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="哔哩哔哩uwphttpswwwshowdoccomcnbiliuwpv4">&lt;a href="https://www.showdoc.com.cn/biliuwpv4">哔哩哔哩UWP&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：此应用是哔哩哔哩第三方UWP客户端！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：相比于丑到爆的官方UWP，这款第三方客户端感觉体验上更像手机客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：电脑上看B站一般直接用网页了，触屏或者喜欢UWP客户端式体验的可以考虑&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：如果喜欢在线追剧，爱奇艺UWP版本也是没有广告的。&lt;/p>
&lt;p>&lt;strong>此外，如果你的系统是Windows11，那么也有相应的三方版——&lt;a href="https://github.com/Richasy/Bili.Uwp">Richasy/Bili.Uwp: 适用于新系统UI的哔哩 &lt;/a>，功能更为强大，不过目前还在开发阶段，需要手动安装。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="08-下载类">08. 下载类&lt;/h3>
&lt;h4 id="internet-download-managerhttpswwwinternetdownloadmanagercom">&lt;a href="https://www.internetdownloadmanager.com/">Internet Download Manager&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：一般简称IDM，一款超级强大的http/ftp下载工具，能和浏览无缝配合，自动抓取网页视频，缺点是不支持bt和磁力链接下载。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：除了下载就没有其他功能的一个软件，潜移默化的改善你的冲浪体验。配合浏览器扩展无缝接管大部分网页的下载，多线程且速度快，非常好用。&lt;/p>
&lt;p>我一般常用来：嗅探各大视频网站（B站、油管、直播等等），接管浏览器百度盘、城通盘的下载，此外，还可以正则抓取网页的所有资源（比如喜欢某网页的图片又不想一张一张保存，可以批量抓取）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>买断制&lt;/font>，官方售价25刀，国内有各种代理商和&lt;del>破解版&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后会提示你安装浏览器插件，按照指引操作即可。此外在选项-连接可以设置线程数（一般32即可），这样可以快速下载百度云的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.neatdownloadmanager.com/">NeatDownloadManager（免费）&lt;/a>、&lt;a href="https://www.freedownloadmanager.org/zh/">Free Download Manager（免费）&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="qbittorrenthttpswwwqbittorrentorg">&lt;a href="https://www.qbittorrent.org/">qBittorrent&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：QBittorrent是一个新的轻量级BitTorrent客户端，可运行于Linux、windows及其他可能系统，它简单易用，漂亮的外观，功能强大。 现在它可以被视为一个良好的替代其他BitTorrent软件的客户端。 软件自带简体中文。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：由于IDM只支持Http下载，所以还需要一款BT下载软件，BT下载的同类软件基本都大同小异，一般装一到两个即可。我的电脑中装了三个，迅雷（很少用，但有些资源不得不用）、比特彗星（没有迅雷那么浏览，BT下载的话很推荐，但是一般PT站是不允许使用比特彗星的）和这款QBittorrent（几乎所有的PT站点都支持，而且性能强大）。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：打开&lt;code>.torrent&lt;/code>后缀的文件&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.utorrent.com/">uTorrent&lt;/a>、&lt;a href="http://www.bittorrent.com/">BitTorrent&lt;/a>、&lt;a href="https://deluge-torrent.org">Deluge&lt;/a>、&lt;a href="https://transmissionbt.com/">Transmission&lt;/a> 等&lt;/li>
&lt;/ul>
&lt;h3 id="09-系统类">09. 系统类&lt;/h3>
&lt;h4 id="adguardhttpsadguardcomzh_cnwelcomehtml">&lt;a href="https://adguard.com/zh_cn/welcome.html">Adguard&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：AdGuard 是拥有可获取最佳网络冲浪体验所需全部功能的独特程序。其集合了世界上最高级的广告拦截器，隐私保护模块以及家长控制为一体，还可协同任何浏览器和应⁠用工⁠作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：全平台可用+广告拦截器+隐私保护+脚本管理，可以拦截网页的广告，甚至是一些视频的广告。此外，服务器端的AdGuardHome是开源的，不过功能也相对较少，只能通过DNS拦截，家里有软路由的一般都会装一个，从路由器层面拦截恶意广告。&lt;/p>
&lt;p>【&lt;strong>从技术上来讲，它可以接管你的所有流量，所以不放心其安全性的千万不要使用哈。&lt;/strong>】&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>买断制&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装软件后，记得安装Edge浏览器插件。在设置中可以开启隐私保护以及URL过滤等。家长模式可以防止恶意安装exe以及NSFW内容过滤。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：火绒（与火绒的区别在于火绒只是拦截一些软件的弹窗广告，而且是广告出来后才拦截），不过火绒胜在免费。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="dismhttpswwwchuyumezh-hans">&lt;a href="https://www.chuyu.me/zh-Hans/">Dism++&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Dism++ 是一款 Windows 系统管理优化工具，它解决了我们安装、维护系统的一大痛点问题——自定义设置和优化。相当于一个 “一站式” 管理优化工具集。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：集成了一些系统本身就有但是隐藏很深的功能，比如右键菜单的管理、去除快捷方式小箭头，清理WinSxS组件等。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：安装完系统后，想清理下C盘或者任何时候心血来潮的时候打开使用就好了。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：各种系统管理大师&lt;/li>
&lt;/ul>
&lt;h4 id="geekhttpsgeekuninstallercom">&lt;a href="https://geekuninstaller.com/">Geek&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Geek Uninstaller是一个免费的专业的卸载软件，采取深而快的扫描方式，删除你电脑上多余的东西。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：除了卸载软件之外没有任何花里胡哨的功能，同样是调用软件本身的方式卸载，与Windows控制面板不同的是，geek卸载完软件后，会自动检查清理注册表和无用的文件。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：本身不需要安装，就是一个单文件，用的时候双击打开使用即可。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：Total Uninstall、IObit Uninstaller等&lt;/li>
&lt;/ul>
&lt;h3 id="10-云笔记">10. 云笔记&lt;/h3>
&lt;p>相信大家都有自己的一款笔记软件，从最早的Google Keep、OneNote、Evernote，到现在异军突起的各类知识库软件，云笔记也越来越卷。为了能找到满足我的所有&amp;quot;需求&amp;quot;的一款软件，我试了十几种当下流行的笔记类，并深入体验了其中一些之后，抛开程序员专属的一些，不负责任的推荐几个。&lt;/p>
&lt;p>顺便说一下我的需求，方便小伙伴们参考。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>支持离线浏览&lt;/strong>——数据放在自己手里最安全，没有网络的世界同样也可以很精彩&lt;/li>
&lt;li>&lt;strong>全平台&lt;/strong>——至少支持windows、mac os以及网页端，有app更好&lt;/li>
&lt;li>&lt;strong>云同步&lt;/strong>——方便随时随地能够看到自己的笔记&lt;/li>
&lt;li>&lt;strong>支持markdown&lt;/strong>——markdown现在已经不是程序员专属了，用习惯的话你肯定也会爱不释手&lt;/li>
&lt;/ul>
&lt;p>此外，&lt;strong>双链、数据库、服务器在国内还是国外、免费亦或者收费的方式、脑图&lt;/strong>等等都是非常锦上添花的功能。&lt;/p>
&lt;h4 id="typroahttpstyporaio">&lt;a href="https://typora.io/">Typroa&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Typora是一款轻便简洁的Markdown编辑器，最大的特点是即时渲染技术，这也是与其他Markdown编辑器最显著的区别。这使得你写Markdown能像写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：尝试过很多Markdown软件，这个是最好用的。从内测用到现在，定制化越来越强，bug也越来越少。如果你讨厌笨重的Word但是写东西的时候喜欢层次分明的，可以试试Markdown语言。&lt;/p>
&lt;p>本文就是基于Markdown语法完全在Typroa完成的，支持导出PDF、Html，搭配Pandoc还可以导出更多丰富的格式，如Word、Epub、OPML等。&lt;/p>
&lt;p>如果你不知道Markdown但是对这个软件有点兴趣，可以看下&lt;a href="https://sspai.com/post/54912">这篇文章&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：1.0版本后开始&lt;font>收费&lt;/font>（买断制国内89），当然可以直接使用0.11.18的&lt;font style="background-color:#8bc34a">免费&lt;/font>版，功能已经非常完善。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：本身并不算云笔记的分类范畴，但是如果你喜欢markdown，那么一定要试试这款软件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="notionhttpswwwnotionso">&lt;a href="https://www.notion.so/">Notion&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：&lt;strong>Notion&lt;/strong>是一款提供笔记、任务、数据库、看板、维基、日历和提醒等组件的应用程序。用户可以将这些组件连接起来，来创建自己的系统，用于知识管理、笔记记录、数据管理、项目管理等。这些组件和系统可以单独使用，也可以与他人进行跨平台协作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：非常出色的一款软件！！！但我觉得Notion的与众不同之处在于其丰富的&lt;strong>可定制化&lt;/strong>以及&lt;strong>数据看板&lt;/strong>，目前这是无可替代的，也是我一直在用的原因。&lt;/p>
&lt;p>我使用Notion一般用来做数据库，比如管理我近期要追的剧、管理我的工作计划，管理我订阅的软件/服务并设置提醒。此外，通过Notion还可以设计自己的个人主页，组合不同的模板以及自己的作品并进行分享。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/Gdox5by4l8HhjPI.gif" alt="atext2">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>一般够用，深度用户可选择性订阅（EDU邮箱可申请专业版，非常良心）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：入门有一定门槛，想要尝试的话建议找个B站入门视频看看。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缺点&lt;/strong>：不支持离线！！需要网络才可以打开，而且服务器在国外，网络不好的慎用！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="语雀httpswwwyuquecom">&lt;a href="https://www.yuque.com/">语雀&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：「语雀」是一个「专业的云端知识库」，孵化自 &lt;a href="https://www.antfin.com/?deer_tracert_token=cc478126-c93a-459b-a448-dd41de67f2d4">蚂蚁集团&lt;/a> ，是 &lt;a href="https://www.yuque.com/yubo/explore/tcaywl?deer_tracert_token=cc478126-c93a-459b-a448-dd41de67f2d4">体验科技&lt;/a> 理念下的一款创新产品，已是 10 万阿里员工进行文档编写、知识沉淀的标配。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：阿里出品，质量有保障。开启速度快，支持markdown、word、excel以及各种图表，非常易于上手，当然也能实现各种复杂的需求。如果有人要我推荐一款云笔记，我一定会优先推荐这个。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>有上传量限制（一般够用），付费可购买更多&lt;/li>
&lt;/ul>
&lt;h4 id="obsidianhttpsobsidianmd">&lt;a href="https://obsidian.md/">Obsidian&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Obsidian 是一款支持 macOS、Windows、Linux 多平台的 Markdown 编辑器，同时也支持双向链接，带有效果相当惊艳的网状笔记视图，它还支持标签管理、多种插件（例如日记、实时预览、星标、自定义 CSS 样式等）。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：为什么不用语雀而选择了Obsidian，最主要的是因为本地离线管理，切换成本很低，因为我的所有笔记都是以md文件的形式存放在本地以及云盘的，Obsidian只需要打开我原有的目录就可以进行工作了。在此基础上，Obsidian 有着非常非常丰富的第三方插件，拥有无限可能。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>【有收费机制，不过无需付费也可正常使用全部功能】&lt;/li>
&lt;/ul>
&lt;p>除了以上推荐的这些，此外，同样非常强大对标Obsidian的&lt;a href="https://b3log.org/siyuan/download.html">思源笔记&lt;/a>以及偏向程序员使用的&lt;a href="https://logseq.com/">Logseq&lt;/a>都是很优秀的笔记软件。由于我并没有更加深入的体验（知识库的导入和维护比较耗精力），所以不细说了。&lt;/p>
&lt;p>&lt;em>另外，由于没有找到完全符合我所有需求的一款云笔记，所以最终我的方案变成（仅供参考）：&lt;/em>&lt;/p>
&lt;ol>
&lt;li>**笔记管理：**以Obsidian为主，主要用来做双链、知识图谱以及丰富的第三方插件实现各种功能，移动端同样也是Obsidian；&lt;/li>
&lt;li>**云同步：**由于Obsidian的管理方式是以离线md为主的，所以文件的控制权实际在我手中的，我设置了Google Drive同步以及提交到Github上；&lt;/li>
&lt;li>&lt;strong>离线编辑器&lt;/strong>：在写作、写博客的输出过程中，以typora为主，所见即所得实在是太好用，无法舍弃；&lt;/li>
&lt;li>**数据库Database：**仍然以Notion为主，主要管理自己的软件订阅、观影记录以及游戏记录等等个人文件。此外，GTD也是Notion来做的，主要记录日常办公事项、会议纪要、备忘等。&lt;/li>
&lt;li>&lt;strong>当然了，没有这么多要求的，语雀真的就很好用了。&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h3 id="11-云存储">11. 云存储&lt;/h3>
&lt;blockquote>
&lt;p>这部分没有详细的软件推荐，只提供几种思路。&lt;/p>
&lt;/blockquote>
&lt;p>现在喜欢摄影、vlog和剪视频的年轻人越来越多，对存储空间的要求也越来越大，尤其是有了孩子后，空间就更不够用了。大家都希望自己的这些&amp;quot;电子宝贝&amp;quot;能以更安全的方式存储在某个地方，在用到的时候可以随时使用。于是，越来越多的云存储（早就）开始兴起，成熟的解决方案一抓一大把，国内有&lt;a href="https://cloud.baidu.com/">百度云&lt;/a>、&lt;a href="https://www.aliyundrive.com/">阿里云&lt;/a>、&lt;a href="https://www.weiyun.com/">腾讯微云&lt;/a>、&lt;a href="https://www.jianguoyun.com/">坚果云&lt;/a>、&lt;a href="https://www.lanzou.com/">蓝奏云&lt;/a>、&lt;a href="https://cloud.189.cn/">天翼云&lt;/a>....国外有&lt;a href="https://www.dropbox.com/">Dropbox&lt;/a>，&lt;a href="https://www.microsoft.com/en-us/microsoft-365/onedrive/online-cloud-storage">OneDrive&lt;/a>，&lt;a href="https://www.google.com/drive/">GoogleDrive&lt;/a>，&lt;a href="https://www.icloud.com/">iCloud&lt;/a>，&lt;a href="https://www.box.com/home">Box&lt;/a>等等等等。&lt;/p>
&lt;p>这里不会去对比每一款的特点和价格，也不会讨论数据安全方案相关，只是基于我个人的观察和身边小伙伴的一些需求介绍几种解决方案：&lt;/p>
&lt;p>&lt;strong>（1）只想要云备份&lt;/strong>&lt;/p>
&lt;p>如果你只是想让自己的文件有“另外一个安身之地”，那么基本上国内任意一个网盘都能满足你的需求。上传速度一般不会额外限制，但是下载速度快并且无限制的就要买空间，免费空间足够大的则要买下载速度，各家基本大同小异，选择顺眼的用就行了。&lt;/p>
&lt;p>硬要说的话苹果系可以选择服务器架设在贵州的iCloud，非苹果的可以尝试下最近在推广阶段的阿里云盘。&lt;/p>
&lt;p>&lt;del>话说这样的话，自购硬盘不是更好&lt;/del>&lt;/p>
&lt;p>&lt;strong>（2）多设备数据同步&lt;/strong>&lt;/p>
&lt;p>如果你下班的时候不希望背着笨重的电脑，但是&lt;del>想要加班&lt;/del>的时候不想去公司的话，可以试试这种方案（前提是公司允许并且有这个条件）。其本质就是将你设定的某个文件夹在多个设备上实时保持同步，支持历史版本。&lt;/p>
&lt;p>这种国内最好用的应该是坚果云，是同步文件、笔记等不怎么占空间的数据的最佳选择，但是如果要同步的数据量较大就要付费了（上传每月限制1G）；如果你使用office 365的话，可以尝试&lt;em>OneDrive&lt;/em>，深度集成windows，空间足够大，不足之处在于不能选择已有的文件夹同步；如果你喜欢Google全家桶，那么可以使用&lt;em>Google Drive&lt;/em>（配合国外edu邮箱可以做到无限空间）。&lt;/p>
&lt;p>&lt;strong>（3）支持Webdav（第三方应用可以读写）&lt;/strong>&lt;/p>
&lt;p>一般来说有这种需求的都是应用数据的备份，比如软件配置、浏览器书签、账号设置等等，这种一般单独注册一个支持Webdav的网盘即可，对空间和速度的要求都不高。比如我用坚果云备份了一些软件的配置信息防止电脑重装配置丢失；在我切换chrome和edge浏览器期间，一直使用box配合浏览器插件实时同步两个浏览器的所有书签。&lt;/p>
&lt;p>支持Webdav的网盘国内有坚果云、城通，国外有Dropbox，Box等，此外NAS和Seafile也同样支持。&lt;/p>
&lt;p>&lt;strong>（4）你有自己的云服务器&lt;/strong>&lt;/p>
&lt;p>你都有服务器了，还..&lt;span alt="hide">搭建一个Seafile就可以实现存储、同步、协同等上述各种功能了&lt;/span>&lt;/p>
&lt;p>&lt;strong>（5）“终极”解决方案&lt;/strong>&lt;/p>
&lt;p>最重要的数据，当然放在自己手里最靠谱，云存储的本质也只是你的数据某地某机房的某块硬盘里安安静静躺着而已。所以如果&lt;del>家里有这个条件的&lt;/del>，可以自己买硬盘存储，当然了，自购硬盘也会有诸多问题，要拆主机安装、电脑要开着才能使用、无法在家里之外的环境使用....这种方式更适合冷备份。&lt;/p>
&lt;p>如果想要一个随时随地都可以访问到的“云空间”，最好的解决方案就是自己搭建/购买一个NAS。&lt;/p>
&lt;details>
&lt;summary>对NAS感兴趣的话点开观看&lt;/summary>
&lt;br>
NAS，全程是网络附属存储，本质就是你的另一台电脑，里面搭载着你想要用来存储数据的硬盘。我们知道系统不止有Windows，还有MacOS，Linux等，这类系统的主要功能是娱乐和办公，NAS也可以理解成为一类操作系统，只不过它的主要功能就是存储和文件管理。目前最主流的NAS系统有群晖DSM，威联通QTS，万由U-Nas，FreeNAS，UNRAID等等，其中最出名的就是群晖DSM和威联通QTS，他们是提供全套解决方案的，购买后插上硬盘就可以使用了。
&lt;br>&lt;br>
再说回存储，我们知道硬盘是有寿命的，尤其是固态硬盘。我们一般使用机械硬盘来备份数据，但即使是机械硬盘也会因为各种原因损坏，所以有了RAID这个东西，中文名叫磁盘阵列。它的作用简单来说就是将几块硬盘并作一块，就算硬盘坏了一个，你的数据也不会丢失。此外，还可以提高数据读写速度、提供数据容错等功能。拿我的个人经验来说，我会拿两块4T的硬盘组成RAID1（这样实际可用空间是4T）来存储我最重要的数据（照片、视频、文章、个人资料等），剩下几块单独使用即可（一般会放影视资源以及一些我觉得即使丢了也无所谓的数据）。至于如何挑选硬盘就是另外一个话题了，这里不做讨论。
&lt;br>
&lt;/details>
&lt;h3 id="12-其他类">12. 其他类&lt;/h3>
&lt;h4 id="clash-for-windowshttpsgithubcomfndroidclash_for_windows_pkgreleases">&lt;a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">Clash for windows&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Clash是一个 Go 语言开发的多平台代理客户端，本软件为Clash 的 Windows图形客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：全局流量代理，界面符合审美，自定义规则&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/BUgi42AudjGprmP.png" alt="image-20211202235657168">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：本软件不提供服务器信息，URL 及配置文件都由服务商提供，在clash中导入即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：SS、SSR、V2ray等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="wallpaper-engine">Wallpaper Engine&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Wallpaper Engine是由Kristjan Skutta所开发的一款动态壁纸软件，支持各种类型的壁纸，包括2D和3D动画，网站，视频，甚至某些应用程序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：~~steam上唯一的买了还要玩的游戏。~~桌面动态壁纸，不怎么占内存，创意工坊可以下载其他人制作的壁纸，甚至可以在桌面上玩互动游戏。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/DIxUnhTEtNoZS35.png" alt="image-20211202235140350">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：需通过&lt;a href="https://store.steampowered.com/">Steam&lt;/a>商店购买，18R&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：第一次安装需要steam，设置开机启动后面就不需要了，当然了浏览创意工坊还是需要的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="eartrumpethttpswwwmicrosoftcomzh-cnpeartrumpet9nblggh516xpactivetabpivotoverviewtab">&lt;a href="https://www.microsoft.com/zh-cn/p/eartrumpet/9nblggh516xp?activetab=pivot:overviewtab">EarTrumpet&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：EarTrumpet 是一款功能强大的 Windows 音量控制应用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：可以很方便的单独为各个应用设置音量，windows自带的功能，只是入口没那么方便。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：微软应用商店UWP，&lt;font style="background-color:#8bc34a">免费&lt;/font>下载&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后任务管理器会出现音量图标，设置原本的音量图标不显示即可，单机图标即可出现下图所示的调节音量界面。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211127191256910.png" alt="image-20211127191256910" style="zoom:33%;" />
&lt;/li>
&lt;/ul>
&lt;h4 id="fluxhttpsjustgetfluxcom">&lt;a href="https://justgetflux.com/">f.lux&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：f.lux是一款根据时间变化来改变屏幕色温的软件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：喜欢暖色，相比与win10自带的夜览，设置更加丰富。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后设置经纬度就可以自动变化色温了，当然也有更专业的设置可以自己研究，&lt;strong>设计师慎用&lt;/strong>。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211127192252616.png" alt="image-20211127192252616" style="zoom:50%;" />
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>本文涉及到的一些软件的安装包已经上传到&lt;a href="https://www.aliyundrive.com/s/6P9Ftt2bD6v">阿里云盘&lt;/a>，方便某些开源软件网络问题无法下载的小伙伴们获取。&lt;/p>
&lt;p>完。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/series/2021/12/windows%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8E%A8%E8%8D%90/" term="windows软件不完全推荐" label="windows软件不完全推荐"/><category scheme="https://kiwi4814.github.io/tags/2021/12/windows/" term="windows" label="windows"/><category scheme="https://kiwi4814.github.io/tags/2023/02/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/></entry><entry><title type="text">常见方法论和心理效应</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/methodology/"/><id>https://kiwi4814.github.io/posts/2021/methodology/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-12-22T22:42:13+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本文介绍了一些在工作和生活中经常听到的一些方法论名词以及心里效应，比如PCDA、5W1H、SMART原则、沉默成本、必要难度等等。</summary><content type="html">&lt;h2 id="一思考技巧与模板">一、思考技巧与模板&lt;/h2>
&lt;h3 id="1-scqa">1. SCQA&lt;/h3>
&lt;p>SCQA模型是一个“结构化表达”工具，是麦肯锡咨询顾问芭芭拉·明托在《金字塔原理》中提出的。&lt;/p>
&lt;p>S（Situation）情景——由大家都熟悉的情景、事实引入。
C（Complication）冲突——实际情况往往和我们的要求有冲突。
Q（Question）疑问——怎么办？
A（Answer）回答——我们的解决方案是……&lt;/p>
&lt;h3 id="2-pcda">2. PCDA&lt;/h3>
&lt;p>PDCA循环是美国质量管理专家休哈特博士提出的，后由戴明采纳普及，又称戴明环。&lt;/p>
&lt;p>&lt;strong>P——Plan（计划）&lt;/strong>
包括方针和目标的确定，以及活动规划的制定。&lt;/p>
&lt;p>&lt;strong>D——Do（执行）&lt;/strong>
根据已知的信息，设计具体的方法、方案和计划布局；再根据设计和布局，进行具体运作，实现计划中的内容。&lt;/p>
&lt;p>&lt;strong>C——Check（检查）&lt;/strong>
总结执行计划的结果，分清哪些对了，哪些错了，明确效果，找出问题。&lt;/p>
&lt;p>&lt;strong>A——Action（处理）&lt;/strong>
对总结检查的结果进行处理，对成功的经验加以肯定，并予以标准化；对于失败的教训也要总结，引起重视。对于没有解决的问题，应提交给下一个PDCA循环中去解决。&lt;/p>
&lt;h3 id="3-mece">3. MECE&lt;/h3>
&lt;p>MECE分析法(Mutually Exclusive Collectively Exhaustive)，中文意思是相互独立、完全穷尽。也就是对于一个重大的议题，能够做到不重迭、不遗漏的分类，而且能够借此有效把握问题的核心，并解决问题的方法。&lt;/p>
&lt;h3 id="4-5w1h法则">4. 5W1H法则&lt;/h3>
&lt;p>What —— 设置的目标&lt;/p>
&lt;p>Where —— 施展的平台&lt;/p>
&lt;p>When —— 完成的期限&lt;/p>
&lt;p>Who —— 任务的主体&lt;/p>
&lt;p>Why —— 产生的动机&lt;/p>
&lt;p>How —— 解决的策略&lt;/p>
&lt;h3 id="5-smart原则">5. SMART原则&lt;/h3>
&lt;p>&lt;strong>SMART原则&lt;/strong>是&lt;a href="https://zh.wikipedia.org/wiki/%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86">目标管理&lt;/a>中的一种方法。目标管理的任务是有效地进行成员的组织与目标的制定和控制以达到更好的工作绩效，由管理学大师&lt;a href="https://zh.wikipedia.org/wiki/%E5%BD%BC%E5%BE%97%C2%B7%E6%9D%9C%E6%8B%89%E5%85%8B">彼得·杜拉克&lt;/a>于1954年首先提出。SMART原则便是为了达到这一目的而提出的一种方法，目前在企业界有广泛的应用。它的首次出现被认为是在1981年12月发行的《&lt;a href="https://zh.wikipedia.org/w/index.php?title=%E7%AE%A1%E7%90%86%E8%AF%84%E8%AE%BA&amp;amp;action=edit&amp;amp;redlink=1">管理评论&lt;/a>》（Management Review）上（由George Doran、Arthur Miller和James Cunningham编著）。&lt;/p>
&lt;p>SMART原则中的“S”、“M”、“A”、“R”、“T”五个字母分别对应了五个英文单词：Specific（明确）、Measurable（可衡量）、Achievable（可达成）、Relevant（相关）和Time-bound（有时限）。&lt;/p>
&lt;h2 id="二心理学效应">二、心理学效应&lt;/h2>
&lt;h3 id="1-框格效应">1. 框格效应&lt;/h3>
&lt;p>框架效应（英语：Framing effect）是一种认知偏差，人们根据选项是否具有积极或消极的含义来决定选项——例如作为损失或收益。人们在呈现正面框架时倾向於避免风险，而在呈现负面框架时寻求风险。 在假定的事件发展中，收益和损失被定义为结果的描述（例如，失去或挽救的生命、治疗和未治疗的疾病患者等）。 前景理论表明，损失比等效收益更显著，确定收益（确定性效应和伪确定性效应（英语：Pseudocertainty effect））优于概率收益，並且概率损失优于确定性损失。&lt;/p>
&lt;p>框架效应的危险之一是人们经常在两个框架之一的背景下被提供选择。 这个概念有助于理解社会运动中的框架分析，也有助于形成政治舆论，其中政治化妆师在政治民意调查中发挥着重要作用，政治民意调查旨在鼓励对委托进行民意调查的组织有益的回应。有人认为，这种技术的使用正在诋毁政治民意调查本身。如果向人们提供充足的可信信息，这种影响会减少甚至消除。&lt;/p>
&lt;h3 id="2-心理账户">2. 心理账户&lt;/h3>
&lt;p>心理账户(心理会计学)，最早由 2017 年的诺奖得主理查德·塞勒提出。&lt;/p>
&lt;p>塞勒认为，每个人都有心理账户，通过该心理账户来进行各种各样的经济决策。 通过心理账户，可以解释人的不理性经济决策。 心理账户是芝加哥大学行为科学教授理查德·萨勒(Richard Thaler)提出的概念。他认为，除了荷包这种实际账户外，在人的头脑里还存在著另一种心理账户。人们会把在现实中客观等价的支出或收益在心理上划分到不同的账户中。比如，我们会把工资划归到靠辛苦劳动日积月累下来的“勤劳致富”账户中；把年终奖视为一种额外的恩赐，放到“奖励”账户中；而把买彩票贏来的钱，放到“天上掉下的馅饼”账户中。&lt;/p>
&lt;p>对於“勤劳致富”账户里的钱，我们会精打细算，谨慎支出。而对“奖励”账户里的钱，我们就会抱著更轻鬆地態度花费掉，比如买一些平日捨不得买的衣服，作为送给自己的新年礼物等。“天上掉下的馅饼”账户里的钱就最不经用了。通常是来也匆匆，去也匆匆型。想想那些中了头彩的人，不论平日多么的节俭，一旦中了500万，也会立马变得豪情万丈，义薄云天。这时的他们通常会有一些善举，比如捐出一部分给贫困儿童。这就是心理账户在起用。当然，他们对社会的贡献是值得称颂的。&lt;/p>
&lt;p>实际上，绝大多数的人都会受到心理账户的影响，因此总是以不同的態度对待等值的钱財，並做出不同的决策行为。从经济学的角度来看，一万块的工资、一万块的年终奖和一万块的中奖彩票並没有区別，可是普通人却对三者做出了不同的消费决策。&lt;/p>
&lt;h3 id="3-沉没成本">3. 沉没成本&lt;/h3>
&lt;p>沉没成本常用来和可变成本（Prospective Costs）作比较，可变成本可以被改变，而沉没成本则不能被改变。在微观经济学理论中，做决策时仅需要考虑可变成本。如果同时考虑到沉没成本（这被微观经济学理论认为是错误的），那结论就不是纯粹基于事物的价值作出的。&lt;/p>
&lt;p>举例来说，如果某人预订了一张电影票，已经付了票款且假设不能退票。此时付的价钱已经不能收回，就算不看电影钱也收不回来，电影票的价钱算作沉没成本。&lt;/p>
&lt;p>当然有时候沉没成本只是价格的一部分。比方说某人买了一辆自行车，然后骑了几天低价在二手市场卖出。此时原价和卖出价中间的差价就是沉没成本。而且这种情况下，沉没成本随时间而改变，例如某人留着那辆自行车骑的时间越长，一般来说因为折旧而使卖出价会越低。&lt;/p>
&lt;p>大多数经济学家们认为，如果人是理性的，那就不该在做决策时考虑沉没成本。比如在前面提到的看电影的例子中，会有两种可能结果：&lt;/p>
&lt;ol>
&lt;li>付钱后发觉电影不好看，但忍受着看完；&lt;/li>
&lt;li>付钱后发觉电影不好看，退场去做别的事情。&lt;/li>
&lt;/ol>
&lt;p>两种情况下都已经付钱，所以不应该考虑退钱这件事情。如果后悔买票了，那么当前的决定应该是基于是否想继续看这部电影，而不是为这部电影付了多少钱。此时的决定不应该考虑到买票的事，而应该以看免费电影的心态来作判断。经济学家们往往建议选择后者，这样只是花了点冤枉钱，还可以通过腾出时间来做其他更有意义的事来降低机会成本，而选择前者还要继续受冤枉罪。&lt;/p>
&lt;p>人类与其他物种都对时间沉没成本有一定的敏感性。&lt;/p>
&lt;h3 id="4-必要难度">4. 必要难度&lt;/h3>
&lt;p>「必要难度」理论，英文是 Desirable difficulty，最早是由加州大学洛杉矶分校的 Robert Bjork 和 Elizabeth Bjork 教授在 1994 年提出。这个理论简单来说就是我们应该让自己学习记忆的过程始终保持必要的难度，这种难度虽然在最初会减慢你的学习速度，但是长期来看对学习效果更加有利。&lt;/p>
&lt;p>必要难度理论指出，人的记忆其实有两个不同的维度，分别是存储强度（Storage Strength）和提取强度（Retrieval Strength），两者存在密切的相关性，主要表现在以下三个方面：&lt;/p>
&lt;ul>
&lt;li>当我们学习记忆时，信息的存储强度和提取强度同步提升。&lt;/li>
&lt;li>在学习过程结束，存储强度越高，提取强度自然也越高，两者呈正相关。&lt;/li>
&lt;li>当我们再次学习记忆，检索强度越低，存储强度反而会越高，两者负相关。&lt;/li>
&lt;/ul>
&lt;p>听起来有点复杂，其实简单来说就是，你如果记忆的过程越容易，那么你忘的就越快，反之如果记起来很艰辛，那么也不那么容易忘记。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2021/12/%E6%9D%82%E8%B0%88/" term="杂谈" label="杂谈"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E6%96%B9%E6%B3%95%E8%AE%BA/" term="方法论" label="方法论"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E5%BF%83%E7%90%86%E6%95%88%E5%BA%94/" term="心理效应" label="心理效应"/></entry><entry><title type="text">流媒体时代如何找到自己想看的电影</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/streaming-media/"/><id>https://kiwi4814.github.io/posts/2021/streaming-media/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-12-04T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本文仅讨论在国内正规渠道无法看到的影视资源，无特殊说明一般代指美剧，有错误欢迎指出。……</summary><content type="html">&lt;head>
&lt;link rel="stylesheet" href="https://kiwi4814.github.io//unpkg.com/heti/umd/heti.min.css">
&lt;/head>
&lt;p>&lt;strong>本文仅讨论在国内正规渠道无法看到的影视资源，无特殊说明一般代指美剧，有错误欢迎指出。&lt;/strong>&lt;/p>
&lt;h2 id="片源哪里来">片源哪里来？&lt;/h2>
&lt;p>当前最热门的流媒体平台有网飞（Netflix），HBO（HBO Max），迪士尼（Disney+），苹果（Apple TV+），Hulu等等。对于身处国内的我们，是如何看到一部美剧的呢？&lt;/p>
&lt;h3 id="1-web-dl">1. WEB-DL&lt;/h3>
&lt;p>我们以当下最热门的流媒体网飞为例，网飞在流媒体上映电视剧后，有专门的团队会对这些视频流进行破解和抓取，拿到的这个资源一般为Web-DL，一般来说这个清晰度你可以理解为你在腾讯看的1080P高清。一般这种破解组我们称之为“0-day”发行组。目前像网飞这样的巨头流媒体已经会配上46国字幕了，而没有字幕的一手资源就是我们常说的“生肉”。&lt;/p>
&lt;p>这时候一般我们已经能从各大BT网站找到种子并进行下载了，如果是没有字幕的，国内的字幕组会同步进行翻译和校对，英语不好的为其配上字幕就可以进行观看了。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>字幕组的挑选&lt;/strong>&lt;/p>
&lt;p>首先每个字幕组都有自己擅长的领域，且不说不同语种，同样是美剧也有差异，不同地域、不同文化带来的差异巨大。比如说人人影视、伊甸园、风软、破烂熊被称之为“四大美剧字幕组”，他们翻译速度快、质量也有所保障，因为人数多规模大，不同的剧总有擅长的人来进行翻译。&lt;/p>
&lt;p>当然，也有一些小众的字幕组，虽然人少但是专注某一部剧或者某一相关领域的翻译也很厉害，比如翻译了Rick and Morty的电波字幕组（与A站合作了）以及权游的专属字幕组衣柜军团，我们在看这类剧的时候，这种字幕组往往才是看剧的最佳伴侣。&lt;/p>
&lt;p>最后，向每一个为爱发电的字幕组致敬，让我们看到了更多优秀的作品。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-蓝光片源">2. 蓝光片源&lt;/h3>
&lt;p>大概半年（没有考证，体感时间，具体可从&lt;a href="https://www.blu-ray.com/">这里&lt;/a>查），无论是电影还是电视剧一般会出蓝光光碟，这时候也会有破解组负责购买蓝光片源并进行破解，后面就分很多种了，原盘BDMV体积最大，里面包括了各国音轨、花絮等等，还有经过无损封装的Remux、BluRay以及有损压制的BDrip就是我们下载高清电影时最常下载的几种格式了，这里来举两个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Interstellar&lt;/span>&lt;span class="mf">.2014&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BluRay&lt;/span>&lt;span class="mf">.2160&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x265&lt;/span>&lt;span class="mf">.10&lt;/span>&lt;span class="nx">bit&lt;/span>&lt;span class="mf">.4&lt;/span>&lt;span class="nx">Audio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mUHD&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">FRDS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mkv&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面这个是星际穿越的资源名称，每一小节以小点（.）隔开，其中前两段意思很明显，就是电影名称+电影年代，第三节和第四节BluRay.2160p代表这个资源是来自蓝光原盘的2016P的清晰度。&lt;/p>
&lt;p>x265.10bit.4Audio这三段代表压制参数，分别指的是：编码标准、编码精度、音轨数量，此外还有可能有声道、是否杜比、HDR等信息，这里就不展开细讲了，我也是一知半解。&lt;/p>
&lt;p>最后一段是压制组，上面那些参数就是他们在对蓝光资源进行压制时候的参数，不同的压制组特点各不相同，并且有的压制组会在压制的时候就把精修版的字幕也一同封装进去，这样的资源一般质量就很高了，收藏级的。&lt;/p>
&lt;p>再看下面这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Money&lt;/span> &lt;span class="nx">Heist&lt;/span> &lt;span class="nx">Complete&lt;/span> &lt;span class="nx">Series&lt;/span> &lt;span class="mi">1080&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="nx">NF&lt;/span> &lt;span class="nx">WEB&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">DL&lt;/span> &lt;span class="nx">DDP5&lt;/span>&lt;span class="mf">.1&lt;/span> &lt;span class="nx">x264&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">DoA&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其实从上面的经验我们就可以看出来，这是纸钞屋全五季的网飞1080P资源。其中NF代表网飞（Netflix），如果是HBO出品的这里就会变成HMAX，DDP5.1代表声道为杜比数字5.1声道，DoA为压制组。是不是很简单？&lt;/p>
&lt;p>我们在国内的一些下载网站上看到的&lt;code>XXX.MKV&lt;/code>，一般来说资源都是从以上的压制组流出的，而这些资源会被再次进行封装，压缩，配上字幕甚至强行加上广告，这就是我们在各种“在线网站”看到的视频的来源了。&lt;/p>
&lt;h2 id="离线的生活">离线的生活&lt;/h2>
&lt;p>基于以上种种，如果没有条件购买/订阅流媒体资源的话，我仍然推荐下载观看的形式，并且推荐使用BT进行下载。&lt;/p>
&lt;p>&lt;strong>如果不想下载观看，可以拉到最后看附录中提供的&lt;a href="https://www.notion.so/8878c1c1b1c24380a492502549b0fe51">一些网站&lt;/a>，由于这些网站本身就有很大的不确定性（靠广告盈利，用爱发电的少），随时有可能关站、变卖，时效性可能不长，酌情参考即可。&lt;/strong>&lt;/p>
&lt;h3 id="1-什么是btpt">1. 什么是BT/PT&lt;/h3>
&lt;p>&lt;strong>BT&lt;/strong>&lt;/p>
&lt;p>来自维基百科的定义——&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>BitTorrent协议（简称BT，俗称比特洪流、BT下载）是用在&lt;a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C">对等网络&lt;/a>中&lt;a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB">文件分享&lt;/a>的&lt;a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE">网络协议&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F">程序&lt;/a>。和&lt;a href="https://zh.wikipedia.org/wiki/%E7%82%B9%E5%AF%B9%E7%82%B9%E5%8D%8F%E8%AE%AE">点对点&lt;/a>（point-to-point）的协议&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F">程序&lt;/a>不同，它是用户群对用户群（peer-to-peer），而且用户越多，下载同一档案的人越多，下载该档案的速度越快。且下载后，继续维持上传的状态，就可以“分享”，成为其用户端节点下载的&lt;a href="https://zh.wikipedia.org/wiki/%E7%A7%8D%E5%AD%90%E6%96%87%E4%BB%B6">种子文件&lt;/a>（.torrent），同时上传及下载。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>简单来说，就说你用迅雷下载的资源，这些资源不是存放到某个特定的地方让你下载的，你下载的资源可能就来源于我的电脑，来源于上千上万个同时在下载和上传这个资源的人，其本质就是数据的交换。&lt;/p>
&lt;p>发布资源的人将资源生成并提供一个.torrent文件，即&lt;a href="https://zh.wikipedia.org/wiki/%E7%A7%8D%E5%AD%90%E6%96%87%E4%BB%B6">种子文件&lt;/a>，也简称为“种子”。而下载者需要先得到这个种子，然后开始下载，也就是和上传者在交换数据。所以同一个种子文件，下载的人越多，下载速度也就越快。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>PT&lt;/strong>&lt;/p>
&lt;p>PT的全称是Private Tracker，是一种改良自BitTorrent协议的P2P下载方式，“Private Tracker”指私有种子服务器。与BT最大的不同点为：可进行私密范围下载，并且记录每一个用户的详细数据。&lt;/p>
&lt;p>PT可进行私密范围下载，因此提供PT的论坛（网络论坛）大多非公开的，采用邀请制或是不定时开放注册。由已注册的用户向自己所信任的人发送邀请，以确保用户质量。有一些站点还会允许用户通过官方渠道捐助或购买邀请码以获得邀请。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>BT与PT的不同之处&lt;/strong>&lt;/p>
&lt;p>由于BT的特殊性，下载者必须开启上传才可以保证资源让其他人下的到，也就是要“人人为我，我为人人”，如果下载完成就关闭上传或者修改文件名，其他人就无法从你这里获取资源了。久而久之，一些老资源就会”绝版“。所以PT站一般有着严格的规则，必须持续做种或者有足够的上传量才可以在PT站存活，这也是PT站小众和门槛高的原因。&lt;/p>
&lt;p>其次，压制组一般都会活跃在各大PT站，甚至某些PT站就是压制组的大本营，所以PT站更容易接触到一手资源。&lt;/p>
&lt;h3 id="2-用什么工具">2. 用什么工具&lt;/h3>
&lt;p>俗话说，&lt;del>差生文具多&lt;/del>。那么作为一个使用者，我们该选择哪些工具去下载和观看呢？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>离线播放器&lt;/p>
&lt;p>&lt;strong>PotPlayer&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载器&lt;/p>
&lt;p>可以选择&lt;strong>迅雷、比特彗星、FDM、Aria2&lt;/strong>等等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PT下载器&lt;/p>
&lt;p>这里所指的PT下载器并不只有PT能用，作为一个BT客户端，只要是种子文件都可以进行下载。&lt;/p>
&lt;p>PT站点一般只有特定的下载器才能使用，不同PT站的规则不太一样，你可以选择通用一点的，比如&lt;strong>qBittorrent 4.x、uTorrent 2.0.x&lt;/strong>或者按照PT站的要求选用即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-从哪里下载">3. 从哪里下载&lt;/h3>
&lt;p>前文提到过，下载者必须获取到”种子”文件才可以进行下载，那么去哪里获得这些种子文件呢？这里还是分BT和PT分别进行介绍。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>BT种子的下载&lt;/strong>&lt;/p>
&lt;p>如果你在国外，可以直接去&lt;a href="https://thepiratebay.org/index.html">海盗湾&lt;/a>、&lt;a href="https://proxyrarbg.org/torrents.php">RARBG&lt;/a>、&lt;a href="https://yts.mx/">YTS&lt;/a>、&lt;a href="https://kickasscr.net/">KAT&lt;/a>等等“大站”搜索。&lt;/p>
&lt;p>国内的话虽然也有很多很多磁力站，但除了少数几个，大部分站点存活时间都很短，这就导致我们如果要通过BT下载的话经常要更换站点，很是麻烦。&lt;/p>
&lt;p>但是不用担心，已经有很多“网络大神”帮我们整理好了，也无需特地记忆，需要找的时候打开百度检索就好了，比如下图这样子的：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220327153306501.png" alt="image-20220327153306501">&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>这里随便贴几个磁力站或者导航站：&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://tellme.pw/btsow">BTSOW&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.yuhuage52.xyz/">雨花阁 - 简单好用的BT搜索引擎&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.yeeach.com/post/1367">2021年可用、好用、值得推荐的磁力搜索引擎【更新版】-出家如初,成佛有余&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.xerer.com/archives/27010.html">75个 bt磁力搜索网站推荐汇总（亲测可用，可直接访问）&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://ifun.cool/">趣导航 | 趣导航搜集互联网各种优秀的网站网址，打造全网最实用简洁的网址导航，同时支持网址收录，网址导航，选趣导航！&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://funletu.com/">Funletu - 发现好物，分享资源，推荐精品&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>当然了，除了磁力站之外，在附录中的资源站很多也都支持BT种子或者磁力链接的下载，嫌麻烦的可以直接去搜索即可。&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>&lt;strong>PT站点介绍&lt;/strong>&lt;/p>
&lt;p>国内 PT 站可以划分为两个系别：教育网 PT 站 与 公网 PT 站。&lt;/p>
&lt;p>其中教育网以北京邮电大学的北邮人、西北工业大学的蒲公英、东北大学的六维空间、天津大学的北洋园等等为主。公网PT站点很多，也有很多因为版权问题隐没的，目前主流的几大站点有：CHD、HdChina、TTG、M-Team、BtSchool等等，由于PT站点的私密性以及邀请制度，加之门槛较高，需要有较大的硬盘空间和做种机器，所以这里不多做介绍了，有兴趣的小伙伴可以自行查阅相关资料，打开新的世界。&lt;/p>
&lt;p>完。&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://www.notion.so/8878c1c1b1c24380a492502549b0fe51">附：一些资源站&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2021/12/%E6%95%B0%E5%AD%97%E7%94%9F%E6%B4%BB/" term="数字生活" label="数字生活"/><category scheme="https://kiwi4814.github.io/tags/2021/12/bt/" term="BT" label="BT"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E6%B5%81%E5%AA%92%E4%BD%93/" term="流媒体" label="流媒体"/></entry><entry><title type="text">WSL安装oh-my-posh踩坑记录</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/wsl-oh-my-posh/"/><id>https://kiwi4814.github.io/posts/2021/wsl-oh-my-posh/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-11-21T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">整体思路参考此文：Windows Terminal Custom Prompt Setup | Microsoft Docs 一、安装NerdFonts 推荐安装Ca……</summary><content type="html">&lt;p>整体思路参考此文：&lt;a href="https://docs.microsoft.com/zh-cn/windows/terminal/tutorials/custom-prompt-setup">Windows Terminal Custom Prompt Setup | Microsoft Docs&lt;/a>&lt;/p>
&lt;h3 id="一安装nerdfontshttpswwwnerdfontscomfont-downloads">一、安装&lt;a href="https://www.nerdfonts.com/font-downloads">NerdFonts&lt;/a>&lt;/h3>
&lt;p>推荐安装&lt;strong>Caskaydia Cove Nerd Font&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211121161954784.png" alt="image-20211121161954784">&lt;/p>
&lt;h3 id="二安装oh-my-posh">二、安装oh-my-posh&lt;/h3>
&lt;p>文章中采用了两种方式，一种是为powershell单独安装，另外一种是使用包管理器Winget同时为WSL和PowerShell安装。下面采用的是第二种：&lt;/p>
&lt;h4 id="1-安装winget">1. 安装Winget&lt;/h4>
&lt;p>官方中文文档：&lt;a href="https://docs.microsoft.com/zh-cn/windows/package-manager/">Windows 程序包管理器&lt;/a>，应用商店直接搜索 app installer安装即可。&lt;/p>
&lt;h4 id="2-安装oh-my-posh">2. 安装oh-my-posh&lt;/h4>
&lt;p>安装命令如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>winget install JanDeDobbeleer.OhMyPosh
&lt;/code>&lt;/pre>&lt;p>此命令将会安装：&lt;/p>
&lt;ul>
&lt;li>oh-my-posh windows程序&lt;/li>
&lt;li>oh-my-posh-wsl&lt;/li>
&lt;li>oh-my-posh 主题&lt;/li>
&lt;/ul>
&lt;p>安装日志如下，仅供参考&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">PS &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Users&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">heqifeng&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">winget&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">JanDeDobbeleer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">OhMyPosh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;msstore&amp;#34;&lt;/span>&lt;span class="err">源要求在使用前查看以下协议。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Terms&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">Transaction&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">//&lt;/span>&lt;span class="n">aka&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">microsoft-store&lt;/span>&lt;span class="n">-terms-of-transaction&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">源要求发送当前计算机的地理区域才能正常工作。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">是否同意所有源协议条款&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="no">Y&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">是&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">N&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">否:&lt;/span> &lt;span class="n">Y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">已找到&lt;/span> &lt;span class="nb">Oh &lt;/span>&lt;span class="n">My&lt;/span> &lt;span class="n">Posh&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">JanDeDobbeleer.OhMyPosh&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">版本&lt;/span> &lt;span class="mf">6.8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">此应用程序由其所有者授权给你。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Microsoft&lt;/span> &lt;span class="err">对第三方程序包概不负责，也不向第三方程序包授予任何许可证。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Downloading&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">//&lt;/span>&lt;span class="n">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">JanDeDobbeleer&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">releases&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">download&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">v6&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mf">0&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">install-amd64&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">exe&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">██████████████████████████████&lt;/span> &lt;span class="mf">15.8&lt;/span> &lt;span class="n">MB&lt;/span> &lt;span class="p">/&lt;/span> &lt;span class="mf">15.8&lt;/span> &lt;span class="n">MB&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">已成功验证安装程序哈希&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">正在启动程序包安装&lt;/span>&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">已成功安装&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="21-查看主题">2.1 &lt;strong>查看主题&lt;/strong>&lt;/h5>
&lt;p>官方文档：&lt;a href="https://ohmyposh.dev/docs/themes">prompt themes in the Oh My Posh docs&lt;/a>&lt;/p>
&lt;p>文章给出的命令如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>Get-ChildItem -Path &amp;#34;~\AppData\Local\Programs\oh-my-posh\themes\*&amp;#34; -Include &amp;#39;*.omp.json&amp;#39; | Sort-Object Name | ForEach-Object -Process {
$esc = [char]27
Write-Host &amp;#34;&amp;#34;
Write-Host &amp;#34;$esc[1m$($_.BaseName)$esc[0m&amp;#34;
Write-Host &amp;#34;&amp;#34;
oh-my-posh --config $($_.FullName) --pwd $PWD
Write-Host &amp;#34;&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>这里注意路径需要根据实际情况去修改。&lt;/p>
&lt;blockquote>
&lt;p>WSL下的路径为：/mnt/c/Users/heqifeng/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.wsl【这里列出来没有实际作用，只是想说明，wsl的文件也在windows下的安装路径上】&lt;/p>
&lt;p>Windows下的路径为：C:\Users\heqifeng\AppData\Local\Programs\oh-my-posh&lt;/p>
&lt;/blockquote>
&lt;p>此处如果使用第一种方式，即单独为powershell安装的话，可以使用&lt;code>Get-PoshThemes&lt;/code>命令直接查看主题。&lt;/p>
&lt;p>【注】第二种方式没有试过这个命令，不知道是否可行（因为是重新按照第一种方式单独执行了命令，在这之前没有执行过主题命令）&lt;/p>
&lt;h5 id="22-增加启动脚本">2.2 增加启动脚本&lt;/h5>
&lt;p>选择好自己的主题之后，分别在PowerShell和WSL中修改配置文件即可。&lt;/p>
&lt;h6 id="221-powershell">2.2.1 PowerShell&lt;/h6>
&lt;p>修改PowerShell的启动配置文件，在末尾加上脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-init&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-shell&lt;/span> &lt;span class="n">pwsh&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-config&lt;/span> &lt;span class="p">~/&lt;/span>&lt;span class="n">jandedobbeleer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">omp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">json&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">Invoke-Expression&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-PoshPrompt&lt;/span> &lt;span class="n">-Theme&lt;/span> &lt;span class="n">jandedobbeleer&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中第一行代表初始化oh-my-posh，第二行代表设置主题。&lt;/p>
&lt;p>按照文档的说法在powershell中执行命令：&lt;code>notepad $PROFILE&lt;/code>。提示记事本无法找到路径，因为该文档本身并不存在。两种解决方法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>执行一个判断命令，没有则创建一个&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(!(&lt;/span>&lt;span class="nb">Test-Path&lt;/span> &lt;span class="n">-Path&lt;/span> &lt;span class="nv">$PROFILE&lt;/span> &lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nb">New-Item&lt;/span> &lt;span class="n">-Type&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="n">-Path&lt;/span> &lt;span class="nv">$PROFILE&lt;/span> &lt;span class="n">-Force&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用VS Code打开【[排查](&lt;a href="https://stackoverflow.com/questions/8997316/powershell-profile-is-pointing-to-a-path-that-i-cant-find-and-setting-permane">windows - Powershell: $profile is pointing to a path that I can't find and setting permanent path - Stack Overflow&lt;/a>)】&lt;/p>
&lt;pre tabindex="0">&lt;code>code $PROFILE
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>执行&lt;code>code $PROFILE&lt;/code>命令时遇到的第一个问题是：&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>无法加载文件 D:\Users\heqifeng\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，因为在此系统上禁止运行
脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。
所在位置 行:1 字符: 3
+ . &amp;#39;D:\Users\heqifeng\Documents\WindowsPowerShell\Microsoft.PowerShell ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo : SecurityError: (:) []，PSSecurityException
+ FullyQualifiedErrorId : UnauthorizedAccess
&lt;/code>&lt;/pre>&lt;p>按照[文档](&lt;a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2">关于执行策略 - PowerShell | Microsoft Docs&lt;/a>)排查后，执行下面命令解决：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 查询当前的执行策略&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">get-executionpolicy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 修改执行策略（以管理员身份打开powershell）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set-executionpolicy&lt;/span> &lt;span class="n">remotesigned&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解决完执行策略的问题之后，修改完配置文件后重新打开windows terminal。&lt;/p>
&lt;p>&lt;strong>这里遇到第二个问题：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-PoshPrompt&lt;/span> &lt;span class="err">:&lt;/span> &lt;span class="err">无法将“&lt;/span>&lt;span class="nb">Set-PoshPrompt&lt;/span>&lt;span class="err">”项识别为&lt;/span> &lt;span class="n">cmdlet&lt;/span>&lt;span class="err">、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>此问题没有找到原因，怀疑是第二种方式本身的安装方式有问题。解决的方法是按照第一种方式重新安装了一次：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Install-Module&lt;/span> &lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最终效果：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211121173415026.png" alt="image-20211121173415026">&lt;/p>
&lt;h6 id="222-wsl">2.2.2 WSL&lt;/h6>
&lt;p>对于WSL来说需要更新&lt;code>.bashrc&lt;/code>配置文件。&lt;/p>
&lt;p>使用命令 &lt;code>nano .bashrc&lt;/code> 打开配置文件 并将下面的脚本放进去。（下面脚本中&lt;code>paradox.omp.json&lt;/code> 为主题部分，可自行替换，你可以在&lt;code>.poshthemes&lt;/code>这个文件夹下面看到所有的主题。 ）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>oh-my-posh-wsl --init --shell bash --config ~/.poshthemes/paradox.omp.json&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考链接：&lt;a href="https://ohmyposh.dev/docs/windows">Oh My Posh documentation&lt;/a>.&lt;/p>
&lt;p>【注意】这里的路径要根据实际情况变更，直接放进去会报错。我这里的安装日志如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 编辑配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim .bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 增加下面的命令到末尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>oh-my-posh-wsl --init --shell bash --config /mnt/c/Users/heqifeng/AppData/Local/Programs/oh-my-posh/themes/paradox.omp.json&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使配置生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> .bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20211121181139938.png" alt="image-20211121181139938">&lt;/p>
&lt;p>当然了，WSL下是可以使用oh-my-zsh的，这里预留个坑位： [WSL安装oh my zsh.md](WSL安装oh my zsh.md)&lt;/p>
&lt;h6 id="223-附第一种方式的安装说明">2.2.3 附第一种方式的安装说明&lt;/h6>
&lt;p>如果不考虑在WSL上使用oh-my-posh，可以完全参考下面这篇文章操作。&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/354603010">Windows Terminal美化（oh-my-posh3）&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>下面是官方文章中对于第一种方式的说明。&lt;/strong>&lt;/em>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;em>&lt;strong>Using PowerShell, install Oh My Posh with the command:&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Install-Module&lt;/span> &lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Browse the prompt themes, with the command:&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Get-PoshThemes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Choose a theme and update your PowerShell profile with this command. (You can replace &lt;code>notepad&lt;/code> with the text editor of your choice.)&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">notepad&lt;/span> &lt;span class="nv">$PROFILE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Add the following to the end of your PowerShell profile file to set the &lt;code>paradox&lt;/code> theme. (Replace &lt;code>paradox&lt;/code> with the theme of your choice.)&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Import-Module&lt;/span> &lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-PoshPrompt&lt;/span> &lt;span class="n">-Theme&lt;/span> &lt;span class="n">paradox&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="三安装posh-git">三、安装posh-git&lt;/h3>
&lt;p>经过上面的安装记录，这里就非常简单了，按照步骤操作即可。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install posh-git using PowerShell with the command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Install-Module&lt;/span> &lt;span class="nb">posh-git&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Update your PowerShell profile file: &lt;code>notepad $PROFILE&lt;/code>. (You can replace nodepad with the text editor of your choice).&lt;/p>
&lt;p>In your PowerShell profile, add the following to the end of the file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Import-Module&lt;/span> &lt;span class="nb">posh-git&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>git设置和取消代理&lt;/p>
&lt;pre tabindex="0">&lt;code>git config --global https.proxy http://127.0.0.1:1080
git config --global https.proxy https://127.0.0.1:1080
git config --global --unset http.proxy
git config --global --unset https.proxy
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/tags/2021/12/windows/" term="windows" label="windows"/><category scheme="https://kiwi4814.github.io/tags/2023/02/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/></entry><entry><title type="text">高可用06：高可用系统设计之「其他辅助手段」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-aids/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-aids/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-10-12T16:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">高可用系列目录 高可用01：什么是高可用系统？ 高可用02：高可用系统设计之「架构高可用……</summary><content type="html">&lt;hr>
&lt;p>&lt;a href="https://kiwi4814.com/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/">高可用系列目录&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-concept/">高可用01：什么是高可用系统？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-architecture/">高可用02：高可用系统设计之「架构高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-application/">高可用03：高可用系统设计之「应用高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-server/">高可用04：高可用系统设计之「服务高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-storage/">高可用05：高可用系统设计之「存储高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-aids/">&lt;font color="orange">高可用06：高可用系统设计之「其他辅助手段」&lt;/font>&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="其他辅助手段">其他辅助手段&lt;/h2>
&lt;h3 id="1异地多活">（1）异地多活&lt;/h3>
&lt;p>异地多活架构的关键点就是异地、多活，其中异地就是指地理位置上不同的地方，类似于“不要把鸡蛋都放在同一篮子里”；多活就是指不同地理位置上的系统都能够提供业务服务，这里的“活”是活动、活跃的意思。&lt;/p>
&lt;p>异地多活架构可以分为&lt;strong>同城异区、跨城异地、跨国异地&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>同城跨区的关键在于搭建高速网络将两个机房连接起来，达到近似一个本地机房的效果。架构设计上可以将两个机房当作本地机房来设计，无须额外考虑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跨城异地的关键在于数据不一致的情况下，业务不受影响或者影响很小，这从逻辑的角度上来说其实是矛盾的，架构设计的主要目的就是为了解决这个矛盾。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跨国异地的关键主要是面向不同地区用户提供业务，或者提供只读业务，对架构设计要求不高&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>异地多活架构的代价：&lt;/p>
&lt;ul>
&lt;li>系统复杂度会发生质的变化，需要设计复杂的异地多活架构。&lt;/li>
&lt;li>成本会上升，毕竟要多在一个或者多个机房搭建独立的一套业务系统。&lt;/li>
&lt;/ul>
&lt;p>异地多活的设计原则：&lt;/p>
&lt;ul>
&lt;li>保证核心业务的异地多活&lt;/li>
&lt;li>保证核心数据最终一致性（不需要保证实时一致性）&lt;/li>
&lt;li>采用多种手段同步数据&lt;/li>
&lt;li>只保证绝大部分用户的异地多活&lt;/li>
&lt;/ul>
&lt;p>异地多活设计步骤：&lt;/p>
&lt;ul>
&lt;li>业务分级 - 常见的分级标准有：
&lt;ul>
&lt;li>&lt;strong>流量大的业务&lt;/strong>：以用户管理系统为例，业务包括登录、注册、用户信息管理，其中登录的访问量肯定是最大的。&lt;/li>
&lt;li>&lt;strong>核心业务&lt;/strong>：以 QQ 为例，QQ 的主场景是聊天，QQ 空间虽然也是重要业务，但和聊天相比，重要性就会低一些&lt;/li>
&lt;li>&lt;strong>盈利业务&lt;/strong>：同样以 QQ 为例，聊天可能很难为腾讯带来收益，因为聊天没法插入广告；而 QQ 空间反而可能带来更多收益，因为 QQ 空间可以插入很多广告，因此如果从收入的角度来看，QQ 空间做异地多活的优先级反而高于 QQ 聊天了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据分类 - 常见的数据分析维度有：
&lt;ul>
&lt;li>
&lt;p>&lt;strong>数据量&lt;/strong>：这里的数据量包括总的数据量和新增、修改、删除的量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>唯一性&lt;/strong>：唯一性指数据是否要求多个异地机房产生的同类数据必须保证唯一。例如用户 ID，如果两个机房的两个不同用户注册后生成了一样的用户 ID，这样业务上就出错了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实时性&lt;/strong>：实时性指如果在 A 机房修改了数据，要求多长时间必须同步到 B 机房，实时性要求越高，对同步的要求越高，方案越复杂。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可丢失性&lt;/strong>：可丢失性指数据是否可以丢失。例如，写入 A 机房的数据还没有同步到 B 机房，此时 A 机房机器宕机会导致数据丢失，那这部分丢失的数据是否对业务会产生重大影响。例如，登录过程中产生的 session 数据就是可丢失的，因为用户只要重新登录就可以生成新的 session；而用户 ID 数据是不可丢失的，丢失后用户就会失去所有和用户 ID 相关的数据，例如用户的好友、用户的钱等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可恢复性&lt;/strong>：可恢复性指数据丢失后，是否可以通过某种手段进行恢复，如果数据可以恢复，至少说明对业务的影响不会那么大，这样可以相应地降低异地多活架构设计的复杂度。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313163546122.png" alt="image-20220313163546122">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据同步 - 常见的数据同步方案
&lt;ul>
&lt;li>
&lt;p>&lt;strong>存储系统同步&lt;/strong>：这是最常用也是最简单的同步方式。例如，使用 MySQL 的数据主从数据同步、主主数据同步。缺点是无法定制化，例如，无论需要同步的数据量有多大，MySQL 都只有一个同步通道。因为要保证事务性，一旦数据量比较大，或者网络有延迟，则同步延迟就会比较严重。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消息队列同步&lt;/strong>：采用独立消息队列进行数据同步，常见的消息队列有 Kafka、ActiveMQ、RocketMQ 等。适合无事务性或者无时序性要求的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>重复生成&lt;/strong>：数据不同步到异地机房，每个机房都可以生成数据，这个方案适合于可以重复生成的数据。例如，登录产生的 cookie、session 数据、缓存数据等。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313163605280.png" alt="image-20220313163605280">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>异常处理 - 常见异常处理措施：
&lt;ul>
&lt;li>&lt;strong>多通道同步&lt;/strong>：通过多种方式同步数据，例如消息队列+MySQL。&lt;/li>
&lt;li>&lt;strong>同步和访问结合&lt;/strong>：这里的访问指异地机房通过系统的接口来进行数据访问。例如业务部署在异地两个机房 A 和 B，B 机房的业务系统通过接口来访问 A 机房的系统获取账号信息，如下图所示。&lt;/li>
&lt;li>&lt;strong>日志记录&lt;/strong>：日志记录主要用于用户故障恢复后对数据进行恢复，其主要方式是每个关键操作前后都记录相关一条日志，然后将日志保存在一个独立的地方，当故障恢复后，拿出日志跟数据进行对比，对数据进行修复。&lt;/li>
&lt;li>&lt;strong>用户补偿&lt;/strong>：游戏中比较常见，比如对某某日无法登陆游戏的用户补偿特殊的奖励。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2软件质量保证">（2）软件质量保证&lt;/h3>
&lt;p>很多网站都保证 7*24 小时高可用运行，同时网站不断发布新功能吸引用户以保证在激烈的市场竞争中获得成功。许多大型网站都需要发布一到两次，而中小网站则更加频繁，一些处于快速发展期的网站甚至每天发布十几次。&lt;/p>
&lt;p>不管发布的新功能是修改了一个按钮的布局还是核心交易功能，都需要再服务器上关闭原有应用，然后重新部署启动新的应用，整个过程都需要不影响用户的使用。网站的发布过程和服务器宕机效果相当，可以用服务器宕机的高可用方案来应对网站的发布。&lt;/p>
&lt;p>所以，设计网站的高可用架构时，需要考虑的服务器宕机概率不是物理上的每年一两次，而是事实上的每周一两次。用户需要面对的是每周一两次的宕机故障。&lt;/p>
&lt;p>这需要一套完善的流程来保证在发布的过程中用户不受到任何的影响或者说将影响降到最低：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>自动化测试： Web 自动化测试技术，使用自动测试工具或脚本完成测试，比如Selenium。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化部署&lt;/p>
&lt;/li>
&lt;li>
&lt;p>持续部署：持续集成（jenkins、单元测试）、持续交付、持续部署【&lt;a href="https://www.zhihu.com/question/23444990">如何理解持续集成、持续交付、持续部署？&lt;/a>】&lt;/p>
&lt;/li>
&lt;li>
&lt;p>预发布验证：开发环境&amp;gt;测试环境&amp;gt;回归测试&amp;gt;预发布环境&amp;gt;生产环境&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码版本控制：分支开发，主干发布&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化发布&lt;/p>
&lt;/li>
&lt;li>
&lt;p>灰度发布&lt;/p>
&lt;p>应用发布完成后，仍然可能会发现因为软件问题而引入的故障，这时候就需要做发布回滚，即卸载刚刚发布的软件，将上一个软件包重新发布，使系统恢复，消除故障。&lt;/p>
&lt;p>大型网站的主要业务服务器集群规模非常庞大，比如：QQ 的服务器数量超过一万台。一旦发现故障，即使想要发布回滚也需要很长的时间才能完成，只能看着故障时间增加。&lt;/p>
&lt;p>为了应付这种局面，大型网站会使用灰度发布模式，将集群服务器分成若干部分，每天只发布一部分服务器，观察运行稳定没有故障，第二天继续发布一部分服务器，持续几天的时间把整个集群全部发布完毕，期间如果发现问题，就只需要回滚已发布的一部分服务器即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://xie.infoq.cn/article/0f32b2eff858821f8062f1839">高可用：架构运维方案 &lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/9f7b9db4fc31">蓝绿部署、灰度发布、滚动发布&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/42671353">什么是蓝绿部署、滚动发布和灰度发布？ &lt;/a>&lt;/p>
&lt;h3 id="3系统运维和监控">（3）系统运维和监控&lt;/h3>
&lt;p>“不允许没有监控的系统上线”，这是许多网站架构师在做项目上线评审的时候常说的一句话。&lt;/p>
&lt;p>网站运行监控对于网站运维和架构设计优化只管重要，没有监控的网站，犹如盲人骑瞎马，夜半临深渊而不知。生死未卜，提高可用性，减少故障率就无从做起。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>系统运维&lt;/p>
&lt;p>Docker+Kubernetes&lt;/p>
&lt;/li>
&lt;li>
&lt;p>监控数据采集&lt;/p>
&lt;ul>
&lt;li>用户行为日志收集
&lt;ul>
&lt;li>服务端日志收集 - Apache、Nginx 等几乎所有 Web 服务器都具备日志记录功能，只要开启日志记录即可。如果是服务器比较多，需要集中采集日志，通常会使用 Elastic 来进行收集。&lt;/li>
&lt;li>客户端日志收集 - 利用页面嵌入专门的 JavaScript 脚本可以收集用户真实的操作行为。&lt;/li>
&lt;li>日志分析 - 可以利用 ElasticSearch 做语义分析及搜索；利用实时计算框架 Storm、Flink 等开发日志统计与分析工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>服务器性能监控&lt;/strong> - 收集服务器性能指标，如系统负载、内存占用、CPU 占用、磁盘 IO、网络 IO 等。常用的监控工具有：&lt;a href="https://github.com/apache/skywalking">Apache SkyWalking (opens new window)&lt;/a>、&lt;a href="https://github.com/naver/pinpoint">Pinpoint (opens new window)&lt;/a>等。&lt;/li>
&lt;li>&lt;strong>运行数据报告&lt;/strong> - 应该监控一些与具体业务场景相关的技术和业务指标，如：缓存命中率、平均响应时延、TPS、QPS 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>监控管理&lt;/p>
&lt;ul>
&lt;li>&lt;strong>系统报警&lt;/strong> - 设置阈值。当达到阈值，及时触发告警（短信、邮件、通信工具均可），通过及时判断状况，防患于未然。&lt;/li>
&lt;li>&lt;strong>失效转移&lt;/strong> - 监控系统可以在发现故障的情况下主动通知应用进行失效转移。&lt;/li>
&lt;li>自动优雅降级
&lt;ul>
&lt;li>优雅降级是为了应付突然爆发的访问高峰，主动关闭部分功能，释放部分资源，以保证核心功能的优先访问。&lt;/li>
&lt;li>系统在监控管理基础之上实现自动优雅降级，是柔性架构的理想状态。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用05：高可用系统设计之「存储高可用」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-storage/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-storage/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-10-12T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">高可用系列目录 高可用01：什么是高可用系统？ 高可用02：高可用系统设计之「架构高可用……</summary><content type="html">&lt;hr>
&lt;p>&lt;a href="https://kiwi4814.com/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/">高可用系列目录&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-concept/">高可用01：什么是高可用系统？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-architecture/">高可用02：高可用系统设计之「架构高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-application/">高可用03：高可用系统设计之「应用高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-server/">高可用04：高可用系统设计之「服务高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-storage/">&lt;font color="orange">高可用05：高可用系统设计之「存储高可用」&lt;/font>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-aids/">高可用06：高可用系统设计之「其他辅助手段」&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="存储高可用">存储高可用&lt;/h2>
&lt;h3 id="数据备份">数据备份&lt;/h3>
&lt;p>数据备份是保证数据有多个副本，任意副本的丢失都不会导致数据的永久丢失。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>冷备份&lt;/strong> - 定期将数据复制到某种存储介质。&lt;/li>
&lt;li>热备份
&lt;ul>
&lt;li>&lt;strong>异步热备方式&lt;/strong> - 异步热备方式是指多份数据副本的写入操作异步完成，应用程序收到数据服务系统的写操作成功响应时，只写成功了一份，存储系统将会异步地写其他副本。&lt;/li>
&lt;li>&lt;strong>同步热备方式&lt;/strong> - 同步热备方式是指多份数据副本的写入操作同步完成，即应用程序收到数据服务系统的写成功响应时，多份数据都已经写操作成功。但是当应用程序收到数据写操作失败的响应式，可能有部分副本或者全部副本都已经写入成功了（因为网络或者系统故障，无法返回操作成功的响应）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="失效转移">失效转移&lt;/h3>
&lt;p>失效转移是保证任意一个副本不可访问时，可以快速切换访问其他副本，保证系统整体可用。&lt;/p>
&lt;h4 id="失效确认">失效确认&lt;/h4>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313163458193.png" alt="image-20220313163458193">&lt;/p>
&lt;p>判断服务器宕机的手段有两种：&lt;strong>心跳检测&lt;/strong>和&lt;strong>访问失败报告&lt;/strong>。&lt;/p>
&lt;p>对于应用程序的访问失败报告，控制中心还需要再一次发送心跳检测进行确认，以免错误判断服务器宕机。因为一旦进行数据访问的失效转移，意味着数据存储多份副本不一致，需要进行后续一系列的复杂动作。&lt;/p>
&lt;h3 id="访问转移">访问转移&lt;/h3>
&lt;p>确认某台数据服务器宕机后，就需要将数据读写访问重新路由到其他服务器上。对于完全对等存储的服务器，当其中一台宕机后，应用程序根据配置直接切换到对等服务器上。如果存储不对等，就需要重新计算路由，选择存储服务器。&lt;/p>
&lt;h3 id="数据恢复">数据恢复&lt;/h3>
&lt;p>因为某台服务器宕机，所以数据存储的副本数目会减少，必须将副本的数目恢复到系统设定的值，否则，再有服务器宕机时，就可能出现无法访问转移，数据永久丢失的情况。因此系统需要从健康的服务器复制数据，将数据副本数目恢复到设定值。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用04：高可用系统设计之「服务高可用」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-server/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-server/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-10-11T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">高可用系列目录 高可用01：什么是高可用系统？ 高可用02：高可用系统设计之「架构高可用……</summary><content type="html">&lt;hr>
&lt;p>&lt;a href="https://kiwi4814.com/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/">高可用系列目录&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-concept/">高可用01：什么是高可用系统？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-architecture/">高可用02：高可用系统设计之「架构高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-application/">高可用03：高可用系统设计之「应用高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-server/">&lt;font color="orange">高可用04：高可用系统设计之「服务高可用」&lt;/font>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-storage/">高可用05：高可用系统设计之「存储高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-aids/">高可用06：高可用系统设计之「其他辅助手段」&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="服务高可用弹力设计">服务高可用——弹力设计&lt;/h2>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313162619060.png" alt="image-20220313162619060">&lt;/p>
&lt;p>在上面这个图上，我们可以看到，有三大块的东西——&lt;/p>
&lt;p>&lt;font color="red">&lt;strong>服务冗余：&lt;/strong>&lt;/font>通过冗余服务的副本数可以消除单点故障。这需要&lt;strong>服务发现【zookeeper、consul】，负载均衡【Nginx、HAProxy】，动态路由和健康检查&lt;/strong>四个功能或组件。&lt;/p>
&lt;p>&lt;font color="red">&lt;strong>服务解耦：&lt;/strong>&lt;/font>通过解耦可以做到把业务隔离开来，不让服务间受影响，这样就可以有更好的稳定性。在水平层面上，需要把业务或用户分片分区（业分做隔离，用户做多租户）。在垂直层面上，需要&lt;strong>异步通讯&lt;/strong>机制。因为应用被分解成了一个一个的服务，所以在服务的编排和聚合上，需要有工作流（像 Spring 的 Stream 或 Akka 的 flow 或是 AWS 的 Simple Workflow）来把服务给串联起来。而一致性的问题又需要业务补偿机制来做反向交易。&lt;/p>
&lt;p>&lt;font color="red">&lt;strong>服务容错：&lt;/strong>&lt;/font>服务容错方面，需要有&lt;strong>重试&lt;/strong>机制，重试机制会带来&lt;strong>幂等&lt;/strong>操作，对于服务保护来说，&lt;strong>熔断&lt;/strong>，&lt;strong>限流&lt;/strong>，&lt;strong>降级&lt;/strong>都是为了保护整个系统的稳定性，并在可用性和一致性方面在出错的情况下做一部分的妥协。&lt;/p>
&lt;p>初看之下，我们可能对这些概念有些陌生，但其实都是我们日常开发和设计中“触手可及”的设计，下面我们来一一简单学习下这些设计思想：&lt;/p>
&lt;h3 id="1服务隔离bulkheads">（1）服务隔离（Bulkheads）&lt;/h3>
&lt;p>&lt;strong>水密舱壁&lt;/strong>是中国造船史上的一项重要发明，其原理是用隔舱板将船舱分成若干个互不相通的独立船舱，当船舶发生触礁、碰撞等造成船壳破损时，即使某一船舱破损进水，也不致于波及其它船舱，从而提高船舶的抗沉性。其原理如下图所示：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/960a304e251f95cad1c8e606975b683e6709c93df465.jpg" alt="960a304e251f95cad1c8e606975b683e6709c93df465" style="zoom: 25%;" />
&lt;p>我们的软件设计当然也可能会“漏水”，所以为了不让“故障”蔓延开来，需要使用“隔板”技术，来将架构分隔成多个“船舱”来隔离故障。&lt;/p>
&lt;p>在分布式软件架构中，我们同样需要使用类似的技术来让我们的故障得到隔离。这就需要我们对系统进行分离。一般来说，对于系统的分离有两种方式，一种是以服务的种类来做分离，一种是以用户来做分离。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>按照服务的种类——典型的例子：微服务&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313162919658.png" alt="image-20220313162919658">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按照用户的请求——典型的例子：多租户&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313162929855.png" alt="image-20220313162929855">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="2异步通讯asynchronous">（2）异步通讯（Asynchronous）&lt;/h3>
&lt;p>在服务解耦的操作完成后，我们肯定要面临的一大问题就是这些服务直接如何通讯。&lt;/p>
&lt;p>通讯一般来说分&lt;strong>同步&lt;/strong>和&lt;strong>异步&lt;/strong>两种。同步通讯就像打电话，需要实时响应，而异步通讯就像发邮件，不需要马上回复。各有千秋，我们很难说谁比谁好。但是在面对超高吐吞量的场景下，异步处理就比同步处理有比较大的优势了，这就好像一个人不可能同时接打很多电话，但是他可以同时接收很多的电子邮件一样。&lt;/p>
&lt;p>异步通讯通常有三种方式：&lt;/p>
&lt;h4 id="请求响应式">①请求响应式&lt;/h4>
&lt;p>这种方式的通讯是：发送方（sender）会直接请求接收方（receiver），被请求方接收到请求后，直接返回结果，比如“正在处理”。对于返回结果，有两种方法，一种是发送方时不时地去轮询一下，问一下干没干完。另一种方式是发送方注册一个回调方法，也就是接收方处理完后回调请求方。这种架构模型在以前的网上支付中比较常见，页面先从商家跳转到支付宝或银行，商家会把回调的 URL 传给支付页面，支付完后，再跳转回商家的 URL。很明显，这种情况下还是有一定耦合的。是发送方依赖于接收方，并且要把自己的回调发送给接收方，处理完后回调。&lt;/p>
&lt;h4 id="直接订阅">②直接订阅&lt;/h4>
&lt;p>在这种方式下，接收方（receiver）会来订阅发送方（sender）的消息，发送方会把相关的消息或数据放到接收方所订阅的队列中，而接收方会从队列中获取数据。这种方式下，发送方并不关心订阅方的处理结果，它只是告诉订阅方有事要干，收完消息后给个 ACK 就好了，你干成啥样我不关心。&lt;/p>
&lt;p>举个例子，在购物过程下订单的时候，一旦用户支付完成了，就需要把这个事件通知给订单处理以及物流，订单处理变更状态，物流服务需要从仓库服务分配相应的库存并准备配送，后续这些处理的结果无需告诉支付服务。商家这边只需要订阅一个支付完成的事件，这个事件带一个订单号，而不需要让支付方知道自己的回调 URL。&lt;/p>
&lt;p>但是，在这种方式下，接收方需要向发送方订阅事件，所以是接收方依赖于发送方。这种方式还是有一定的耦合。&lt;/p>
&lt;h4 id="中间订阅broker">③中间订阅（Broker）&lt;/h4>
&lt;p>所谓 Broker，就是一个中间人，发送方（sender）和接收方（receiver）都互相看不到对方，它们看得到的是一个 Broker，发送方向 Broker 发送消息，接收方向 Broker 订阅消息。如下图所示。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313162946453.png" alt="image-20220313162946453">&lt;/p>
&lt;p>这是完全的解耦。所有的服务都不需要相互依赖，而是依赖于一个中间件 Broker。这个 Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。&lt;/p>
&lt;p>在 Broker 这种模式下，发送方的服务和接收方的服务最大程度地解耦。但是所有人都依赖于一个总线，所以这个总线就需要有如下的特性：&lt;/p>
&lt;ul>
&lt;li>必须是高可用的，因为它成了整个系统的关键；&lt;/li>
&lt;li>必须是高性能而且是可以水平扩展的；&lt;/li>
&lt;li>必须是可以持久化不丢数据的。&lt;/li>
&lt;/ul>
&lt;p>要做到这三条还是比较难的。当然，好在现在开源软件或云平台上 Broker 的软件是非常成熟的，所以节省了我们很多的精力。&lt;/p>
&lt;p>✨&lt;strong>事件驱动架构（EDA – Event Driven Architecture）&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313162956535.png" alt="image-20220313162956535">&lt;/p>
&lt;h3 id="3幂等性idempotency">（3）幂等性（Idempotency）&lt;/h3>
&lt;p>编程中的“幂等性”是指任意多次执行所产生的影响，与一次执行的影响相同。一个拥有幂等性设计的接口，保证无论一次或多次来调用接口，都能够得到相同的结果。接口的幂等性设计在某些场景下是必需的，例如用户下单的场景。&lt;/p>
&lt;p>我们知道，服务间的调用可能会有三个状态，一个是成功（Success），一个是失败（Failed），一个是超时（Timeout）。前两者都是明确的状态，而超时则是完全不知道是什么状态。比如，超时原因是网络传输丢包的问题，可能是请求时就没有请求到，也有可能是请求到了，返回结果时没有正常返回等等情况。于是我们完全不知道下游系统是否收到了请求，而收到了请求是否处理了，成功 / 失败的状态在返回时是否遇到了网络问题。总之，请求方完全不知道是怎么回事。&lt;/p>
&lt;p>比如说，对于用户下单的场景的超时重试我们考虑以下问题：&lt;/p>
&lt;ul>
&lt;li>是否会导致最终创建了两条一样的订单？&lt;/li>
&lt;li>是否会扣除两遍库存？&lt;/li>
&lt;li>是否会重复扣除用户的钱？&lt;/li>
&lt;/ul>
&lt;p>因为系统超时，而调用户方重试一下，会给我们的系统带来不一致的副作用。&lt;/p>
&lt;p>在这种情况下，一般有两种处理方式。&lt;/p>
&lt;p>一种是需要下游系统提供相应的查询接口。上游系统在 timeout 后去查询一下。如果查到了，就表明已经做了，成功了就不用做了，失败了就走失败流程。&lt;/p>
&lt;p>另一种是通过幂等性的方式。也就是说，把这个查询操作交给下游系统，我上游系统只管重试，下游系统保证一次和多次的请求结果是一样的。&lt;/p>
&lt;p>对于第一种方式，需要对方提供一个查询接口来做配合。而第二种方式则需要下游的系统提供支持幂等性的交易接口。&lt;/p>
&lt;h4 id="全局id">全局ID&lt;/h4>
&lt;p>要做到幂等性的交易接口，需要有一个唯一的标识，来标志交易是同一笔交易。而这个交易 ID 由谁来分配是一件比较头疼的事。因为这个标识要能做到全局唯一。&lt;/p>
&lt;p>这里介绍一下雪花片算法，这是一个 Twitter 的开源项目 Snowflake。它是一个分布式 ID 的生成算法。其核心思想是，产生一个 long 型的 ID，其中：&lt;/p>
&lt;ul>
&lt;li>41bits 作为毫秒数。大概可以用 69.7 年。&lt;/li>
&lt;li>10bits 作为机器编号（5bits 是数据中心，5bits 的机器 ID），支持 1024 个实例。&lt;/li>
&lt;li>12bits 作为毫秒内的序列号。一毫秒可以生成 4096 个序号。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313163012791.png" alt="image-20220313163012791">&lt;/p>
&lt;p>当然，雪花片算法提供的只是一个思想，根据实际的具体情况我们可以适当调整每一部分的比例，比如在接处警的系统中，我们采用了改造过的雪花片算法——保证总长度在53位，并且加上区号的限制，以此来保证全国的接处警系统都能生成唯一的ID。&lt;/p>
&lt;h4 id="设计幂等性接口">设计幂等性接口&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;code>HTTP GET&lt;/code> 方法用于获取资源，不应有副作用，所以是幂等的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP HEAD&lt;/code> 和 GET 本质是一样的，区别在于 HEAD 不含有呈现数据，而仅仅是 HTTP 头信息，不应用有副作用，也是幂等的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP OPTIONS&lt;/code> 主要用于获取当前 URL 所支持的方法，所以也是幂等的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP DELETE&lt;/code>方法用于删除资源，有副作用，但它应该满足幂等性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP POST&lt;/code> 方法用于创建资源，所对应的 URI 并非创建的资源本身，而是去执行创建动作的操作者，有副作用，&lt;strong>不满足幂等性&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP PUT&lt;/code> 方法用于创建或更新操作，所对应的 URI 是要创建或更新的资源本身，有副作用，它应该满足幂等性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以，对于 POST 的方式，很可能会出现多次提交的问题，就好比，我们在论坛中发贴时，有时候因为网络有问题，可能会对同一篇贴子出现多次提交的情况。对此的一般的幂等性的设计如下：&lt;/p>
&lt;ol>
&lt;li>首先，在表单中需要隐藏一个 token，这个 token 可以是前端生成的一个唯一的 ID。用于防止用户多次点击了表单提交按钮，而导致后端收到了多次请求，却不能分辨是否是重复的提交。这个 token 是表单的唯一标识。（这种情况其实是通过前端生成 ID 把 POST 变成了 PUT。）&lt;/li>
&lt;li>然后，当用户点击提交后，后端会把用户提交的数据和这个 token 保存在数据库中。如果有重复提交，那么数据库中的 token 会做排它限制，从而做到幂等性。&lt;/li>
&lt;li>当然，更为稳妥的做法是，后端成功后向前端返回 302 跳转，把用户的前端页跳转到 GET 请求，把刚刚 POST 的数据给展示出来。如果是 Web 上的最好还把之前的表单设置成过期，这样用户不能通过浏览器后退按钮来重新提交。这个模式又叫做 &lt;strong>PRG 模式&lt;/strong>（Post/Redirect/Get）。&lt;/li>
&lt;/ol>
&lt;h3 id="4超时重试retry">（4）超时重试（Retry）&lt;/h3>
&lt;p>当我们把单体应用服务化，尤其是微服务化，本来在一个进程内的函数调用就成了远程调用，这样就会涉及到网络上的问题。&lt;/p>
&lt;p>网络上有很多的各式各样的组件，如 DNS 服务、网卡、交换机、路由器、负载均衡等设备，这些设备都不一定是稳定的。在数据传输的整个过程中，只要任何一个环节出了问题，最后都会影响系统的稳定性。&lt;/p>
&lt;p>所以我们需要一个重试的机制。&lt;/p>
&lt;p>但是，我们需要明白的是，“重试”的语义是我们认为这个故障是暂时的，而不是永久的，所以，我们会去重试。&lt;/p>
&lt;p>在设计重试时，我们需要定义出什么情况下需要重试，例如，调用超时、被调用端返回了某种可以重试的错误（如繁忙中、流控中、维护中、资源不足等）。&lt;/p>
&lt;p>而对于一些别的错误，则最好不要重试，比如：业务级的错误（如没有权限、或是非法数据等错误），技术上的错误（如：HTTP 的 503 等，这种原因可能是触发了代码的 bug，重试下去没有意义）。&lt;/p>
&lt;h4 id="重试的策略">重试的策略&lt;/h4>
&lt;p>关于重试的设计，一般来说，都需要有个&lt;strong>重试的最大值&lt;/strong>，经过一段时间不断的重试后，就没有必要再重试了，应该报故障了。&lt;/p>
&lt;p>在重试过程中，每一次重试失败时都应该休息一会儿再重试，这样可以避免因为重试过快而导致网络上的负担加重。在重试的设计中，我们一般都会引入，Exponential Backoff 的策略，也就是所谓的 &amp;quot; &lt;strong>指数级退避&lt;/strong> &amp;quot;。在这种情况下，每一次重试所需要的休息时间都会成倍增加。这种机制主要是用来让被调用方能够有更多的时间来从容处理我们的请求。&lt;/p>
&lt;p>下面是一些伪代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doOperationAndWaitForResult&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do some asynchronous operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">asyncOperation&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">retries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">retry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">do&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Get the result of the asynchronous operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Results&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getAsyncOperationResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SUCCESS&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NOT_READY&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TOO_BUSY&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NO_RESOURCE&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SERVER_ERROR&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">retry&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">waitTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">min&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getWaitTimeExp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">retries&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">MAX_WAIT_INTERVAL&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Wait for the next Retry.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">waitTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">retry&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">retries&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">MAX_RETRIES&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然，我们可以在项目中直接使用Spring的重试策略，可以直接通过注解（Annotation）的方式使用。下面给出一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@EnableRetry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">MyService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Retryable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">maxAttempts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">backoff&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Backoff&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">500L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">multiplier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.5&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">retryService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">sql&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然了，这里的重试机制和退避机制提供了很多，细节就不展开了，具体可以查看&lt;a href="https://github.com/spring-projects/spring-retry">相应的文档&lt;/a>。&lt;/p>
&lt;h3 id="5熔断机制circuit-breaker">（5）熔断机制（Circuit Breaker）&lt;/h3>
&lt;p>熔断机制这个词来源于我们电闸上的“保险丝”，当电压有问题时（比如短路），自动跳闸，此时电路就会断开，我们的电器就会受到保护。不然，会导致电器被烧坏，如果人没在家或是人在熟睡中，还会导致火灾。所以，在电路世界通常都会有这样的自我保护装置。&lt;/p>
&lt;p>同样，在我们的分布式系统设计中，也应该有这样的方式。前面说过重试机制，如果错误太多，或是在短时间内得不到修复，那么我们重试也没有意义了，此时应该开启我们的熔断操作，尤其是后端太忙的时候，使用熔断设计可以保护后端不会过载。&lt;/p>
&lt;p>假设一个这样的场景：A 服务的 X 功能依赖 B 服务的某个接口，当 B 服务的接口响应很慢的时候，A 服务的 X 功能响应肯定也会被拖慢，进一步导致 A 服务的线程都被卡在 X 功能处理上，此时 A 服务的其他功能都会被卡住或者响应非常慢。这时就需要熔断机制了，即：A 服务不再请求 B 服务的这个接口，A 服务内部只要发现是请求 B 服务的这个接口就立即返回错误，从而避免 A 服务整个被拖慢甚至拖死。&lt;/p>
&lt;p>这时候我们首先会想到，如果我们可以设计几条规则并且在系统中自动执行就好了，比如说：&lt;/p>
&lt;ul>
&lt;li>1 分钟内 30% 的请求响应时间超过 1 秒就熔断&lt;/li>
&lt;li>如果该请求连续5次调用失败，那么在接下来的20分钟内，所有调用该请求的服务都直接返回异常&lt;/li>
&lt;li>...&lt;/li>
&lt;/ul>
&lt;p>这里我们也会引出几个问题：&lt;/p>
&lt;ul>
&lt;li>问题1：什么样的情况，可以理解为&lt;code>服务提供方&lt;/code>出现了问题？&lt;/li>
&lt;li>问题2：触发熔断会怎么样？&lt;/li>
&lt;li>问题3：熔断打开以后，如何关闭？&lt;/li>
&lt;/ul>
&lt;p>下面我们来看一下熔断机制的实现方法——熔断状态机。&lt;/p>
&lt;h4 id="熔断状态机">熔断状态机&lt;/h4>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313163041303.png" alt="image-20220313163041303">&lt;/p>
&lt;p>首先在熔断器内部维护者一个调用失败的计数器，如果调用服务方的接口失败，则使失败次数加 1。&lt;/p>
&lt;p>然后在熔断器内部有3种状态，分别是：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>熔断器关闭（&lt;code>Closed&lt;/code> ）：客户端正常访问服务提供方&lt;/p>
&lt;/li>
&lt;li>
&lt;p>熔断器打开（ &lt;code>Open&lt;/code>）：阻断客户端对服务提供方的访问&lt;/p>
&lt;/li>
&lt;li>
&lt;p>熔断器半开（ &lt;code>Half Open&lt;/code>）：熔断器开始重新判断是否需要继续熔断&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>结合实际情况，我们来看下这些状态之间的转换情况：&lt;/p>
&lt;p>&lt;strong>①关闭 -&amp;gt; 断开&lt;/strong>&lt;/p>
&lt;p>当服务提供方出现异常时自动断开，这里的异常可以指：&lt;/p>
&lt;ol>
&lt;li>连续发生threshold个错误，立即熔断；&lt;/li>
&lt;li>单位时间请求数达到minSamples个，错误率达到rate，即熔断；&lt;/li>
&lt;li>单位时间发生threshold个错误，立即熔断。&lt;/li>
&lt;/ol>
&lt;p>这里的错误完全是由业务系统来定义，可能是:&lt;/p>
&lt;ol>
&lt;li>后端接口的响应严重超时；&lt;/li>
&lt;li>后端服务返回异常的错误(如HTTP协议 5xx)；&lt;/li>
&lt;li>RPC返回有异常的错误码。&lt;/li>
&lt;/ol>
&lt;p>当熔断器处于&lt;code>Open&lt;/code>状态，&lt;code>客户端&lt;/code>对&lt;code>服务提供方&lt;/code>的访问被阻断了。我们该如何响应客户端的请求？通常而言，可以有这么几种做法：&lt;/p>
&lt;ol>
&lt;li>直接返回给客户端失败信息；&lt;/li>
&lt;li>将返回降级后的结果，比如针对读请求，可以返回固定值，或者cache中的历史数据。&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>② 断开 -&amp;gt; 半断开&lt;/strong>&lt;/p>
&lt;p>在熔断一段时间后，&lt;code>服务提供方&lt;/code>的服务可能已经恢复了。那么怎么感知到&lt;code>服务提供方&lt;/code>的服务已经恢复了呢？一种通用的的做法是使用定时器，每当定时器的设定的时间到达，熔断器的状态从自动从&lt;code>Open&lt;/code> 切换到 &lt;code>Half Open&lt;/code>。&lt;/p>
&lt;p>&lt;strong>③半断开 -&amp;gt; 关闭/半断开 -&amp;gt; 断开&lt;/strong>&lt;/p>
&lt;p>在&lt;code>Half Open&lt;/code>状态，熔断器重新探测（计算）&lt;code>服务提供方&lt;/code>的健康情况进行检测。&lt;/p>
&lt;p>如果&lt;code>服务提供方&lt;/code>的服务已经恢复，则熔断器切换到&lt;code>Closed&lt;/code>状态，否则切换到&lt;code>Open&lt;/code>。&lt;/p>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://vearne.cc/archives/39172">从状态机看熔断器 – 萌叔 (vearne.cc)&lt;/a>&lt;/p>
&lt;h3 id="6限流设计throttle">（6）限流设计（Throttle）&lt;/h3>
&lt;p>我们在一些系统中都可以看到像限流这样的设计，比如，我们的数据库访问的连接池，还有我们的线程池，还有 Nginx 下的用于限制瞬时并发连接数的 limit_conn 模块，限制每秒平均速率的 limit_req 模块，还有限制 MQ 的生产速，等等。&lt;/p>
&lt;h4 id="限流的分类">限流的分类&lt;/h4>
&lt;p>限流一般都是系统内实现的，常见的限流方式可以分为两类：&lt;strong>基于请求限流和基于资源限流&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>基于请求限流。&lt;/strong>&lt;/p>
&lt;p>基于请求限流指从外部访问的请求角度考虑限流，常见的方式有：限制总量、限制时间量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>基于资源限流。&lt;/strong>&lt;/p>
&lt;p>基于资源限流是从系统内部考虑的，即：找到系统内部影响性能的关键资源，对其使用上限进行限制。常见的内部资源有：连接数、文件句柄、线程数、请求队列等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="触发限流后的策略">触发限流后的策略&lt;/h4>
&lt;p>限流的目的是通过对并发访问进行限速，相关的策略一般是，一旦达到限制的速率，那么就会触发相应的限流行为。一般来说，触发的限流行为如下。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>拒绝服务。&lt;/strong>&lt;/p>
&lt;p>把多出来的请求拒绝掉。一般来说，好的限流系统在受到流量暴增时，会统计当前哪个客户端来的请求最多，直接拒掉这个客户端，这种行为可以把一些不正常的或者是带有恶意的高并发访问挡在门外。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>服务降级。&lt;/strong>&lt;/p>
&lt;p>关闭或是把后端服务做降级处理。这样可以让服务有足够的资源来处理更多的请求。降级有很多方式，一种是把一些不重要的服务给停掉，把 CPU、内存或是数据的资源让给更重要的功能；一种是不再返回全量数据，只返回部分数据。因为全量数据需要做 SQL Join 操作，部分的数据则不需要，所以可以让 SQL 执行更快，还有最快的一种是直接返回预设的缓存，以牺牲一致性的方式来获得更大的性能吞吐。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特权请求。&lt;/strong>&lt;/p>
&lt;p>所谓特权请求的意思是，资源不够了，我只能把有限的资源分给重要的用户，比如：分给权利更高的 VIP 用户。在多租户系统下，限流的时候应该保大客户的，所以大客户有特权可以优先处理，而其它的非特权用户就得让路了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>延时处理。&lt;/strong>&lt;/p>
&lt;p>在这种情况下，一般会有一个队列来缓冲大量的请求，这个队列如果满了，那么就只能拒绝用户了，如果这个队列中的任务超时了，也要返回系统繁忙的错误了。使用缓冲队列只是为了减缓压力，一般用于应对短暂的峰刺请求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>弹性伸缩。&lt;/strong>&lt;/p>
&lt;p>动用自动化运维的方式对相应的服务做自动化的伸缩。这个需要一个应用性能的监控系统，能够感知到目前最繁忙的 TOP 5 的服务是哪几个。然后去伸缩它们，还需要一个自动化的发布、部署和服务注册的运维系统，而且还要快，越快越好。否则，系统会被压死掉了。当然，如果是数据库的压力过大，弹性伸缩应用是没什么用的，这个时候还是应该限流。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="限流的实现方式">限流的实现方式&lt;/h4>
&lt;p>那么如何实现限流呢？通常业界有下面几种方法来实现限流：&lt;/p>
&lt;ul>
&lt;li>计数器（Counter）&lt;/li>
&lt;li>队列算法（Queue）&lt;/li>
&lt;li>漏斗算法（Leaky Bucket）&lt;/li>
&lt;li>令牌桶算法（Token Bucket）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://note.dolyw.com/distributed/02-Distributed-Limit.html#_1-%E8%AE%A1%E6%95%B0%E5%99%A8-%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3">高并发下的限流分析&lt;/a>&lt;/p>
&lt;h3 id="7服务降级degradation">（7）服务降级（Degradation）&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>熔断和降级是两个比较容易混淆的概念，因为单纯从名字上看好像都有禁止某个功能的意思，但其实内在含义是不同的，原因在于降级的目的是应对系统自身的故障，而熔断的目的是应对依赖的外部系统故障的情况。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>所谓的降级设计，本质就是为了解决资源不足和访问量过大的问题。当资源和访问量出现矛盾的时候，在有限的资源下，为了能够扛住大量的请求，我们就需要对系统进行降级操作。也就是说，暂时牺牲掉一些东西，以保障整个系统的平稳运行。例如，论坛可以降级为只能看帖子，不能发帖子；也可以降级为只能看帖子和评论，不能发评论；而 App 的日志上传接口，可以完全停掉一段时间，这段时间内 App 都不能上传日志。&lt;/p>
&lt;p>降级的核心思想就是&lt;strong>丢车保帅&lt;/strong>，优先保证核心业务。例如，对于论坛来说，90% 的流量是看帖子，那我们就优先保证看帖的功能；对于一个 App 来说，日志上传接口只是一个辅助的功能，故障时完全可以停掉。&lt;/p>
&lt;p>为了降级我们一般会优先牺牲掉的东西有：&lt;/p>
&lt;ul>
&lt;li>数据的强一致性，比如简化流程、同步改成异步、数据命中使用缓存等&lt;/li>
&lt;li>停止次要功能&lt;/li>
&lt;li>简化功能&lt;/li>
&lt;/ul>
&lt;p>而常见的实现降级的方式有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>系统后门降级&lt;/strong>&lt;/p>
&lt;p>简单来说，就是系统预留了后门用于降级操作。例如，系统提供一个降级 URL，当访问这个 URL 时，就相当于执行降级指令，具体的降级指令通过 URL 的参数传入即可。这种方案有一定的安全隐患，所以也会在 URL 中加入密码这类安全措施。&lt;/p>
&lt;p>系统后门降级的方式实现成本低，但主要缺点是如果服务器数量多，需要一台一台去操作，效率比较低，这在故障处理争分夺秒的场景下是比较浪费时间的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>独立降级系统&lt;/strong>&lt;/p>
&lt;p>为了解决系统后门降级方式的缺点，将降级操作独立到一个单独的系统中，可以实现复杂的权限管理、批量操作等功能。其基本架构如下：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313163104940.png" alt="image-20220313163104940" style="zoom: 25%;" />
&lt;/li>
&lt;/ul>
&lt;h3 id="8排队">（8）排队&lt;/h3>
&lt;p>排队实际上是限流的一个变种，限流是直接拒绝用户，排队是让用户等待一段时间，全世界最有名的排队当属 12306 网站排队了。排队虽然没有直接拒绝用户，但用户等了很长时间后进入系统，体验并不一定比限流好。&lt;/p>
&lt;p>由于排队需要临时缓存大量的业务请求，单个系统内部无法缓存这么多数据，一般情况下，排队需要用独立的系统去实现，例如使用 Kafka 这类消息队列来缓存用户请求。&lt;/p>
&lt;p>下面是 1 号店的“双 11”秒杀排队系统架构：&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313163140536.png" alt="image-20220313163140536" style="zoom:25%;" />
&lt;p>其基本实现摘录如下：&lt;/p>
&lt;blockquote>
&lt;p>【排队模块】负责接收用户的抢购请求，将请求以先入先出的方式保存下来。每一个参加秒杀活动的商品保存一个队列，队列的大小可以根据参与秒杀的商品数量（或加点余量）自行定义。&lt;/p>
&lt;p>【调度模块】负责排队模块到服务模块的动态调度，不断检查服务模块，一旦处理能力有空闲，就从排队队列头上把用户访问请求调入服务模块，并负责向服务模块分发请求。这里调度模块扮演一个中介的角色，但不只是传递请求而已，它还担负着调节系统处理能力的重任。我们可以根据服务模块的实际处理能力，动态调节向排队系统拉取请求的速度。&lt;/p>
&lt;p>【服务模块】负责调用真正业务来处理服务，并返回处理结果，调用排队模块的接口回写业务处理结果。&lt;/p>
&lt;/blockquote>
&lt;h3 id="服务高可用小结">服务高可用小结&lt;/h3>
&lt;p>首先，我们的服务不能是单点，所以，我们需要在架构中冗余服务，也就是说有多个服务的副本。这需要使用到的具体技术有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>负载均衡 + 服务健康检查–可以使用像 Nginx 或 HAProxy 这样的技术；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务发现 + 动态路由 + 服务健康检查，比如 Consul 或 ZooKeeper；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化运维，Kubernetes 服务调度、伸缩和故障迁移。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>然后，我们需要隔离我们的业务，要隔离我们的服务我们就需要对服务进行解耦和拆分，这需要使用到以前的相关技术。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>bulkheads 模式：业务分片 、用户分片、数据库拆分。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自包含系统：所谓自包含的系统是从单体到微服务的中间状态，其把一组密切相关的微服务给拆分出来，只需要做到没有外部依赖就行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异步通讯：服务发现、事件驱动、消息队列、业务工作流。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化运维：需要一个服务调用链和性能监控的监控系统。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>然后，接下来，我们就要进行和能让整个架构接受失败的相关处理设计，也就是所谓的&lt;strong>容错设计&lt;/strong>。这会用到下面的这些技术。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>错误方面：调用重试 + 熔断 + 服务的幂等性设计。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一致性方面：强一致性使用两阶段提交、最终一致性使用异步通讯方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流控方面：使用限流 + 降级技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化运维方面：网关流量调度，服务监控。&lt;/p>
&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用03：高可用系统设计之「应用高可用」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-application/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-application/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-10-10T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">高可用系列目录 高可用01：什么是高可用系统？ 高可用02：高可用系统设计之「架构高可用……</summary><content type="html">&lt;hr>
&lt;p>&lt;a href="https://kiwi4814.com/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/">高可用系列目录&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-concept/">高可用01：什么是高可用系统？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-architecture/">高可用02：高可用系统设计之「架构高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-application/">&lt;font color="orange">高可用03：高可用系统设计之「应用高可用」&lt;/font>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-server/">高可用04：高可用系统设计之「服务高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-storage/">高可用05：高可用系统设计之「存储高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-aids/">高可用06：高可用系统设计之「其他辅助手段」&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="应用高可用">应用高可用&lt;/h2>
&lt;p>应用层主要处理网站应用的业务逻辑，一个显着的特点是应用的 &lt;strong>无状态（Stateless ）&lt;/strong> 性。&lt;/p>
&lt;p>所谓的 &lt;strong>无状态&lt;/strong> 的应用是指应用服务器不保存业务的上下文信息，而仅根据每次请求提交的数据进行相应的业务逻辑处理，多个服务实例之间完全对等，请求提交到任意服务器，处理结果都是完全一样的。也就是说，处理一次请求所需的全部信息，要么都包含在这个请求里，要么可以从外部获取到（比如说数据库），服务器本身不存储任何信息。&lt;/p>
&lt;p>有状态服务（stateful service）则相反，它会在自身保存一些数据，先后的请求是有关联的。一个常见的例子，在商城里购买一件商品，需要经过放入购物车、确认订单、付款等多个步骤。由于HTTP协议本身是无状态的，所以为了实现有状态服务，就需要通过一些额外的方案。比如最常见的session，将用户挑选的商品（购物车），保存到session中，当付款的时候，再从购物车里取出商品信息。&lt;/p>
&lt;p>&lt;strong>如何将一个服务变成无状态的？：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>将共享存储作为降级预案来运用&lt;/strong>，比如，不太重要的数据可以放到 Redis 中，重要的数据可以放到 MySQL 中，或是像 ZooKeeper/Etcd 这样的高可用的强一致性的存储中，或是分布式文件系统中。&lt;/li>
&lt;li>&lt;strong>状态信息前置，丰富入参&lt;/strong>，将处理需要的数据尽可能都通过上游的客户端放到入参中传过来，比如我们统一权限采用的jwt-token就是采用这种方式。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://liaojiacan.me/2019/05/27/%E3%80%90%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E3%80%91%E7%90%86%E8%A7%A3%E6%9C%89%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1%E5%92%8C%E6%97%A0%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1/index.html">【高可用架构】理解有状态服务和无状态服务 | Jiacan's Blog (liaojiacan.me)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.iteye.com/blog/kyfxbl-1831869">无状态服务（stateless service）&lt;/a>&lt;/p>
&lt;p>由于无状态应用，各实例之间不用考虑数据一致性问题，所以其高可用方案相对简单。主要手段是：&lt;/p>
&lt;ul>
&lt;li>负载均衡&lt;/li>
&lt;li>分布式 Session&lt;/li>
&lt;/ul>
&lt;h3 id="1负载均衡">（1）负载均衡&lt;/h3>
&lt;p>负载均衡，顾名思义，主要使用在业务量和数据量较高的情况下，当单台服务器不足以承担所有的负载压力时，通过负载均衡手段，将流量和数据分摊到一个集群组成的多台服务器上，以提高整体的负载处理能力。&lt;/p>
&lt;p>&lt;strong>无状态应用的失效转移可以利用负载均衡来实现&lt;/strong>。&lt;/p>
&lt;p>无状态的应用实现高可用架构十分简单，由于服务器不保存请求状态，那么所有服务器完全对等，在任意节点执行同样的请求，结果总是一致的。这种情况下，最简单的高可用方案就是使用负载均衡。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313162241918.png" alt="image-20220313162241918">&lt;/p>
&lt;h3 id="2分布式session">（2）分布式Session&lt;/h3>
&lt;p>应用服务器的高可用架构设计主要基于服务无状态这一特性。事实上，业务总是有状态的，如购物车记录用户的购买信息；用户的登录状态；最新发布的消息等等。&lt;/p>
&lt;p>在分布式场景下，一个用户的 Session 如果只存储在一个服务器上，那么当负载均衡器把用户的下一个请求转发到另一个服务器上，该服务器没有用户的 Session，就可能导致用户需要重新进行登录等操作。&lt;/p>
&lt;p>为了解决分布式 Session 问题，常见的解决方案有：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/wajika/p/6645581.html">粘性 session&lt;/a>&lt;/li>
&lt;li>应用服务器间的 session 复制共享&lt;/li>
&lt;li>基于缓存的 session 共享&lt;/li>
&lt;/ul>
&lt;p>【推荐阅读】&lt;/p>
&lt;p>&lt;a href="https://github.com/dunwu/blog/blob/master/source/_posts/theory/distributed-session.md">分布式会话基本原理&lt;/a>&lt;/p>
&lt;h3 id="cdn加速">CDN加速&lt;/h3>
&lt;p>如何选择最优路径，把每个角落的请求快速的传递到机房，这就是CDN的功能。&lt;/p>
&lt;h3 id="html页面静态化">HTML页面静态化&lt;/h3>
&lt;p>静态页面部署在NGNIX中，收到用户请求，Ngnix不需要访问Webapp即可响应用户，减少应用渲染页面的时间，同时也降低了应用的压力。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用02：高可用系统设计之「架构高可用」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-architecture/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-architecture/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-10-09T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">高可用系列目录 高可用01：什么是高可用系统？ 高可用02：高可用系统设计之「架构高可用……</summary><content type="html">&lt;hr>
&lt;p>&lt;a href="https://kiwi4814.com/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/">高可用系列目录&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-concept/">高可用01：什么是高可用系统？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-architecture/">&lt;font color="orange">高可用02：高可用系统设计之「架构高可用」&lt;/font>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-application/">高可用03：高可用系统设计之「应用高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-server/">高可用04：高可用系统设计之「服务高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-storage/">高可用05：高可用系统设计之「存储高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-aids/">高可用06：高可用系统设计之「其他辅助手段」&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="如何设计一个高可用系统">如何设计一个高可用系统&lt;/h2>
&lt;p>上一节我们已经介绍了什么是高可用以及高可用相关的一些概念，接下来我们分几个章节来介绍：&lt;strong>如何设计一个高可用系统？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313160723990.png" alt="image-20220313160723990">&lt;/p>
&lt;p>&lt;strong>大型系统的分层架构及物理服务器的分布式部署使得位于不同层次的服务器具有不同的可用性特点。关闭服务或服务器宕机时产生的影响也不相同，高可用的解决方案也差异甚大&lt;/strong>。大致可以分为：&lt;/p>
&lt;ul>
&lt;li>高可用的架构 - 主要方式是：主备、主从、双主、集群、分区&lt;/li>
&lt;li>高可用的应用 - 主要手段是：负载均衡&lt;/li>
&lt;li>高可用的服务 - 主要手段是：分级管理、超时重试、异步调用、限流、降解、断路、幂等性设计&lt;/li>
&lt;li>高可用的数据 - 主要手段是：数据备份和失效转移&lt;/li>
&lt;/ul>
&lt;h2 id="架构高可用">架构高可用&lt;/h2>
&lt;p>常见的机构模式有：双机（主备、主从、主主等）、集群、分区等。&lt;/p>
&lt;h3 id="1主备复制">（1）主备复制&lt;/h3>
&lt;p>主备复制是最常见也是最简单的一种存储高可用方案，几乎所有的存储系统都提供了主备复制的功能，例如 MySQL、Redis、MongoDB 等。&lt;strong>主备模式&lt;/strong>中，两台服务不再是平等关系。主服务承担所有的读写请求，备服务只有在主服务不可用时才取而代之。主备服务之间虽然也存在两个方向的数据同步，但跟双主模式不同，它们不会同时发生。正常情况下只存在主向备同步数据。主不可用的时间段内，数据会写到备服务。当主恢复后，才需要由备向主同步数据。在此期间，会双写数据到主备节点，防止主同时再向备同步数据。主备架构比较容易实现，缺点是备服务在绝大部分时间是一种资源浪费。一般数据库系统在部署时会考虑主备架构。&lt;/p>
&lt;p>主备复制要点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>存在&lt;strong>一主多备&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主机负责读&amp;amp;写，并定期复制数据给备机。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一旦主机宕机，可以通过人工手段，将其中一个备节点作为主节点。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313160803044.png" alt="image-20220313160803044">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>优点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>主备复制架构中，客户端可以不感知备机的存在。即使灾难恢复后，原来的备机被人工修改为主机后，对于客户端来说，只是认为主机的地址换了而已，无须知道是原来的备机升级为主机。&lt;/li>
&lt;li>主备复制架构中，主机和备机之间，只需要进行数据复制即可，无须进行状态判断和主备切换这类复杂的操作。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>主备复制架构中，故障后需要人工干预，无法自动恢复。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>适用场景&lt;/strong>&lt;/p>
&lt;p>综合主备复制架构的优缺点，内部的后台管理系统使用主备复制架构的情况会比较多，例如学生管理系统、员工管理系统、假期管理系统等，因为这类系统的数据变更频率低，即使在某些场景下丢失数据，也可以通过人工的方式补全。&lt;/p>
&lt;h3 id="2主从复制">（2）主从复制&lt;/h3>
&lt;p>主从复制和主备复制只有一字之差，“从”意思是“随从、仆从”，“备”的意思是备份。我们可以理解为仆从是要帮主人干活的，这里的干活就是承担“读”的操作。也就是说，主机负责读写操作，从机只负责读操作，不负责写操作。&lt;/p>
&lt;p>&lt;strong>主从模式&lt;/strong>其实不是主要解决高可用问题的，更多的是为了实现读写分离，来解决高并发问题。实际场景中通常不是一主一从，而是一主多从架构，因为大部分应用都是的读多写少。主节点处理写请求，从节点处理读请求。由于存在多从，读服务的可用性远高于写服务。另外，写服务会存在单点故障。这个问题可以通过集群动态选主来解决：当主节点不可用时，集群自动选出一台新的主节点。基于zookeeper，动态选主很容易实现。不过动态选主在MySQL集群架构中不会使用，原因是主从同步数据必须在部署时配置好，切换了主节点还是需要运维人工介入修改配置并重启服务。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313160959711.png" alt="image-20220313160959711" style="zoom: 80%;" />
&lt;p>&lt;strong>优缺点分析&lt;/strong>&lt;/p>
&lt;p>主从复制与主备复制相比，优点有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>主从复制在主机故障时，读操作相关的业务可以继续运行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主从复制架构的从机提供读操作，发挥了硬件的性能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>缺点有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>主从复制架构中，客户端需要感知主从关系，并将不同的操作发给不同的机器进行处理，复杂度比主备复制要高。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主从复制架构中，从机提供读业务，如果主从复制延迟比较大，业务会因为数据不一致出现问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>故障时需要人工干预.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>综合主从复制的优缺点，一般情况下，写少读多的业务使用主从复制的存储架构比较多。例如，论坛、BBS、新闻网站这类业务，此类业务的读操作数量是写操作数量的 10 倍甚至 100 倍以上。&lt;/p>
&lt;h3 id="3双机切换">（3）双机切换&lt;/h3>
&lt;p>以上介绍的主备复制和主从复制都存在两个比较致命的问题，那就是并非100%高可用。主要体现在：&lt;/p>
&lt;ul>
&lt;li>主机故障后，无法进行写操作。&lt;/li>
&lt;li>如果主机无法恢复，需要人工指定新的主机角色。&lt;/li>
&lt;/ul>
&lt;p>双机切换就是为了解决这两个问题而产生的，包括主备切换和主从切换两种方案。简单来说，这两个方案就是在原有方案的基础上增加“切换”功能，即系统自动决定主机角色，并完成角色切换。&lt;/p>
&lt;p>常见的主备切换架构有三种形式：互连式、中介式和模拟式。具体细节感兴趣可以参考这篇文章——&lt;a href="https://xiaojun90.github.io/blog/architecture/1018.html">高可用存储架构：双机架构&lt;/a>。&lt;/p>
&lt;h3 id="4双主模式">（4）双主模式&lt;/h3>
&lt;p>&lt;strong>双主模式&lt;/strong>中，两台服务是平等关系，同时对外提供读写服务，客户端任选一台即可。双主模式是可用性最好的，但是这种架构的一致性处理比较困难，需要两台服务进行双向数据同步。一旦它们之间的通信断开，就形成了网络分区，这种分区会带来&lt;a href="https://cloud.tencent.com/developer/article/1027323">脑裂&lt;/a>（brain-split）问题，并且系统对此无解，必须人工介入。所以在架构设计时极少选择双主模式。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313161033607.jpg" alt="image-20220313161033607" style="zoom: 25%;" />
&lt;h3 id="5数据集群">（5）数据集群&lt;/h3>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313161130766.png" alt="image-20220313161130766" style="zoom:50%;" />
&lt;p>主备、主从、主主架构本质上都有一个隐含的假设：主机能够存储所有数据，但主机本身的存储和处理能力肯定是有极限的。早在 2013 年，Facebook 就有 2500 亿张上传照片，当时这些照片的容量就已经达到了 250 PB 字节（250 × 1024TB），平均一天上传的图片有 3 亿 5000 万张。如此大量的数据，单台服务器肯定是无法存储和处理的，我们必须使用多台服务器来存储数据，这就是数据集群架构。&lt;/p>
&lt;p>简单来说，集群就是多台机器组合在一起形成一个统一的系统，这里的“多台”，数量上至少是 3 台；相比而言，主备、主从都是 2 台机器。根据集群中机器承担的不同角色来划分，集群可以分为两类：数据集中集群、数据分散集群。&lt;/p>
&lt;h4 id="数据集中集群">①数据集中集群&lt;/h4>
&lt;p>数据集中集群与主备、主从这类架构相似，我们也可以称数据集中集群为 1 主多备或者 1 主多从。无论是 1 主 1 从、1 主 1 备，还是 1 主多备、1 主多从，数据都只能往主机中写，而读操作可以参考主备、主从架构进行灵活多变。虽然架构上是类似的，但由于集群里面的服务器数量更多，导致复杂度整体更高一些，具体体现在：&lt;/p>
&lt;ul>
&lt;li>主机如何将数据复制给备机&lt;/li>
&lt;li>备机如何检测主机状态&lt;/li>
&lt;li>主机故障后，如何决定新的主机&lt;/li>
&lt;/ul>
&lt;h4 id="数据分散集群">②数据分散集群&lt;/h4>
&lt;p>数据分散集群指多个服务器组成一个集群，每台服务器都会负责存储一部分数据；同时，为了提升硬件利用率，每台服务器又会备份一部分数据。&lt;/p>
&lt;p>数据分散集群的复杂点在于如何将数据分配到不同的服务器上，算法需要考虑这些设计点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>均衡性&lt;/strong>&lt;/p>
&lt;p>算法需要保证服务器上的数据分区基本是均衡的，不能存在某台服务器上的分区数量是另外一台服务器的几倍的情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>容错性&lt;/strong>&lt;/p>
&lt;p>当出现部分服务器故障时，算法需要将原来分配给故障服务器的数据分区分配给其他服务器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可伸缩性&lt;/strong>&lt;/p>
&lt;p>当集群容量不够，扩充新的服务器后，算法能够自动将部分数据分区迁移到新服务器，并保证扩容后所有服务器的均衡性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>数据分散集群和数据集中集群的不同点在于，&lt;strong>数据分散集群中的每台服务器都可以处理读写请求&lt;/strong>，因此不存在数据集中集群中负责写的主机那样的角色。但在数据分散集群中，必须有一个角色来负责执行数据分配算法，这个角色可以是独立的一台服务器【例如Hadoop的Namenode】，也可以是集群自己选举出的一台服务器【例如ElasticSearch的master node】。&lt;/p>
&lt;p>如果是集群服务器选举出来一台机器承担数据分区分配的职责，则这台服务器一般也会叫作主机，但我们需要知道这里的“主机”和数据集中集群中的“主机”，其职责是有差异的。&lt;/p>
&lt;h4 id="总结">③总结&lt;/h4>
&lt;p>数据集中集群架构中，客户端只能将数据写到主机；数据分散集群架构中，客户端可以向任意服务器中读写数据。正是因为这个关键的差异，决定了两种集群的应用场景不同。一般来说，数据集中集群适合数据量不大，集群机器数量不多的场景。例如，ZooKeeper 集群，一般推荐 5 台机器左右，数据量是单台服务器就能够支撑；而数据分散集群，由于其良好的可伸缩性，适合业务数据量巨大、集群机器数量庞大的业务场景。例如，Hadoop 集群、HBase 集群，大规模的集群可以达到上百台甚至上千台服务器。&lt;/p>
&lt;p>&lt;strong>【延伸阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/130332285">分布式一致性算法——共识性算法&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/130332285">分布式一致性算法-Paxos、Raft、ZAB、Gossip&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/2bceacd60b8a">Zookeeper——一致性协议:Zab协议 - 简书 (jianshu.com)&lt;/a>&lt;/p>
&lt;h3 id="6数据分区">（6）数据分区&lt;/h3>
&lt;p>前面我们讨论的存储高可用架构都是基于硬件故障的场景去考虑和设计的，主要考虑当部分硬件可能损坏的情况下系统应该如何处理，但对于一些影响非常大的灾难或者事故来说，有可能所有的硬件全部故障。例如，新奥尔良水灾、美加大停电、洛杉矶大地震等这些极端灾害或者事故，可能会导致一个城市甚至一个地区的所有基础设施瘫痪，这种情况下基于硬件故障而设计的高可用架构不再适用，我们需要基于地理级别的故障来设计高可用架构，这就是数据分区架构产生的背景。&lt;/p>
&lt;p>数据分区指将数据按照一定的规则进行分区，不同分区分布在不同的地理位置上，每个分区存储一部分数据，通过这种方式来规避地理级别的故障所造成的巨大影响。&lt;/p>
&lt;p>设计一个良好的数据分区架构，需要从&lt;strong>数据量的大小、具体的区域、分区的规则和复制的规则&lt;/strong>来具体考虑。&lt;/p>
&lt;p>其中最重要的就是数据复制的规则，在某些异常或者灾难情况下，虽然部分数据受影响，但整体数据并没有全部被影响，本身就相当于一个高可用方案了。但仅仅做到这点还不够，因为每个分区本身的数据量虽然只是整体数据的一部分，但还是很大，这部分数据如果损坏或者丢失，损失同样难以接受。&lt;strong>因此即使是分区架构，同样需要考虑复制方案。&lt;/strong>&lt;/p>
&lt;p>常见的复制方法有集中式、互备式和独立式三种。&lt;/p>
&lt;p>&lt;strong>集中式&lt;/strong>：所有数据存在一个总备份中心，设计简单，但是成本较高，需要建设一个独立的备份中心。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313161156097.png" alt="image-20220313161156097" style="zoom:25%;" />
&lt;p>&lt;strong>互备式&lt;/strong>：每个分区备份另外一个分区的数据，设计复杂，并且扩展麻烦，优点是成本低，因为每台机器都承载两个身份。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313161206002.png" alt="image-20220313161206002" style="zoom:25%;" />
&lt;p>&lt;strong>独立式&lt;/strong>：每个分区自己有独立的备份中心【非本分区的】，优点是设计简单，各个分区互不影响，但是成本极高。&lt;/p>
&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313161215359.png" alt="image-20220313161215359" style="zoom:25%;" /></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用01：什么是高可用系统？</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-concept/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-concept/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2021-10-08T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">高可用系列目录 高可用01：什么是高可用系统？ 高可用02：高可用系统设计之「架构高可用……</summary><content type="html">&lt;hr>
&lt;p>&lt;a href="https://kiwi4814.com/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/">高可用系列目录&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-concept/">&lt;font color="orange">高可用01：什么是高可用系统？&lt;/font>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-architecture/">高可用02：高可用系统设计之「架构高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-application/">高可用03：高可用系统设计之「应用高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-server/">高可用04：高可用系统设计之「服务高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-storage/">高可用05：高可用系统设计之「存储高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-aids/">高可用06：高可用系统设计之「其他辅助手段」&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本系列为本人在公司内部分享的高可用介绍，大部分内容于网上搜阅资料收集而成，参阅了极客时间的左耳听风系列以及零散的文章，主要目的并不是详细的介绍高可用，更多的是为了提供一个框架，整体上熟悉高可用是什么以及搭建高可用系统时需要注意的事项，做到熟悉框架、整体有数。&lt;/p>
&lt;h2 id="什么是高可用">什么是高可用？&lt;/h2>
&lt;p>要想了解高可用这个概念，我们首先需要知道：什么是高可用？在介绍它之前，我们首先来看两个息息相关的概念。&lt;/p>
&lt;h3 id="分布式一致性">分布式一致性&lt;/h3>
&lt;p>用户，在使用不同的系统或者不同的场景的时候，对于应用所着重的功能点是有不同的期望值的。&lt;/p>
&lt;p>举个例子，当我们登录12306买票的时候，我们肯定不希望买到的票和别人买到的票是重复的，对于我们来说是天经地义的，但是对于购票系统来说，就有严格的一致性要求，也就是说购票系统的数据无论在天南海北的哪个售票窗口每时每刻必须都保证是准确无误的。&lt;/p>
&lt;p>再说银行的转账系统，当我们转账或者从别处转入一笔钱的时候，如果金额较大，一般不会即时到账，而我们最希望的也是这笔钱能够到账而不是即时到账。那么对于银行的系统来说，最终要保证的是绝对的数据安全，即时在数据一致性上出现延时。&lt;/p>
&lt;p>再比如说，我们逛京东，看到商品库存量充足，点击购买，但是其实下单的时候才会去核查系统真实的库存量，也就是说我们看到的库存量其实并不是时时刻刻都是正确的，但这个对我们其实并没有造成太大的损失。&lt;/p>
&lt;p>对于分布式系统，要解决的一个重要问题就是数据的复制。&lt;strong>在对一个副本数据进行更新的时候，必须确保也能够更新其他的副本，否则不同副本之间的数据将不一致&lt;/strong>，这就是数据的一致性。&lt;/p>
&lt;p>那么如何解决这个问题？一种思路是&lt;strong>既然是由于延时动作引起的问题，那我可以将写入的动作阻塞，直到数据复制完成后，才完成写入动作&lt;/strong>。 没错，这似乎能解决问题，而且有一些系统的架构也确实直接使用了这个思路。但这个思路在解决一致性问题的同时，又带来了新的问题：写入的性能。如果你的应用场景有非常多的写请求，那么使用这个思路之后，后续的写请求都将会阻塞在前一个请求的写操作上，导致系统整体性能急剧下降。&lt;/p>
&lt;p>总体来说，&lt;strong>我们无法找到一种能够满足分布式系统所有系统属性的分布式一致性解决方案&lt;/strong>。因此，&lt;strong>如何既保证数据的一致性，同时又不影响系统运行的性能，是每一个分布式系统都需要重点考虑和权衡的&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>强一致性&lt;/p>
&lt;p>这种一致性级别是最符合用户直觉的，它要求&lt;strong>系统写入什么，读出来的也会是什么(数据时时一致)&lt;/strong>，用户体验好，但实现起来往往对系统的性能影响大&lt;/p>
&lt;/li>
&lt;li>
&lt;p>弱一致性&lt;/p>
&lt;p>这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不久承诺多久之后数据能够达到一致，但&lt;strong>会尽可能地保证到某个时间级别(比如秒级别)后，数据能够达到一致状态&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最终一致性&lt;/p>
&lt;p>最终一致性是弱一致性的一个特例，&lt;strong>系统会保证在一定时间内，能够达到一个数据一致的状态&lt;/strong>。这里之所以将最终一致性单独提出来，是因为它是弱一致性中非常推崇的一种一致性模型，也是业界在大型分布式系统的数据一致性上比较推崇的模型&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="cap和base理论">CAP和BASE理论&lt;/h3>
&lt;p>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer's theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在 2000 年的 ACM PODC 上提出的一个猜想。2002 年，麻省理工学院的赛斯·吉尔伯特（Seth Gilbert）和南希·林奇（Nancy Lynch）发表了布鲁尔猜想的证明，使之成为分布式计算领域公认的一个定理。&lt;/p>
&lt;p>简单来说，CAP理论可以概括为：在一个分布式系统（指互相连接并共享数据的节点的集合）中，当涉及读写操作时，只能保证**&lt;code>一致性（Consistence）&lt;/code>&lt;strong>、&lt;/strong>&lt;code>可用性（Availability）&lt;/code>&lt;strong>、&lt;/strong>&lt;code>分区容错性（Partition Tolerance）&lt;/code>**三者中的两个，另外一个必须被牺牲。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/image-20220313154456757.png" alt="image-20220313154456757">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:left">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>CA&lt;/strong>&lt;/td>
&lt;td style="text-align:left">放弃分区容错性**，**加强一致性和可用性，其实就是传统的单机数据库的选择&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>AP&lt;/strong>&lt;/td>
&lt;td style="text-align:left">放弃一致性(这里说的一致性是强一致性)**，**追求分区容错性和可用性，允许读取所有节点的数据，但是数据可能不一致，这是很多分布式系统设计时的选择，例如很多 NoSQL 系统就是如此&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>CP&lt;/strong>&lt;/td>
&lt;td style="text-align:left">放弃可用性，追求一致性和分区容错性，不能访问未同步完成的节点，失去部分可用性，基本不会选择，网络问题会直接让整个系统不可用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>需要明确的一点是，对于一个分布式系统而言，分区容错性是一个最基本的要求。因为既然是一个分布式系统，那么分布式系统中的组件必然需要被部署到不同的节点，否则也就无所谓分布式系统了，因此必然出现子网络。而对于分布式系统而言，网络问题又是一个必定会出现的异常情况，因此分区容错性也就成为了一个分布式系统必然需要面对和解决的问题。&lt;strong>因此系统架构师往往需要把精力花在如何根据业务特点在C(一致性)和A(可用性)之间寻求平衡&lt;/strong>。&lt;/p>
&lt;p>在说BASE理论之前，我想大家都很熟悉的一个属性，也是面试题必背的问题，那就是ACID，传统关系型数据库系统的事务都有 ACID 属性，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。&lt;/p>
&lt;p>事务的 ACID 属性保证了数据库的一致性，比如银行系统中，转账就是一个事务，从原账户扣除金额，以及向目标账户添加金额，这两个数据库操作的总和构成一个完整的逻辑过程，是不可拆分的原子操作，从而保证了整个系统中的总金额没有变化。然而，这对于我们的分布式系统来说，尤其是微服务来说，这样的方式是很难满足高性能要求的。我们刚刚介绍的CAP 理论——在分布式的服务架构中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition Tolerance），在现实中不能都满足，最多只能满足其中两个。&lt;/p>
&lt;p>所以，为了提高性能，出现了 ACID 的一个变种—— BASE。&lt;/p>
&lt;ul>
&lt;li>**Basic Availability：基本可用。**这意味着，系统可以出现暂时不可用的状态，而后面会快速恢复。&lt;/li>
&lt;li>**Soft-state：软状态。**它是我们前面的“有状态”和“无状态”的服务的一种中间状态。也就是说，为了提高性能，我们可以让服务暂时保存一些状态或数据，这些状态和数据不是强一致性的。&lt;/li>
&lt;li>&lt;strong>Eventual Consistency：最终一致性&lt;/strong>，系统在一个短暂的时间段内是不一致的，但最终整个系统看到的数据是一致的。&lt;/li>
&lt;/ul>
&lt;p>BASE 理论是对 CAP 中&lt;strong>一致性&lt;/strong>和&lt;strong>可用性&lt;/strong>权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的。BASE 理论的核心思想是：&lt;strong>即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性&lt;/strong>。&lt;strong>它完全不同于 ACID 的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID 特性和 BASE 理论往往又会结合在一起，这就是所谓的酸碱平衡。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dunwu/blog/blob/master/source/_posts/theory/distributed-base-theory.md">分布式基础原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98">Wiki - 拜占庭将军问题&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/av78588312/">李永乐老师的拜占庭将军问题视频讲解&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ruanyifeng.com/blog/2018/07/cap.html">CAP 定理的含义 - 阮一峰&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.im/post/5d720e86f265da03cc08de74">神一样的 CAP 理论被应用在何方&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leetcode-cn.com/circle/article/IM4z2f/">分布式环境下，如何保证数据一致性？&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="高可用的定义">高可用的定义&lt;/h3>
&lt;p>我们先看维基百科对于高可用的定义：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>High availability&lt;/strong> (&lt;strong>HA&lt;/strong>) is a characteristic of a system which aims to ensure an agreed level of operational performance, usually &lt;a href="https://en.wikipedia.org/wiki/Uptime">uptime&lt;/a>, for a higher than normal period.&lt;/p>
&lt;/blockquote>
&lt;p>翻译过来大概是：高可用性 (HA) 是系统的一个特征，旨在确保在高于正常时间的时间内达到商定的操作性能水平，通常是正常运行时间。&lt;/p>
&lt;h3 id="高可用的量化方法nines">高可用的量化方法——”Nines“&lt;/h3>
&lt;p>系统不可用也被称作系统故障，&lt;strong>业界通常用多个 9 来衡量系统的可用性&lt;/strong>。如 QQ 的可用性为 4 个 9，即 99.99% 可用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">网站不可用时间 = 故障修复时间点 - 故障发现时间点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">网站年度可用性指标 = (1 - 网站不可用时间/年度总时间) * 100%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">系统可用性%&lt;/th>
&lt;th style="text-align:left">宕机时间/年&lt;/th>
&lt;th style="text-align:left">宕机时间/月&lt;/th>
&lt;th style="text-align:left">宕机时间/周&lt;/th>
&lt;th style="text-align:left">宕机时间/天&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">90% (1个9)&lt;/td>
&lt;td style="text-align:left">36.5 天&lt;/td>
&lt;td style="text-align:left">72 小时&lt;/td>
&lt;td style="text-align:left">16.8 小时&lt;/td>
&lt;td style="text-align:left">2.4 小时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">95% (1.5个9)&lt;/td>
&lt;td style="text-align:left">18.26天&lt;/td>
&lt;td style="text-align:left">36.53 小时&lt;/td>
&lt;td style="text-align:left">8.4 小时&lt;/td>
&lt;td style="text-align:left">1.2 小时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">99% (2个9)&lt;/td>
&lt;td style="text-align:left">3.65 天&lt;/td>
&lt;td style="text-align:left">7.20 小时&lt;/td>
&lt;td style="text-align:left">1.68 小时&lt;/td>
&lt;td style="text-align:left">14.4 分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">99.9% (3个9)&lt;/td>
&lt;td style="text-align:left">8.76 小时&lt;/td>
&lt;td style="text-align:left">43.8 分&lt;/td>
&lt;td style="text-align:left">10.1 分钟&lt;/td>
&lt;td style="text-align:left">1.44 分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">99.99% (4个9)&lt;/td>
&lt;td style="text-align:left">52.56 分&lt;/td>
&lt;td style="text-align:left">4.38 分&lt;/td>
&lt;td style="text-align:left">1.01 分钟&lt;/td>
&lt;td style="text-align:left">8.66 秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">99.999% (5个9)&lt;/td>
&lt;td style="text-align:left">5.26 分&lt;/td>
&lt;td style="text-align:left">25.9 秒&lt;/td>
&lt;td style="text-align:left">6.05 秒&lt;/td>
&lt;td style="text-align:left">0.87 秒&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="高可用的核心原则">高可用的核心原则&lt;/h3>
&lt;ol>
&lt;li>消除单点故障。意思就是说在系统的设计中对软硬件增加冗余，即使组件发生故障，也并不意味着整个系统发生故障。&lt;/li>
&lt;li>可靠的交叉点（CrossOver）。 在冗余系统中，交叉点本身往往会成为单点故障。 这是一些不容易冗余的结点，比如域名解析，负载均衡器等。&lt;/li>
&lt;li>对故障的检测和恢复。检测故障以及用备份的结点接管故障点。这也就是failover。&lt;/li>
&lt;/ol>
&lt;p>那么，我们要想设计一个高可用系统，需要注意些什么呢？要想回答这个问题，我们可以先反向考虑一下，导致系统不可用的原因有哪些呢？&lt;/p>
&lt;h3 id="导致系统不可用的原因分析">导致系统不可用的原因分析&lt;/h3>
&lt;p>导致系统不可用的原因有两类，有计划的宕机和无计划的宕机。其中，无计划宕机有：&lt;/p>
&lt;ul>
&lt;li>系统级的故障 – 包括主机、操作系统、中间件、数据库、网络、电源以及外围设备&lt;/li>
&lt;li>数据和中介的故障 – 包括人员误操作、硬盘故障、数据乱了&lt;/li>
&lt;li>还有：自然灾害、人为破坏、以及供电问题。&lt;/li>
&lt;/ul>
&lt;p>有计划的宕机原因有：&lt;/p>
&lt;ul>
&lt;li>日常任务：备份，容量规划，用户和安全管理，后台批处理应用&lt;/li>
&lt;li>运维相关：数据库维护、应用维护、中间件维护、操作系统维护、网络维护&lt;/li>
&lt;li>升级相关：数据库、应用、中间件、操作系统、网络、包括硬件升级&lt;/li>
&lt;/ul>
&lt;p>我们再给它们归个类。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>网络问题&lt;/strong>。网络链接出现问题，网络带宽出现拥塞……&lt;/li>
&lt;li>&lt;strong>性能问题&lt;/strong>。数据库慢 SQL、Java Full GC、硬盘 IO 过大、CPU 飙高、内存不足……&lt;/li>
&lt;li>&lt;strong>安全问题&lt;/strong>。被网络攻击，如 DDoS 等。&lt;/li>
&lt;li>&lt;strong>运维问题&lt;/strong>。系统总是在被更新和修改，架构也在不断地被调整，监控问题……&lt;/li>
&lt;li>&lt;strong>管理问题&lt;/strong>。没有梳理出关键服务以及服务的依赖关系，运行信息没有和控制系统同步……&lt;/li>
&lt;li>&lt;strong>硬件问题&lt;/strong>。硬盘损坏、网卡出问题、交换机出问题、机房掉电、挖掘机问题……&lt;/li>
&lt;/ol>
&lt;p>细数以上种种问题，我们会发现，高可用除了单纯的技术设计方案以外，跟外界因素也是息息相关的，甚至有些根本无法避免。而&lt;strong>高可用的系统架构设计目标就是要保证当出现硬件故障时，服务依然可用，数据依然能够保存并被访问&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>所以实现高可用的系统架构的主要手段是数据和服务的冗余备份及失效转移&lt;/strong>，一旦某些服务器宕机，就将服务切换到其他可用的服务器上；如果磁盘损坏，则从备份的磁盘读取数据。&lt;/p>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://xie.infoq.cn/article/132b10ce236094d4b360715eb">导致系统不可用的原因有哪些？保障系统稳定高可用的方案有哪些？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://coolshell.cn/articles/17459.html">关于高可用的系统 | 酷壳&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>【文章节选】真正决定高可用系统的本质原因&lt;/strong>&lt;/p>
&lt;p>从上面这些会影响高可用的SLA的因素，你看到了什么？如果你还是只看到了技术方面或是软件设计的东西，那么你只看到了冰山一角。我们再仔细想一想，&lt;strong>那个5个9的SLA在一年内只能是5分钟的不可用时间，5分钟啊，如果按一年只出1次故障，你也得在五分钟内恢复故障，让我们想想，这意味着什么？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>如果你没有一套科学的牛逼的软件工程的管理，没有牛逼先进的自动化的运维工具，没有技术能力很牛逼的工程师团队，怎么可能出现高可用的系统啊&lt;/strong>。&lt;/p>
&lt;p>是的，&lt;strong>要干出高可用的系统，这TMD就是一套严谨科学的工程管理&lt;/strong>，其中包括但不限于了：&lt;/p>
&lt;ul>
&lt;li>软件的设计、编码、测试、上线和软件配置管理的水平&lt;/li>
&lt;li>工程师的人员技能水平&lt;/li>
&lt;li>运维的管理和技术水平&lt;/li>
&lt;li>数据中心的运营管理水平&lt;/li>
&lt;li>依赖于第三方服务的管理水平&lt;/li>
&lt;/ul>
&lt;p>深层次的东西则是——对工程这门科学的尊重：&lt;/p>
&lt;ul>
&lt;li>对待技术的态度&lt;/li>
&lt;li>一个公司的工程文化&lt;/li>
&lt;li>领导者对工程的尊重&lt;/li>
&lt;/ul>
&lt;/blockquote></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">MySQL优化之索引（index）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/mysql-index/"/><id>https://kiwi4814.github.io/posts/2020/mysql-index/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2020-09-01T20:42:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、定义 索引是一种数据结构，存储表中特定列的值并进行排序，方便查询这个特定列，就好比……</summary><content type="html">&lt;h1 id="一定义">一、定义&lt;/h1>
&lt;p>索引是一种数据结构，存储表中特定列的值并进行排序，方便查询这个特定列，就好比一本书的目录，可以更快的根据目录查找所需的内容。&lt;/p>
&lt;h2 id="索引的优点">索引的优点&lt;/h2>
&lt;ol>
&lt;li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。&lt;/li>
&lt;li>可以大大加快数据的检索速度，避免进行全表的数据扫描，大大减少遍历匹配的行数，这也是创建索引的最主要的原因。&lt;/li>
&lt;li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。&lt;/li>
&lt;li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。&lt;/li>
&lt;li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。&lt;/li>
&lt;/ol>
&lt;h2 id="索引的缺点">索引的缺点&lt;/h2>
&lt;ol>
&lt;li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。&lt;/li>
&lt;li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。&lt;/li>
&lt;li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。&lt;/li>
&lt;/ol>
&lt;h2 id="在哪些列建立索引">在哪些列建立索引&lt;/h2>
&lt;ol>
&lt;li>在经常需要搜索的列上，可以加快搜索的速度；&lt;/li>
&lt;li>在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；&lt;/li>
&lt;li>在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；&lt;/li>
&lt;li>在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；&lt;/li>
&lt;li>在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；&lt;/li>
&lt;li>在经常使用在&lt;code>WHERE&lt;/code>子句中的列上面创建索引，加快条件的判断速度。&lt;/li>
&lt;/ol>
&lt;h2 id="不在哪些列建索引">不在哪些列建索引？&lt;/h2>
&lt;ol>
&lt;li>对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。&lt;/li>
&lt;li>对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。&lt;/li>
&lt;li>对于那些定义为&lt;code>text&lt;/code>, &lt;code>image&lt;/code>和&lt;code>bit&lt;/code>数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。&lt;/li>
&lt;li>当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。&lt;/li>
&lt;/ol>
&lt;h1 id="二索引的数据结构">二、索引的数据结构&lt;/h1>
&lt;p>常见的索引的数据结构有：&lt;code>B+Tree&lt;/code>、&lt;code>Hash索引&lt;/code>、&lt;code>FullText索引&lt;/code>、&lt;code>R-Tree索引&lt;/code>。&lt;/p>
&lt;h3 id="hash-索引">Hash 索引&lt;/h3>
&lt;p>&lt;strong>1. 概述：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>MySQL 中，只有Memory存储引擎支持Hash索引，是Memory表的默认索引类型。hash 索引把数据的索引以 hash 值形式组织起来，因此检索效率非常高，可以一次定位，不像B-/+Tree索引需要进行从根节点到叶节点的多次 IO 操作。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>2. Hash 索引的缺点：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>① Hash 索引仅仅能满足等值的查询，不能满足范围查询。因为数据在经过 Hash 算法后，其大小关系就可能发生变化。 ② Hash 索引不能被排序。同样是因为数据经过 Hash 算法后，大小关系就可能发生变化，排序是没有意义的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>③ Hash 索引不能避免表数据的扫描。因为发生 Hash 碰撞时，仅仅比较 Hash 值是不够的，需要比较实际的值以判定是否符合要求。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>④ Hash 索引在发生大量 Hash 值相同的情况时性能不一定比 B-Tree 索引高。因为碰撞情况会导致多次的表数据的扫描，造成整体性能的低下，可以通过采用合适的 Hash 算法一定程度解决这个问题。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>⑤ Hash 索引不能使用部分索引键查询。因为当使用组合索引情况时，是把多个数据库列数据合并后再计算 Hash 值，所以对单独列数据计算 Hash 值是没有意义的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="fulltext-索引">FullText 索引&lt;/h3>
&lt;p>&lt;strong>1. 概述：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>全文索引，目前 MySQL 中只有MyISAM存储引擎支持，并且只有char、varchar、text 类型支持。它用于替代效率较低的like 模糊匹配操作，而且可以通过多字段组合的全文索引一次性全模糊匹配多个字段。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>2. 存储结构：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>同样使用B-Tree存放索引数据，但使用的是特定的算法，将字段数据分割后再进行索引（一般每 4 个字节一次分割），索引文件存储的是分割前的索引字符串集合，与分割后的索引信息，对应 Btree 结构的节点存储的是分割后的词信息以及它在分割前的索引字符串集合中的位置。&lt;/p>
&lt;/blockquote>
&lt;h3 id="b-tree-索引">B-/+Tree 索引&lt;/h3>
&lt;ul>
&lt;li>B+Tree 是 mysql 使用最频繁的一个索引数据结构，是 Innodb 和 Myisam 存储引擎模式的索引类型。相对 Hash 索引，B+树在查找单条记录的速度比不上 Hash 索引，但是更适合排序等操作。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>1. B+Tree 索引的优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>带顺序访问指针的 B+Tree：B+Tree 所有索引数据都在叶子结点上，并且增加了顺序访问指针,每个叶子节点都有指向相邻叶子节点的指针。这样做是为了提高区间查询效率，例如查询 key 为从 18 到 49 的所有数据记录，当找到 18 后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。&lt;/li>
&lt;li>大大减少磁盘 I/O 读取次数。&lt;/li>
&lt;/ul>
&lt;h1 id="三mysql索引的实现">三、MySQL索引的实现&lt;/h1>
&lt;p>在 MySQL 中，索引属于存储引擎级别的概念，不同存储引擎对索引的实现方式是不同的，本部分主要讨论 MyISAM 和 InnoDB 两个存储引擎的索引实现方式。&lt;/p>
&lt;h3 id="myisam-索引的实现">MyISAM 索引的实现&lt;/h3>
&lt;p>&lt;strong>1. 主键索引&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>MyISAM 引擎使用 B+Tree 作为索引结构，叶节点的 data 域存放的是数据记录的地址。下图是 MyISAM 索引的原理图：&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/3.png" alt="">&lt;/p>
&lt;ul>
&lt;li>这里设表一共有三列，假设我们以 Col1 为主键，则上图是一个 MyISAM 表的主索引（Primary key）示意。可以看出 MyISAM 的索引文件仅仅保存数据记录的地址。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. 辅助索引&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求 key 是唯一的，而辅助索引的 key 可以重复。如果我们在 Col2 上建立一个辅助索引，则此索引的结构如下图所示：&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/4.png" alt="">&lt;/p>
&lt;ul>
&lt;li>同样也是一颗 B+Tree，data 域保存数据记录的地址。因此，MyISAM 中索引检索的算法为首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址，读取相应数据记录。&lt;/li>
&lt;li>MyISAM 的索引方式也叫做“非聚集”的，之所以这么称呼是为了与 InnoDB 的聚集索引区分。&lt;/li>
&lt;/ul>
&lt;h3 id="innodb-索引的实现">InnoDB 索引的实现&lt;/h3>
&lt;ul>
&lt;li>虽然 InnoDB 也使用 B+Tree 作为索引结构，但具体实现方式却不相同。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>1. 主键索引&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>与 MyISAM 第一个重大区别是 InnoDB 的数据文件本身就是索引文件。从上文知道，MyISAM 索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在 InnoDB 中，表数据文件本身就是按 B+Tree 组织的一个索引结构，这棵树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/2.png" alt="https://gitee.com/chenjiabing666/Blog-file/raw/master/%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/2.png">&lt;/p>
&lt;p>上图是 InnoDB 主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为 InnoDB 的数据文件本身要按主键聚集，所以 InnoDB 要求表必须有主键（MyISAM 可以没有），如果没有显式指定，则 MySQL 系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则 MySQL 自动为 InnoDB 表生成一个隐含字段作为主键，这个字段长度为 6 个字节，类型为长整形。&lt;/p>
&lt;p>&lt;strong>2. 辅助索引&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>第二个与 MyISAM 索引的不同是 InnoDB 的辅助索引 data 域存储相应记录主键的值而不是地址。换句话说，InnoDB 的所有辅助索引都引用主键作为 data 域。例如，下图为定义在 Col3 上的一个辅助索引：&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/1.png" alt="https://gitee.com/chenjiabing666/Blog-file/raw/master/%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/1.png">&lt;/p>
&lt;ul>
&lt;li>这里以英文字符的 ASCII 码作为比较准则。聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。&lt;/li>
&lt;li>&lt;strong>InnoDB 表是基于聚簇索引建立的&lt;/strong>。因此 InnoDB 的索引能提供一种非常快速的主键查找性能。不过，它的辅助索引也会包含主键列，所以，如果主键使用过长的字段，将会导致其他辅助索变得更大。如果想在表上定义 、很多索引，则争取尽量把主键定义得小一些。InnoDB 不会压缩索引。&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/09/mysql/" term="MySQL" label="MySQL"/></entry><entry><title type="text">如何在MySQL中设计一个树形存储结构？</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/mysql-tree/"/><id>https://kiwi4814.github.io/posts/2020/mysql-tree/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2020-09-01T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">我们经常需要在数据库中去维护一个树形结构，通常普遍的做法有以下几种： Adjacency List 每一条记录存……</summary><content type="html">&lt;p>我们经常需要在数据库中去维护一个树形结构，通常普遍的做法有以下几种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>&lt;strong>Adjacency List&lt;/strong>&lt;/em>&lt;/p>
&lt;p>每一条记录存在一个&lt;code>parent_id&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Path Enumerations&lt;/strong>&lt;/em>&lt;/p>
&lt;p>每一条记录存整个&lt;code>tree path&lt;/code>经过的&lt;code>node&lt;/code>枚举&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Nested Sets&lt;/strong>&lt;/em>&lt;/p>
&lt;p>每一条记录存 &lt;code>nleft&lt;/code> 和 &lt;code>nright&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Closure Table&lt;/strong>&lt;/em>&lt;/p>
&lt;p>额外维护一个表，所有的t&lt;code>ree path&lt;/code>作为记录进行保存。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.notion.so/322ad02521884b51bade610e1b42ee98">各类方法的操作代价&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/09/mysql/" term="MySQL" label="MySQL"/></entry><entry><title type="text">CentOS 7离线安装MySQL 5.7</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/mysql-install/"/><id>https://kiwi4814.github.io/posts/2020/mysql-install/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2020-08-30T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">操作系统：CentOs 7.7 MySQL版本：MySQL-5.7.25-x86_64 安装步……</summary><content type="html">&lt;h1 id="heading">&lt;/h1>
&lt;h4 id="操作系统centos-77">&lt;strong>操作系统：CentOs 7.7&lt;/strong>&lt;/h4>
&lt;h4 id="mysql版本mysql-5725-x86_64">&lt;strong>MySQL版本：MySQL-5.7.25-x86_64&lt;/strong>&lt;/h4>
&lt;h4 id="安装步骤">&lt;strong>安装步骤：&lt;/strong>&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>查找并卸载&lt;code>mariadb&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查找当前系统下是否有mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ rpm -qa &lt;span class="p">|&lt;/span> grep mariadb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 卸载&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mariadb-libs-5.5.64-1.el7.x86_64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ rpm -e --nodeps mariadb-libs-5.5.64-1.el7.x86_64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>卸载原有的&lt;code>mysql&lt;/code>相关&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查找当前系统是否有mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ rpm -qa &lt;span class="p">|&lt;/span> grep mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ rm /etc/my.cnf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查找是否存在mysql用户组和用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ cat /etc/group &lt;span class="p">|&lt;/span> grep mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ cat /etc/passwd &lt;span class="p">|&lt;/span> grep mysql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建&lt;code>mysql&lt;/code>用户和组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建用户组&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ groupadd mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ useradd -g mysql mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改用户密码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ passwd mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Changing password &lt;span class="k">for&lt;/span> user mysql.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">New password:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Retype new password:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">passwd: all authentication tokens updated successfully.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>将&lt;code>mysql&lt;/code>离线安装文件上传到服务器上&lt;/p>
&lt;p>（1）&lt;a href="https://downloads.mysql.com/archives/community/">下载地址&lt;/a>&lt;/p>
&lt;p>（2）上传到服务器的&lt;code>/usr/local/&lt;/code>目录下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">scp /localurl/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz root@host:/usr/local/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>解压并建立软链接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意：5的操作均在此目录下进行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /usr/local/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 解压&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver local&lt;span class="o">]&lt;/span>$ tar -zxvf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建软链接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver local&lt;span class="o">]&lt;/span>$ ln -s mysql-5.7.25-linux-glibc2.12-x86_64 mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 赋予mysql用户权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver local&lt;span class="o">]&lt;/span>$ chown -R mysql:mysql mysql/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建相关文件，赋予&lt;code>mysql&lt;/code>用户权限&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 分别创建data tmp log文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 此目录可自行指定，不过要和mysql配置文件中相一致&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ mkdir -p /home/datadriver/mysql/&lt;span class="o">{&lt;/span>data,tmp,log&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 赋权&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /home/datadriver/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver datadriver&lt;span class="o">]&lt;/span>$ chown -R mysql:mysql mysql/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建并修改配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 这里选择将配置文件放在/etc下面，也可以放在mysql根目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /etc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建并编辑my.cnf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver etc&lt;span class="o">]&lt;/span>$ vi my.cnf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里给出一份配置文件作为参考：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[mysql]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">default-character-set&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">utf8mb4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[mysqld]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- Basic ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">server_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">3306&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">basedir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/usr/local/mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">datadir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/usr/local/mysql/data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">socket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/tmp/mysql.sock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">skip-host-cache&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">skip_name_resolve&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">lower_case_table_names&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">character-set-server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">utf8mb4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">collation-server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">utf8mb4_general_ci&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">init_connect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#39;SET NAMES utf8mb4&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">default-storage-engine&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">INNODB&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">group_concat_max_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">102400&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#skip-external-locking&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#skip-networking&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- Connection/File/Table ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">max_connections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">max_connect_errors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">20000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#wait_timeout = 31536000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#interactive_timeout = 31536000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">wait_timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">3600&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">interactive_timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">3600&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">lock_wait_timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">1800&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">max_allowed_packet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">1024M&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- Thread Pool ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#thread_handling = pool-of-threads&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#thread_pool_oversubscribe = 5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">thread_cache_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#extra_max_connections = 10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#extra_port = 33333&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- log ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">expire_logs_days&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">log-bin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">mysql-bin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">binlog_format&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">ROW&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- Others ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">sql_mode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装&lt;code>mysql&lt;/code>（要先安装依赖）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装相关依赖，否则会报错，此处不再演示离线安装方式，需要的自行查阅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ yum install libaio*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 进入到mysql /bin 目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /usr/local/myysql/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 初始化mysql，指定用户为mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 此处如果日志中配置了log_error，则控制台不会打印数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver bin&lt;span class="o">]&lt;/span>$ ./mysqld --initialize --user&lt;span class="o">=&lt;/span>mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver bin&lt;span class="o">]&lt;/span>$ cat ../log/error.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.666390Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option &lt;span class="o">(&lt;/span>see documentation &lt;span class="k">for&lt;/span> more details&lt;span class="o">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.813204Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> InnoDB: New log files created, &lt;span class="nv">LSN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">45790&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.848783Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> InnoDB: Creating foreign key constraint system tables.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.908557Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> No existing UUID has been found, so we assume that this is the first &lt;span class="nb">time&lt;/span> that this server has been started. Generating a new UUID: 5fe4d020-d161-11ea-9224-0894ef98b412.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.909451Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> Gtid table is not ready to be used. Table &lt;span class="s1">&amp;#39;mysql.gtid_executed&amp;#39;&lt;/span> cannot be opened.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.911251Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Note&lt;span class="o">]&lt;/span> A temporary password is generated &lt;span class="k">for&lt;/span> root@localhost: -h+#XfgW:4h2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357662Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;user&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;root@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357715Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;user&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;mysql.session@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357739Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;user&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;mysql.sys@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357778Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;db&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;performance_schema mysql.session@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357793Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;db&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;sys mysql.sys@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357820Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;proxies_priv&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;@ root@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357877Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;tables_priv&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;user mysql.session@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357898Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;tables_priv&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;sys_config mysql.sys@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置开机启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 进入应用根目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /usr/local/mysql/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 复制启动脚本到资源目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver mysql&lt;span class="o">]&lt;/span>$ cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 增加mysqld服务控制脚本执行权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver mysql&lt;span class="o">]&lt;/span>$ chmod +x /etc/rc.d/init.d/mysqld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将mysqld服务加入到系统服务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver mysql&lt;span class="o">]&lt;/span>$ chkconfig --add mysqld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 检查mysqld服务是否已经生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver mysql&lt;span class="o">]&lt;/span>$ chkconfig --list mysqld
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>切换至&lt;code>mysql&lt;/code>用户，设置环境变量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 切换至mysql用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ su - mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改配置文件，增加i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ vi .bash_profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 刷新配置文件使其立即生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># export PATH=$PATH:/home/datadriver/mysql/mysql5.7.25/bin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">source&lt;/span> .bash_profile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动服务&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 仍然在mysql用户下，启动mysql（启动用start）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ service mysqld restart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 重启的时候报警告&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Shutting down MySQL..&lt;span class="o">[&lt;/span> OK &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm: cannot remove &lt;span class="s1">&amp;#39;/var/lock/subsys/mysql&amp;#39;&lt;/span>: Permission denied
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting MySQL.&lt;span class="o">[&lt;/span> OK &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 切回root用户，赋权即即可&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ su - root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /var/lock/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver lock&lt;span class="o">]&lt;/span>$ chown -R mysql:mysql subsys/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 切回mysql重启，成功。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ service mysqld restart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Shutting down MySQL..&lt;span class="o">[&lt;/span> OK &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting MySQL.&lt;span class="o">[&lt;/span> OK &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改&lt;code>mysql&lt;/code>默认密码并设置远程连接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- 修改密码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IDENTIFIED&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">localhost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">flush&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">privileges&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- 远程连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">flush&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">privileges&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/series/2020/08/linux%E8%BF%90%E7%BB%B4/" term="Linux运维" label="Linux运维"/><category scheme="https://kiwi4814.github.io/tags/2023/02/linux/" term="Linux" label="Linux"/><category scheme="https://kiwi4814.github.io/tags/2023/02/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/><category scheme="https://kiwi4814.github.io/tags/2020/09/mysql/" term="MySQL" label="MySQL"/></entry><entry><title type="text">JUC框架简介</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/juc-summary/"/><id>https://kiwi4814.github.io/posts/2020/juc-summary/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2020-06-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、Lock框架和Tools类 类结构总览 接口：Condition Condition为……</summary><content type="html">&lt;h1 id="一lock框架和tools类">一、Lock框架和Tools类&lt;/h1>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/java-thread-x-juc-overview-lock.png" alt="">&lt;/p>
&lt;p>类结构总览&lt;/p>
&lt;h2 id="接口condition">接口：Condition&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>Condition&lt;/code>为接口类型，它将 Object 监视器方法(wait、notify 和 notifyAll)分解成截然不同的对象，以便通过将这些对象与任意 Lock 实现组合使用，为每个对象提供多个等待 set (wait-set)。其中，Lock 替代了 synchronized 方法和语句的使用，Condition 替代了 Object 监视器方法的使用。可以通过await(),signal()来休眠/唤醒线程。&lt;/p>
&lt;/blockquote>
&lt;h2 id="接口lock">接口：Lock&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>Lock&lt;/code>为接口类型，Lock实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的Condition对象。&lt;/p>
&lt;/blockquote>
&lt;h2 id="接口-readwritelock">接口: ReadWriteLock&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>ReadWriteLock&lt;/code>为接口类型， 维护了一对相关的锁，一个用于只读操作，另一个用于写入操作。只要没有 writer，读取锁可以由多个 reader 线程同时保持。写入锁是独占的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="抽象类-abstractownablesynchonizer">抽象类: AbstractOwnableSynchonizer&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>AbstractOwnableSynchonizer&lt;/code>为抽象类，可以由线程以独占方式拥有的同步器。此类为创建锁和相关同步器(伴随着所有权的概念)提供了基础。AbstractOwnableSynchronizer 类本身不管理或使用此信息。但是，子类和工具可以使用适当维护的值帮助控制和监视访问以及提供诊断。&lt;/p>
&lt;/blockquote>
&lt;h2 id="核心抽象类int-abstractqueuedsynchonizer">核心抽象类(int): AbstractQueuedSynchonizer&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>AbstractQueuedSynchonizer&lt;/code>为抽象类，其为实现依赖于先进先出 (FIFO) 等待队列的阻塞锁和相关同步器(信号量、事件，等等)提供一个框架。此类的设计目标是成为依靠单个原子 int 值来表示状态的大多数同步器的一个有用基础。&lt;/p>
&lt;/blockquote>
&lt;h2 id="锁常用类-locksupport">&lt;strong>锁常用类: LockSupport&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>LockSupport为常用类，用来创建锁和其他同步类的基本线程阻塞原语。LockSupport的功能和&amp;quot;Thread中的 Thread.suspend()和Thread.resume()有点类似&amp;quot;，LockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程。但是park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死锁”问题。&lt;/p>
&lt;/blockquote>
&lt;h2 id="锁常用类-reentrantlock">&lt;strong>锁常用类: ReentrantLock&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>ReentrantLock为常用类，它是一个可重入的互斥锁 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。&lt;/p>
&lt;/blockquote>
&lt;h2 id="锁常用类-reentrantreadwritelock">&lt;strong>锁常用类: ReentrantReadWriteLock&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>ReentrantReadWriteLock是读写锁接口ReadWriteLock的实现类，它包括Lock子类ReadLock和WriteLock。ReadLock是共享锁，WriteLock是独占锁。&lt;/p>
&lt;/blockquote>
&lt;h2 id="锁常用类-stampedlock">&lt;strong>锁常用类: StampedLock&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>它是java8在java.util.concurrent.locks新增的一个API。StampedLock控制锁有三种模式(写，读，乐观读)，一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-countdownlatch">&lt;strong>工具常用类: CountDownLatch&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>CountDownLatch为常用类，它是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-cyclicbarrier">&lt;strong>工具常用类: CyclicBarrier&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>CyclicBarrier为常用类，其是一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-phaser">&lt;strong>工具常用类: Phaser&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-semaphore">&lt;strong>工具常用类: Semaphore&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>Semaphore为常用类，其是一个计数信号量，从概念上讲，信号量维护了一个许可集。如有必要，在许可可用前会阻塞每一个 acquire()，然后再获取该许可。每个 release() 添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，Semaphore 只对可用许可的号码进行计数，并采取相应的行动。通常用于限制可以访问某些资源(物理或逻辑的)的线程数目。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-exchanger">&lt;strong>工具常用类: Exchanger&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。这两个线程通过exchange()方法交换数据，当一个线程先执行exchange()方法后，它会一直等待第二个线程也执行exchange()方法，当这两个线程到达同步点时，这两个线程就可以交换数据了。&lt;/p>
&lt;/blockquote>
&lt;h1 id="二collections-并发集合">二、Collections: 并发集合&lt;/h1>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/java-thread-x-juc-overview-2.png" alt="类结构关系">&lt;/p>
&lt;p>类结构关系&lt;/p>
&lt;h2 id="queue-arrayblockingqueue">Queue: ArrayBlockingQueue&lt;/h2>
&lt;blockquote>
&lt;p>一个由数组支持的有界阻塞队列。此队列按 **&lt;code>FIFO(先进先出)&lt;/code>**原则对元素进行排序。队列的头部 是在队列中存在时间最长的元素。队列的尾部 是在队列中存在时间最短的元素。新元素插入到队列的尾部，队列获取操作则是从队列头部开始获得元素。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-linkedblockingqueue">Queue: LinkedBlockingQueue&lt;/h2>
&lt;blockquote>
&lt;p>一个基于已链接节点的、范围任意的 blocking queue。此队列按 &lt;code>**FIFO(先进先出)**&lt;/code>排序元素。队列的头部 是在队列中时间最长的元素。队列的尾部 是在队列中时间最短的元素。新元素插入到队列的尾部，并且队列获取操作会获得位于队列头部的元素。链接队列的吞吐量通常要高于基于数组的队列，但是在大多数并发应用程序中，其可预知的性能要低。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-linkedblockingdeque">Queue: LinkedBlockingDeque&lt;/h2>
&lt;blockquote>
&lt;p>一个基于已链接节点的、任选范围的阻塞双端队列。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-concurrentlinkedqueue">Queue: ConcurrentLinkedQueue&lt;/h2>
&lt;blockquote>
&lt;p>一个基于链接节点的无界线程安全队列。此队列按照 FIFO(先进先出)原则对元素进行排序。队列的头部 是队列中时间最长的元素。队列的尾部 是队列中时间最短的元素。新的元素插入到队列的尾部，队列获取操作从队列头部获得元素。当多个线程共享访问一个公共 collection 时，ConcurrentLinkedQueue 是一个恰当的选择。此队列不允许使用 null 元素。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-concurrentlinkeddeque">Queue: ConcurrentLinkedDeque&lt;/h2>
&lt;blockquote>
&lt;p>是双向链表实现的无界队列，该队列同时支持FIFO和FILO两种操作方式。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-delayqueue">Queue: DelayQueue&lt;/h2>
&lt;blockquote>
&lt;p>延时无界阻塞队列，使用Lock机制实现并发访问。队列里只允许放可以“延期”的元素，队列中的head是最先“到期”的元素。如果队里中没有元素到“到期”，那么就算队列中有元素也不能获取到。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-priorityblockingqueue">Queue: PriorityBlockingQueue&lt;/h2>
&lt;blockquote>
&lt;p>无界优先级阻塞队列，使用Lock机制实现并发访问。priorityQueue的线程安全版，不允许存放null值，依赖于comparable的排序，不允许存放不可比较的对象类型。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-synchronousqueue">Queue: SynchronousQueue&lt;/h2>
&lt;blockquote>
&lt;p>没有容量的同步队列，通过CAS实现并发访问，支持FIFO和FILO。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-linkedtransferqueue">Queue: LinkedTransferQueue&lt;/h2>
&lt;blockquote>
&lt;p>JDK 7新增，单向链表实现的无界阻塞队列，通过CAS实现并发访问，队列元素使用 FIFO(先进先出)方式。LinkedTransferQueue可以说是ConcurrentLinkedQueue、SynchronousQueue(公平模式)和LinkedBlockingQueue的超集, 它不仅仅综合了这几个类的功能，同时也提供了更高效的实现。&lt;/p>
&lt;/blockquote>
&lt;h2 id="list-copyonwritearraylist">List: CopyOnWriteArrayList&lt;/h2>
&lt;blockquote>
&lt;p>ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的复制来实现的。这一般需要很大的开销，但是当遍历操作的数量大大超过可变操作的数量时，这种方法可能比其他替代方法更 有效。在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时，它也很有用。&lt;/p>
&lt;/blockquote>
&lt;h2 id="set-copyonwritearrayset">Set: CopyOnWriteArraySet&lt;/h2>
&lt;blockquote>
&lt;p>对其所有操作使用内部CopyOnWriteArrayList的Set。即将所有操作转发至CopyOnWriteArayList来进行操作，能够保证线程安全。在add时，会调用addIfAbsent，由于每次add时都要进行数组遍历，因此性能会略低于CopyOnWriteArrayList。&lt;/p>
&lt;/blockquote>
&lt;h2 id="set-concurrentskiplistset">Set: ConcurrentSkipListSet&lt;/h2>
&lt;blockquote>
&lt;p>一个基于ConcurrentSkipListMap 的可缩放并发 NavigableSet 实现。set 的元素可以根据它们的自然顺序进行排序，也可以根据创建 set 时所提供的 Comparator 进行排序，具体取决于使用的构造方法。&lt;/p>
&lt;/blockquote>
&lt;h2 id="map-concurrenthashmap">Map: ConcurrentHashMap&lt;/h2>
&lt;blockquote>
&lt;p>是线程安全HashMap的。ConcurrentHashMap在JDK 7之前是通过Lock和segment(分段锁)实现，JDK 8 之后改为CAS+synchronized来保证并发安全。&lt;/p>
&lt;/blockquote>
&lt;h2 id="map-concurrentskiplistmap">Map: ConcurrentSkipListMap&lt;/h2>
&lt;blockquote>
&lt;p>线程安全的有序的哈希表(相当于线程安全的TreeMap);映射可以根据键的自然顺序进行排序，也可以根据创建映射时所提供的 Comparator 进行排序，具体取决于使用的构造方法。&lt;/p>
&lt;/blockquote>
&lt;h1 id="三atomic-原子类">三、Atomic: 原子类&lt;/h1>
&lt;p>其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成，才由JVM从等待队列中选择一个另一个线程进入，这只是一种逻辑上的理解。实际上是借助硬件的相关指令来实现的，不会阻塞线程(或者说只是在硬件级别上阻塞了)。&lt;/p>
&lt;h2 id="基础类型atomicbooleanatomicintegeratomiclong">基础类型：AtomicBoolean，AtomicInteger，AtomicLong&lt;/h2>
&lt;blockquote>
&lt;p>AtomicBoolean，AtomicInteger，AtomicLong是类似的，分别针对bool，interger，long的原子类。&lt;/p>
&lt;/blockquote>
&lt;h2 id="数组atomicintegerarrayatomiclongarraybooleanarray">数组：AtomicIntegerArray，AtomicLongArray，BooleanArray&lt;/h2>
&lt;blockquote>
&lt;p>AtomicIntegerArray，AtomicLongArray，AtomicBooleanArray是数组原子类。&lt;/p>
&lt;/blockquote>
&lt;h2 id="引用atomicreferenceatomicmarkedreferenceatomicstampedreference">引用：AtomicReference，AtomicMarkedReference，AtomicStampedReference&lt;/h2>
&lt;blockquote>
&lt;p>AtomicReference，AtomicMarkedReference，AtomicStampedReference是引用相关的原子类。&lt;/p>
&lt;/blockquote>
&lt;h2 id="fieldupdateratomiclongfieldupdateratomicintegerfieldupdateratomicreferencefieldupdater">FieldUpdater：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater&lt;/h2>
&lt;blockquote>
&lt;p>AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater是FieldUpdater原子类。&lt;/p>
&lt;/blockquote>
&lt;h1 id="四executors-线程池">四、Executors: 线程池&lt;/h1>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/Untitled.png" alt="类结构关系">&lt;/p>
&lt;p>类结构关系&lt;/p>
&lt;h2 id="接口-executor">接口: Executor&lt;/h2>
&lt;p>Executor接口提供一种将任务提交与每个任务将如何运行的机制(包括线程使用的细节、调度等)分离开来的方法。通常使用 Executor 而不是显式地创建线程。&lt;/p>
&lt;h2 id="executorservice">ExecutorService&lt;/h2>
&lt;blockquote>
&lt;p>ExecutorService继承自Executor接口，ExecutorService提供了管理终止的方法，以及可为跟踪一个或多个异步任务执行状况而生成 Future 的方法。 可以关闭 ExecutorService，这将导致其停止接受新任务。关闭后，执行程序将最后终止，这时没有任务在执行，也没有任务在等待执行，并且无法提交新任务。&lt;/p>
&lt;/blockquote>
&lt;h2 id="scheduledexecutorservice">ScheduledExecutorService&lt;/h2>
&lt;blockquote>
&lt;p>ScheduledExecutorService继承自ExecutorService接口，可安排在给定的延迟后运行或定期执行的命令。&lt;/p>
&lt;/blockquote>
&lt;h2 id="abstractexecutorservice">AbstractExecutorService&lt;/h2>
&lt;blockquote>
&lt;p>AbstractExecutorService继承自ExecutorService接口，其提供 ExecutorService 执行方法的默认实现。此类使用 newTaskFor 返回的 RunnableFuture 实现 submit、invokeAny 和 invokeAll 方法，默认情况下，RunnableFuture 是此包中提供的 FutureTask 类。&lt;/p>
&lt;/blockquote>
&lt;h2 id="futuretask">FutureTask&lt;/h2>
&lt;blockquote>
&lt;p>FutureTask 为 Future 提供了基础实现，如获取任务执行结果(get)和取消任务(cancel)等。如果任务尚未完成，获取任务执行结果时将会阻塞。一旦执行结束，任务就不能被重启或取消(除非使用runAndReset执行计算)。FutureTask 常用来封装 Callable 和 Runnable，也可以作为一个任务提交到线程池中执行。除了作为一个独立的类之外，此类也提供了一些功能性函数供我们创建自定义 task 类使用。FutureTask 的线程安全由CAS来保证。&lt;/p>
&lt;/blockquote>
&lt;h2 id="核心-threadpoolexecutor">核心: ThreadPoolExecutor&lt;/h2>
&lt;blockquote>
&lt;p>ThreadPoolExecutor实现了AbstractExecutorService接口，也是一个 ExecutorService，它使用可能的几个池线程之一执行每个提交的任务，通常使用 Executors 工厂方法配置。 线程池可以解决两个不同问题: 由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源(包括执行任务集时使用的线程)的方法。每个 ThreadPoolExecutor 还维护着一些基本的统计数据，如完成的任务数。&lt;/p>
&lt;/blockquote>
&lt;h2 id="核心-scheduledthreadexecutor">核心: ScheduledThreadExecutor&lt;/h2>
&lt;blockquote>
&lt;p>ScheduledThreadPoolExecutor实现ScheduledExecutorService接口，可安排在给定的延迟后运行命令，或者定期执行命令。需要多个辅助线程时，或者要求 ThreadPoolExecutor 具有额外的灵活性或功能时，此类要优于 Timer。&lt;/p>
&lt;/blockquote>
&lt;h2 id="核心-forkjoin框架">核心: Fork/Join框架&lt;/h2>
&lt;blockquote>
&lt;p>ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具类-executors">工具类: Executors&lt;/h2>
&lt;blockquote>
&lt;p>Executors是一个工具类，用其可以创建ExecutorService、ScheduledExecutorService、ThreadFactory、Callable等对象。它的使用融入到了ThreadPoolExecutor, ScheduledThreadExecutor和ForkJoinPool中。&lt;/p>
&lt;/blockquote></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/></entry><entry><title type="text">Java中的位运算</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/bit-operation/"/><id>https://kiwi4814.github.io/posts/2020/bit-operation/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2020-05-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">在阅读JDK源码的过程中，我们经常会看到类似&amp;gt;&amp;gt; &amp;lt;&amp;lt; &amp;gt;&amp;gt;&amp;gt; | 这样的运算符，这在……</summary><content type="html">&lt;p>在阅读JDK源码的过程中，我们经常会看到类似&lt;code>&amp;gt;&amp;gt;&lt;/code> &lt;code>&amp;lt;&amp;lt;&lt;/code> &lt;code>&amp;gt;&amp;gt;&amp;gt;&lt;/code> &lt;code>|&lt;/code> 这样的运算符，这在Java里面叫位运算符。&lt;/p>
&lt;p>我们知道计算机是以二进制来表示数据的，也就是0和1。我们先简单介绍一下二进制是如何表示数据的。&lt;/p>
&lt;h2 id="原码反码补码和移码">原码、反码、补码和移码&lt;/h2>
&lt;h3 id="1原码">（1）原码&lt;/h3>
&lt;p>在原码表示中，机器数的最高一位是符号位，0代表正号，1代表负号，余下各位是数的绝对值。&lt;/p>
&lt;p>数值0的原码表示方法有两种：
$[+0]_原$ = 0000 0000 ，
$[-0]_原$ = 1000 0000。&lt;/p>
&lt;p>&lt;strong>8位二进制数的取值范围是：[-127 , 127]&lt;/strong>&lt;/p>
&lt;h3 id="2反码">（2）反码&lt;/h3>
&lt;p>在反码表示中，机器数的最高一位是符号位，0代表正号，1代表负号。&lt;/p>
&lt;p>正数的反码与原码相同；&lt;/p>
&lt;p>负数的反码则是其绝对值按位求反。&lt;/p>
&lt;p>数值0的反码表示方法有两种：
$[-0]_反$ = 0000 0000 ，
$[-0]_反$ = 1111 1111。&lt;/p>
&lt;h3 id="3补码">（3）补码&lt;/h3>
&lt;p>在补码表示中，机器数的最高一位是符号位，0代表正号，1代表负号。&lt;/p>
&lt;p>正数的补码与原码相同；&lt;/p>
&lt;p>负数的补码则是其反码的末尾加1。&lt;/p>
&lt;p>数值0的补码有唯一的表现形式，即
$[-0]_补$ =
$[-0]_补$ = 0000 0000。&lt;/p>
&lt;h3 id="4移码">（4）移码&lt;/h3>
&lt;p>移码表示法是在数上增加一个偏移量来定义的，常用于表示浮点数中的阶码。对于定点整数，移。如果知道了一个数的补码，则将补码的最高位取反，即得到该数的移码。&lt;/p>
&lt;aside>
💡 ***小结***
正数：原码 = 反码 = 补码
负数：反码 = 原码绝对值按位求反
补码 = 反码末尾+1
移码 = 补码最高位（符号位）取反
&lt;/aside>
&lt;h1 id="位运算符">位运算符&lt;/h1>
&lt;p>Java提供的位运算符有：左移( &lt;code>&amp;lt;&amp;lt;&lt;/code> )、右移( &lt;code>&amp;gt;&amp;gt;&lt;/code> ) 、无符号右移( &lt;code>&amp;gt;&amp;gt;&amp;gt;&lt;/code> ) 、位与( &lt;code>&amp;amp;&lt;/code> ) 、位或( &lt;code>|&lt;/code> )、位非( &lt;code>~&lt;/code> )、位异或( &lt;code>^&lt;/code> )，除了位非( &lt;code>~&lt;/code> )是一元操作符外，其它的都是二元操作符。&lt;/p>
&lt;h2 id="1-左移--">1. 左移( &amp;lt;&amp;lt; )&lt;/h2>
&lt;p>a &amp;lt;&amp;lt; b 表示将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向左方向移动 b 位，符号位不变，低位空出来的位补数值 0。&lt;/p>
&lt;p>&lt;em>&lt;strong>&lt;code>a &amp;lt;&amp;lt; b = a * (2 ^ b)&lt;/code>&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="2-右移--">2. 右移( &amp;gt;&amp;gt; )&lt;/h2>
&lt;p>&lt;strong>a &amp;gt;&amp;gt; b&lt;/strong> 表示将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向右方向移动 b 位，符号位不变，高位空出来的位补数值 0。&lt;/p>
&lt;p>&lt;code>***a &amp;gt;&amp;gt; b = a / ( 2 ^ b )***&lt;/code>&lt;/p>
&lt;h2 id="3-无符号右移--">3. 无符号右移( &amp;gt;&amp;gt;&amp;gt; )&lt;/h2>
&lt;p>无符号右移运算符&amp;gt;&amp;gt;&amp;gt;和右移运算符&amp;gt;&amp;gt;是一样的，只不过右移时左边是补上符号位，而无符号右移运算符是补上0，也就是说，对于正数移位来说等同于：&amp;gt;&amp;gt;，负数通过此移位运算符能移位成正数。以-733183670&amp;gt;&amp;gt;&amp;gt;8为例来画一下图&lt;/p>
&lt;h2 id="4-位与--">4. 位与( &amp;amp; )&lt;/h2>
&lt;p>与运算时，进行运算的两个数，从最低位到最高位，一一对应。如果某 bit 的两个数值对应的值都是 1，则结果值相应的 bit 就是 1，否则为 0.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5-位或--">5. 位或( | )&lt;/h2>
&lt;p>与运算时，进行运算的两个数，从最低位到最高位，一一对应。如果某 bit 的两个数值对应的值只要 1 个为 1，则结果值相应的 bit 就是 1，否则为 0。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="6-位异或--">6. 位异或( ^ )&lt;/h2>
&lt;p>两个操作数进行异或时，对于同一位上，如果数值相同则为 0，数值不同则为 1。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="7-位非--">7. 位非( ~ )&lt;/h2>
&lt;p>对操作数的每一位进行操作，1 变成 0，0 变成 1。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/></entry><entry><title type="text">Java线程池ThreadPoolExecutor</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/threadpoolexecutor/"/><id>https://kiwi4814.github.io/posts/2020/threadpoolexecutor/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2020-04-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、相关概念 **核心线程（CorePool）：**线程池最终执行任务的角色肯定还是线……</summary><content type="html">&lt;h1 id="一相关概念">一、相关概念&lt;/h1>
&lt;p>**核心线程（CorePool）：**线程池最终执行任务的角色肯定还是线程，同时我们也会限制线程的数量，所以我们可以这样理解核心线程，有新任务提交时，首先检查核心线程数，如果核心线程都在工作，而且数量也已经达到最大核心线程数，则不会继续新建核心线程，而会将任务放入等待队列。&lt;/p>
&lt;p>**等待队列（WorkQueue）：**等待队列用于存储当核心线程都在忙时，继续新增的任务，核心线程在执行完当前任务后，也会去等待队列拉取任务继续执行，这个队列一般是一个线程安全的阻塞队列，它的容量也可以由开发者根据业务来定制。&lt;/p>
&lt;p>&lt;strong>非核心线程&lt;/strong>：当等待队列满了，如果当前线程数没有超过最大线程数，则会新建线程执行任务，那么核心线程和非核心线程到底有什么区别呢？本质上它们没什么区别。&lt;/p>
&lt;p>**线程活动保持时间（keepAliveTime）：**线程空闲下来之后，保持存活的持续时间，超过这个时间还没有任务执行，该工作线程结束。&lt;/p>
&lt;p>**饱和策略（RejectedExcutionHandler）：**当等待队列已满，线程数也达到最大线程数时，线程池会根据饱和策略来执行后续操作，默认的策略是抛弃要加入的任务。&lt;/p>
&lt;p>&lt;strong>线程池的状态：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>RUNNING：运行状态，值是最小的，刚创建的线程池就是此状态&lt;/li>
&lt;li>SHUTDOWN：停工状态，不再接受新任务，已经接收的会继续执行&lt;/li>
&lt;li>STOP：停止状态，不再接收新任务，已经接收正在执行的也会中断&lt;/li>
&lt;li>清空状态：所有任务都停止了，工作的线程也全部都结束了&lt;/li>
&lt;li>TERMINATED：终止状态，线程池已销毁&lt;/li>
&lt;/ul>
&lt;h1 id="二源码分析">二、源码分析&lt;/h1>
&lt;ol>
&lt;li>&lt;strong>线程池的线程是如何做到复用的。&lt;/strong> 线程池中的线程在循环中尝试取任务执行，这一步会被阻塞，如果设置了allowCoreThreadTimeOut为true，则线程池中的所有线程都会在keepAliveTime时间超时后还未取到任务而退出。或者线程池已经STOP，那么所有线程都会被中断，然后退出。&lt;/li>
&lt;li>&lt;strong>线程池是如何做到高效并发的。&lt;/strong> 看整个线程池的工作流程，有以下几个需要特别关注的并发点. ①: 线程池状态和工作线程数量的变更。这个由一个AtomicInteger变量 ctl来解决原子性问题。 ②: 向工作Worker容器workers中添加新的Worker的时候。这个线程池本身已经加锁了。 ③: 工作线程Worker从等待队列中取任务的时候。这个由工作队列本身来保证线程安全，比如LinkedBlockingQueue等。&lt;/li>
&lt;/ol>
&lt;h1 id="三executors的使用">三、Executors的使用&lt;/h1>
&lt;p>JDK已经给我们提供了很方便的线程池工厂类Executors, 方便我们快速创建线程池，可能在阅读源码之前，我们在面对具体的业务场景时，到底该选择哪种线程池配置是有疑问的，我们来看一下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ExecutorService&lt;/span> &lt;span class="nf">newFixedThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">nThreads&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">nThreads&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nThreads&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedBlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>newFixedThreadPool, 可以看到我们需要传入一个线程数量的参数nThreads，这样线程池的核心线程数和最大线程数都会设成nThreads, 而它的等待队列是一个LinkedBlockingQueue，它的容量限制是Integer.MAX_VALUE, 可以认为是没有边界的。核心线程keepAlive时间0，allowCoreThreadTimeOut默认false。所以这个方法创建的线程池适合能估算出需要多少核心线程数量的场景。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ExecutorService&lt;/span> &lt;span class="nf">newSingleThreadExecutor&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FinalizableDelegatedExecutorService&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedBlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>newSingleThreadExecutor, 有且只有一个线程在工作，适合任务顺序执行，缺点但是不能充分利用CPU多核性能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ExecutorService&lt;/span> &lt;span class="nf">newCachedThreadPool&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">60L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">SynchronousQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>newCachedThreadPool, 核心线程数0，最大线程数Integer.MAX_VALUE, 线程keepAlive时间60s，用的队列是SynchronousQueue，这种队列本身不会存任务，只做转发，所以newCachedThreadPool适合执行大量的，轻量级任务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ScheduledExecutorService&lt;/span> &lt;span class="nf">newScheduledThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">corePoolSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">corePoolSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">NANOSECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">DelayedWorkQueue&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>newScheduledThreadPool, 执行周期性任务，类似定时器。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/></entry><entry><title type="text">神奇的i=i++</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/i-plus-plus/"/><id>https://kiwi4814.github.io/posts/2020/i-plus-plus/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2020-03-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">先来看一段代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void main(String[] args) { int i = 5; int a = i++; System.out.println(&amp;#34;a=&amp;#34; + a); System.out.println(i); int……</summary><content type="html">&lt;p>先来看一段代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;b=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;c=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="err">】&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;d=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码的输出结果可能很多人都能看出来，如下所示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">d&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">k&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中的计算逻辑也很清晰，&lt;code>i++&lt;/code>是先赋值后计算，而&lt;code>++i&lt;/code>是先计算后赋值。&lt;/p>
&lt;p>那么换一种写法呢，可能很多小伙伴都会猜错。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码按照之前的逻辑来看，输出结果应该为6，5，4，5。但是执行程序后的输出结果为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了搞清楚这中间的逻辑，我们不妨使用&lt;code>javap -c&lt;/code>编译一下源代码看看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译后的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span>&lt;span class="o">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Code&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iconst_5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">istore_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iload_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iinc&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">istore_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">getstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iload_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">11&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokevirtual&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="c1">// Method java/io/PrintStream.println:(I)V
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这其中用到的指令集的含义如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>*iconst*&lt;/code>&lt;/strong> ：将单字节的int常量值(-128~127)推送至栈顶&lt;/li>
&lt;li>&lt;em>&lt;strong>&lt;code>istore&lt;/code>&lt;/strong>&lt;/em> ：将栈顶int型数值存入指定本地变量&lt;/li>
&lt;li>&lt;em>&lt;strong>&lt;code>iload&lt;/code>&lt;/strong>&lt;/em> ：将指定的int型本地变量推送至栈顶&lt;/li>
&lt;li>&lt;code>***iinc***&lt;/code>：该指令用于对本地(局部)变量进行自增减操作。该指令第一参数为本地变量的编号，第二个参数为自增减的数量&lt;/li>
&lt;li>&lt;em>&lt;strong>&lt;code>getstatic&lt;/code>&lt;/strong>&lt;/em> ：获取指定类的静态域，并将其值压入栈顶&lt;/li>
&lt;/ul>
&lt;p>所以这段代码的指令集的含义为：&lt;/p>
&lt;ol>
&lt;li>&lt;code>iconst_5&lt;/code> 表示将一个值为5的int值推送到栈顶&lt;/li>
&lt;li>&lt;code>istore_1&lt;/code> 把栈顶的int值5赋给第二个本地变量&lt;code>i&lt;/code>（第1个本地变量应该是this）&lt;/li>
&lt;li>&lt;code>iload_1&lt;/code> 表示把第二个本地变量&lt;code>i&lt;/code>的值推入栈顶，此时栈顶仍然为5&lt;/li>
&lt;li>&lt;code>iinc 1, 1&lt;/code> 表示将第二个本地变量的值加1，也就是执行了&lt;code>i++&lt;/code>，此时的&lt;code>i&lt;/code>值为6了已经&lt;/li>
&lt;li>&lt;code>istore_1&lt;/code> 再次将栈顶int值（仍然为5）赋给第二个本地变量&lt;code>i&lt;/code>&lt;/li>
&lt;li>&lt;code>getstatic&lt;/code> 后面为输出的代码&lt;/li>
&lt;/ol>
&lt;p>因此最终打印出来的结果是5。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/></entry><entry><title type="text">控制反转、依赖反转和依赖注入</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/ioc-di/"/><id>https://kiwi4814.github.io/posts/2020/ioc-di/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2020-02-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">开始之前，我们先思考一下以下这几个问题： ⭐ 1 . “依赖反转”这个概念指的是“谁跟谁”的……</summary><content type="html">&lt;p>开始之前，我们先思考一下以下这几个问题：&lt;/p>
&lt;aside>
⭐ 1 . “依赖反转”这个概念指的是“谁跟谁”的“什么依赖”被反转了？“反转”两个字该如何理解？
&lt;/aside>
&lt;aside>
⭐ 2 . 我们还经常听到另外两个概念：“控制反转”和“依赖注入”。这两个概念跟“依赖反转”有什么区别和联系呢？它们说的是同一个事情吗？
&lt;/aside>
&lt;aside>
⭐ 3 . 如果你熟悉 Java 语言，那 Spring 框架中的 IOC 跟这些概念又有什么关系呢？
&lt;/aside>
&lt;p>带着以上这几个问题，我们来逐一学习一下其中的区别：&lt;/p>
&lt;h1 id="控制反转ioc">控制反转（IOC）&lt;/h1>
&lt;p>IOC的英文翻译是“Inversion Of Controller”，此处需要注意的是这里的IOC和Spring框架的IOC还是有一定的区别的。&lt;/p>
&lt;p>我们先通过一个例子看一下，什么是控制反转。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">doTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//这部分逻辑可以放到框架中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">doTest&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test succeed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test failed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面的代码中，所有的流程都由程序员来控制。如果我们抽象出一个下面这样的框架，我们再来看，如何利用框架来实现同样的功能，具体的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestCase&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">doTest&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test succeed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test failed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">doTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">JunitApplication&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TestCase&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">testCases&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TestCase&lt;/span> &lt;span class="n">testCase&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">testCases&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">testCase&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">TestCase&lt;/span> &lt;span class="n">testCase&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">testCases&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">testCase&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>把这个简化版本的测试框架引入到工程中之后，我们只需要在框架预留的扩展点，也就是 TestCase 类中的 doTest() 抽象函数中，填充具体的测试代码就可以实现之前的功能了，完全不需要写负责执行流程的 main() 函数了。 具体的代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserServiceTest&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">TestCase&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">doTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 注册操作还可以通过配置的方式来实现，不需要程序员显示调用register()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">JunitApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">UserServiceTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>刚刚举的这个例子，就是典型的通过框架来实现“控制反转”的例子。框架提供了一个可扩展的代码骨架，用来组装对象、管理整个执行流程。程序员利用框架进行开发的时候，只需要往预留的扩展点上，添加跟自己业务相关的代码，就可以利用框架来驱动整个程序流程的执行。&lt;/p>
&lt;p>这里的“控制”指的是对程序执行流程的控制，而“反转”指的是在没有使用框架之前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的执行流程可以通过框架来控制。流程的控制权从程序员“反转”到了框架。&lt;/p>
&lt;p>实际上，实现控制反转的方法有很多，除了刚才例子中所示的类似于模板设计模式的方法之外，还有马上要讲到的依赖注入等方法，所以，控制反转并不是一种具体的实现技巧，而是一个比较笼统的设计思想，一般用来指导框架层面的设计。&lt;/p>
&lt;h1 id="依赖注入di">依赖注入(DI)&lt;/h1>
&lt;p>依赖注入跟控制反转恰恰相反，它是一种具体的编码技巧。依赖注入的英文翻译是“&lt;code>Dependency Injection&lt;/code>”，缩写为DI。&lt;/p>
&lt;p>那到底什么是依赖注入呢？我们用一句话来概括就是：不通过 new() 的方式在类内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或注入）给类使用。&lt;/p>
&lt;p>我们还是通过一个例子来解释一下。在这个例子中，Notification 类负责消息推送，依赖 MessageSender 类实现推送商品促销、验证码等消息给用户。我们分别用依赖注入和非依赖注入两种方式来实现一下。具体的实现代码如下所示：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>非依赖注入的方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 非依赖注入实现方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Notification&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Notification&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//此处有点像hardcode
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MessageSender&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略校验逻辑等...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 程序员使用时需要new对象，来发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">TestCode&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">notification&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cellphone&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>依赖注入的实现方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 依赖注入的实现方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NotificationDI&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 通过构造函数将messageSender传递进来
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">NotificationDI&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略校验逻辑等...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 使用NotificationDI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">TestCodeDI&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MessageSender&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NotificationDI&lt;/span> &lt;span class="n">NotificationDI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NotificationDI&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">messageSender&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NotificationDI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cellphone&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>通过依赖注入的方式来将依赖的类对象传递进来，这样就提高了代码的扩展性，我们可以灵活地替换依赖的类。这一点在我们之前讲“开闭原则”的时候也提到过。当然，上面代码还有继续优化的空间，我们还可以把 MessageSender 定义成接口，基于接口而非实现编程。改造后的代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Notification&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">interface&lt;/span> &lt;span class="nc">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 短信发送类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">SmsSender&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 站内信发送类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">InboxSender&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">TestCode&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//使用Notification
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SmsSender&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">messageSender&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际上，你只需要掌握刚刚举的这个例子，就等于完全掌握了依赖注入。尽管依赖注入非常简单，但却非常有用，在后面的章节中，我们会讲到，它是编写可测试性代码最有效的手段。&lt;/p>
&lt;h1 id="依赖注入框架di-framework">依赖注入框架（DI Framework）&lt;/h1>
&lt;p>弄懂了什么是“依赖注入”，我们再来看一下，什么是“依赖注入框架”。我们还是借用刚刚的例子来解释。&lt;/p>
&lt;p>在采用依赖注入实现的 Notification 类中，虽然我们不需要用类似 hard code 的方式，在类内部通过 new 来创建 MessageSender 对象，但是，这个创建对象、组装（或注入）对象的工作仅仅是被移动到了更上层代码而已，还是需要我们程序员自己来实现。具体代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Demo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">sender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SmsSender&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//创建对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sender&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//依赖注入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;13918942177&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;短信验证码：2346&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在实际的软件开发中，一些项目可能会涉及几十、上百、甚至几百个类，类对象的创建和依赖注入会变得非常复杂。如果这部分工作都是靠程序员自己写代码来完成，容易出错且开发成本也比较高。而对象创建和依赖注入的工作，本身跟具体的业务无关，我们完全可以抽象成框架来自动完成。&lt;/p>
&lt;p>你可能已经猜到，这个框架就是“依赖注入框架”。我们只需要通过依赖注入框架提供的扩展点，简单配置一下所有需要创建的类对象、类与类之间的依赖关系，就可以实现由框架来自动创建对象、管理对象的生命周期、依赖注入等原本需要程序员来做的事情。&lt;/p>
&lt;p>实际上，现成的依赖注入框架有很多，比如 Google Guice、Java Spring、Pico Container、Butterfly Container 等。不过，如果你熟悉 Java Spring 框架，你可能会说，Spring 框架自己声称是&lt;strong>控制反转容器（Inversion Of Control Container）&lt;/strong>。&lt;/p>
&lt;p>实际上，这两种说法都没错。只是控制反转容器这种表述是一种非常宽泛的描述，DI 依赖注入框架的表述更具体、更有针对性。因为我们前面讲到实现控制反转的方式有很多，除了依赖注入，还有模板模式等，而 Spring 框架的控制反转主要是通过依赖注入来实现的。不过这点区分并不是很明显，也不是很重要，你稍微了解一下就可以了。&lt;/p>
&lt;h1 id="依赖反转原则">依赖反转原则&lt;/h1>
&lt;p>前面讲了控制反转、依赖注入、依赖注入框架，现在，我们来讲一讲今天的主角：依赖反转原则。依赖反转原则的英文翻译是 &lt;code>Dependency Inversion Principle&lt;/code>，缩写为 DIP。中文翻译有时候也叫依赖倒置原则。&lt;/p>
&lt;p>为了追本溯源，我先给出这条原则最原汁原味的英文描述：&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>High-level modules shouldn’t depend on low-level modules. Both modules should depend on abstractions. In addition, abstractions shouldn’t depend on details. Details depend on abstractions.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>我们将它翻译成中文，大概意思就是：高层模块（high-level modules）不要依赖低层模块（low-level）。高层模块和低层模块应该通过抽象（abstractions）来互相依赖。除此之外，抽象（abstractions）不要依赖具体实现细节（details），具体实现细节（details）依赖抽象（abstractions）。&lt;/p>
&lt;p>所谓高层模块和低层模块的划分，简单来说就是，在调用链上，调用者属于高层，被调用者属于低层。在平时的业务代码开发中，高层模块依赖底层模块是没有任何问题的。实际上，这条原则主要还是用来指导框架层面的设计，跟前面讲到的控制反转类似。我们拿 Tomcat 这个 Servlet 容器作为例子来解释一下。&lt;/p>
&lt;p>Tomcat 是运行 Java Web 应用程序的容器。我们编写的 Web 应用程序代码只需要部署在 Tomcat 容器下，便可以被 Tomcat 容器调用执行。按照之前的划分原则，Tomcat 就是高层模块，我们编写的 Web 应用程序代码就是低层模块。Tomcat 和应用程序代码之间并没有直接的依赖关系，两者都依赖同一个“抽象”，也就是 Servlet 规范。Servlet 规范不依赖具体的 Tomcat 容器和应用程序的实现细节，而 Tomcat 容器和应用程序依赖 Servlet 规范。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/><category scheme="https://kiwi4814.github.io/tags/2020/02/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/" term="软件设计" label="软件设计"/></entry><entry><title type="text">Java数组All elements are null异常</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/all-elements-are-null/"/><id>https://kiwi4814.github.io/posts/2020/all-elements-are-null/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2020-01-03T22:10:15+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">使用Mybatis查询数据库时，如果返回值是null并且以List接收时，会出现一条……</summary><content type="html">&lt;p>使用Mybatis查询数据库时，如果返回值是null并且以List&lt;String>接收时，会出现一条空的记录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">shldllArrays&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ersJqxxExtMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">selectShldllByJqbh&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jqbhs&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时候如果使用&lt;code>CollectionUtils.isNotEmpty(shldllArrays)&lt;/code>去判断是无法判断这种情况的，从而导致后面可能会报错。在断点中可以发现，这个数组虽然size为1，但是提示：All elements are null。&lt;/p>
&lt;p>解决办法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 移除所有的null元素，为了防止出现空指针异常【查询返回String会返回一个空null】
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">shldllArrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">removeAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singleton&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/><category scheme="https://kiwi4814.github.io/tags/2020/01/%E9%94%99%E9%A2%98%E9%9B%86/" term="错题集" label="错题集"/></entry><entry><title type="text">获取YYYY-MM-dd所在月份的最后一天</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/js-lastday/"/><id>https://kiwi4814.github.io/posts/2019/js-lastday/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2019-12-31T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">获取日期格式为&amp;quot;YYYY-MM-dd&amp;quot;所在月份的最后一天 1 2 3 4……</summary><content type="html">&lt;h2 id="获取日期格式为yyyy-mm-dd所在月份的最后一天">获取日期格式为&lt;code>&amp;quot;YYYY-MM-dd&amp;quot;&lt;/code>所在月份的最后一天&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getLastDay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">year&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">month&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 取下一个月的第一天
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">new_year&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">year&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">new_month&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">month&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">month&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">new_month&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">new_year&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">new_date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">new_year&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">new_month&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取当前月的最后一天
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">new_date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;yyyy-MM-dd&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//获取当月最后一天日期
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;M+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMonth&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//月份
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;d+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDate&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="c1">//日
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;h+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getHours&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="c1">//小时
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;m+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMinutes&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="c1">//分
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;s+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getSeconds&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="c1">//秒
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;q+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMonth&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">//季度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;S&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMilliseconds&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//毫秒
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/(y+)/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">RegExp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFullYear&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">k&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;(&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">k&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">RegExp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">RegExp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="s2">&amp;#34;00&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">]).&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">]).&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2019/12/javascript/" term="JavaScript" label="JavaScript"/></entry><entry><title type="text">介绍几种分号的不同写法</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/semicolon/"/><id>https://kiwi4814.github.io/posts/2019/semicolon/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2019-12-31T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">起因是因为代码的bug发现在SQL语句中夹杂了一个希腊文的问号（在IDEA编译器中跟……</summary><content type="html">&lt;p>起因是因为代码的bug发现在SQL语句中夹杂了一个希腊文的问号（在IDEA编译器中跟分号长的一模一样，无从分辨），遂整理了一下分号的几种编码格式。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">符号&lt;/th>
&lt;th style="text-align:center">Unicode编码&lt;/th>
&lt;th style="text-align:center">十进制编码&lt;/th>
&lt;th style="text-align:left">说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">;&lt;/td>
&lt;td style="text-align:center">&lt;code>\u003b&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>59&lt;/code>&lt;/td>
&lt;td style="text-align:left">普通分号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">;&lt;/td>
&lt;td style="text-align:center">&lt;code>\u37e&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>894&lt;/code>&lt;/td>
&lt;td style="text-align:left">希腊文的问号！！！，很容易和普通的分号混淆&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">；&lt;/td>
&lt;td style="text-align:center">&lt;code>\uff1b&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>65307&lt;/code>&lt;/td>
&lt;td style="text-align:left">全角分号，中文分号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">︔&lt;/td>
&lt;td style="text-align:center">&lt;code>\ufe14&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>65044&lt;/code>&lt;/td>
&lt;td style="text-align:left">垂直分号（&lt;code>PRESENTATION FORM FOR VERTICAL SEMICOLON&lt;/code>），以兼容 &lt;a href="https://zh.wikipedia.org/wiki/GB_18030">GB 18030&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">﹔&lt;/td>
&lt;td style="text-align:center">&lt;code>\ufe54&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>65108&lt;/code>&lt;/td>
&lt;td style="text-align:left">小分号（&lt;code>SMALL SEMICOLON&lt;/code>），源自 &lt;a href="https://zh.wikipedia.org/wiki/CNS11643">CNS11643&lt;/a> / &lt;a href="https://zh.wikipedia.org/wiki/Big5">Big5&lt;/a>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/></entry><entry><title type="text">Homebrew卡在 Updating Homebrew 的解决方法</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/brew-update/"/><id>https://kiwi4814.github.io/posts/2019/brew-update/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2019-12-19T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">在使用 Homebrew install的过程中，经常会卡在Updating Homebrew...这个……</summary><content type="html">&lt;p>在使用 Homebrew install的过程中，经常会卡在&lt;code>Updating Homebrew...&lt;/code>这个过程中。&lt;/p>
&lt;h2 id="解决办法一修改配置文件取消检查更新的操作">解决办法一：修改配置文件，取消检查更新的操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 新增一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">HOMEBREW_NO_AUTO_UPDATE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="解决办法二按住-control--c-取消本次更新操作">解决办法二：按住 &lt;code>control （⌃）+ c&lt;/code> 取消本次更新操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">brew install composer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Updating Homebrew...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^C
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>按住 control + c 之后命令行会显示 &lt;strong>^C&lt;/strong>，就代表已经取消了 Updating Homebrew 操作&lt;/p>
&lt;p>大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">~ brew install nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Updating Homebrew...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^C&lt;span class="o">==&lt;/span>&amp;gt; Installing dependencies &lt;span class="k">for&lt;/span> nginx: &lt;span class="nv">pcre&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Installing nginx dependency: &lt;span class="nv">pcre&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/bottles/pcre-8.43.catalina.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">######################################################################## 100.0%&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Pouring pcre-8.43.catalina.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">🍺 /usr/local/Cellar/pcre/8.43: &lt;span class="m">204&lt;/span> files, 5.5MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Installing &lt;span class="nv">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/bottles/nginx-1.17.6.catalina.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">######################################################################## 100.0%&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Pouring nginx-1.17.6.catalina.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Caveats
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Docroot is: /usr/local/var/www
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The default port has been &lt;span class="nb">set&lt;/span> in /usr/local/etc/nginx/nginx.conf to &lt;span class="m">8080&lt;/span> so that
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx can run without sudo.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx will load all files in /usr/local/etc/nginx/servers/.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To have launchd start nginx now and restart at login:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> brew services start nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Or, &lt;span class="k">if&lt;/span> you don&lt;span class="s1">&amp;#39;t want/need a background service you can just run:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> nginx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">==&amp;gt; Summary
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">🍺 /usr/local/Cellar/nginx/1.17.6: 25 files, 2MB
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">==&amp;gt; Caveats
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">==&amp;gt; nginx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">Docroot is: /usr/local/var/www
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">nginx can run without sudo.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">nginx will load all files in /usr/local/etc/nginx/servers/.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">To have launchd start nginx now and restart at login:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> brew services start nginx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">Or, if you don&amp;#39;&lt;/span>t want/need a background service you can just run:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方法是临时的、一次性的&lt;/p>
&lt;h2 id="解决办法三替换镜像源推荐">解决办法三：替换镜像源（推荐）&lt;/h2>
&lt;p>平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：&lt;/p>
&lt;p>&lt;code>brew.git&lt;/code>&lt;/p>
&lt;p>&lt;code>homebrew-core.git&lt;/code>&lt;/p>
&lt;p>&lt;code>homebrew-bottles&lt;/code>&lt;/p>
&lt;p>通过以下代码依次将这三个仓库的镜像源更换为不同的国内镜像源（&lt;code>zsh&lt;/code>下）&lt;/p>
&lt;h3 id="1-官方镜像源">1. 官方镜像源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://github.com/Homebrew/brew.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/core&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://github.com/Homebrew/homebrew-core.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-cask.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/cask&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://github.com/Homebrew/homebrew-cask.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 应用生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除homebrew-bottles&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vi ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#### 按i进入输入模式，输入模式下删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置，然后按:wq保存并退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-阿里镜像源">2. 阿里镜像源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">/Library/Taps/homebrew/homebrew-core&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 应用生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-bottles:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-清华镜像源">3. 清华镜像源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/core&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-cask.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/cask&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 应用生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-bottles（根据镜像地址猜测）:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-中科大镜像源">4. 中科大镜像源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/core&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-cask.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/cask&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 应用生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-bottles:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关于&lt;code>homebrew-bottles&lt;/code>，分为以下两种情况：&lt;/p>
&lt;p>【1】&lt;code>bash&lt;/code>用户和&lt;code>zsh&lt;/code>用户的命令不同，以上示例中关于&lt;code>homebrew-bottles&lt;/code>的替换仅适用于&lt;code>zsh&lt;/code>用户。&lt;/p>
&lt;p>【2】&lt;code>bash&lt;/code>用户请将配置文件&lt;code>zshrc&lt;/code>换为&lt;code>bash_profile&lt;/code>&lt;/p>
&lt;p>下面给出清华大学镜像源给出的替换&lt;code>homebrew-bottles&lt;/code>在&lt;code>bash&lt;/code>下的代码，其他以此类推。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">### 临时替换&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">HOMEBREW_BOTTLE_DOMAIN&lt;/span>&lt;span class="o">=&lt;/span>https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">### 长期替换&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bash_profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.bash_profile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2019/12/homebrew/" term="Homebrew" label="Homebrew"/><category scheme="https://kiwi4814.github.io/tags/2019/12/macos/" term="MacOS" label="MacOS"/></entry><entry><title type="text">Camunda流程引擎简介及功能拓展</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/camunda/"/><id>https://kiwi4814.github.io/posts/2019/camunda/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2019-08-25T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、流程引擎以及BPMN2.0规范 Camunda和BPMN Camunda BPM （BPM，Busine……</summary><content type="html">&lt;h2 id="一流程引擎以及bpmn20规范">一、流程引擎以及BPMN2.0规范&lt;/h2>
&lt;hr>
&lt;h3 id="camunda和bpmn">Camunda和BPMN&lt;/h3>
&lt;p>Camunda BPM （BPM，Business Process Manager，业务流程管理）是一个灵活的工作流和过程自动化框架，它的核心是一个在Java虚拟机内部运行的原生BPMN 2.0流程引擎，因此它可以嵌入到任何Java应用程序或运行时容器中。Camunda BPM与Java EE 6集成，并可以与Spring Framework完美匹配。 Camunda BPM附带了用于创建工作流和决策模型，在生产中操作已部署模型以及允许用户执行分配给他们的工作流任务的工具。&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/architecture-overview.png" alt="流程引擎架构图（来源：官方文档）">&lt;/p>
&lt;p>流程引擎架构图（来源：官方文档）&lt;/p>
&lt;p>&lt;strong>下面我们来看下维基百科对于BPMN的定义：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>业务流程模型和标记法（BPMN，Business Process Model and Notation）是对象管理组织（OMG，Object Management Group）维护的关于业务流程建模的行业性标准。它创建在与UML的活动图非常相似的流程图法（flowcharting）基础上，为“业务流程图”（BPD, Business Process Diagram）中的特定业务流程提供一套图形化标记法。BPMN的目标是，通过提供一套既匹配业务人员直观又能表现复杂流程语义的标记法，同时为技术人员和业务人员从事业务流程管理提供支持。BPMN规范还提供从标记法的图到执行语言基础构造的映射，尤其是业务流程执行语言（BPEL）。&lt;/p>
&lt;/blockquote>
&lt;p>BPMN文件的底层数据格式是xml，定义了一些标签的标准含义和图形表示。一方面通过图形方便所有人理解流程，另一方面限制实现方必须按着流程的要求来实现。&lt;/p>
&lt;p>Camunda BPM官方提供了用于建模BPMN工作流和DMN决策的桌面应用程序Camunda Modeler。&lt;/p>
&lt;hr>
&lt;h3 id="camunda-modelerhttpscamundacomproductsmodeler">&lt;a href="https://camunda.com/products/modeler/">Camunda Modeler&lt;/a>&lt;/h3>
&lt;p>下面为使用Camunda Moleler设计的一张只含有基本元素的流程定义：&lt;/p>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/1559570847866.png" alt="一个普通的流程图示例">&lt;/p>
&lt;p>一个普通的流程图示例&lt;/p>
&lt;p>对应的BPMN源码为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:process&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;Process_1em8emw&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;项目材料审核&amp;#34;&lt;/span> &lt;span class="na">isExecutable=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:startEvent&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;StartEvent_1&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;开始节点&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:outgoing&amp;gt;&lt;/span>SequenceFlow_1pagkpa&lt;span class="nt">&amp;lt;/bpmn:outgoing&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:startEvent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:sequenceFlow&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;SequenceFlow_1pagkpa&amp;#34;&lt;/span> &lt;span class="na">sourceRef=&lt;/span>&lt;span class="s">&amp;#34;StartEvent_1&amp;#34;&lt;/span> &lt;span class="na">targetRef=&lt;/span>&lt;span class="s">&amp;#34;Task_0hn604q&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:userTask&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;Task_0hn604q&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;填写材料&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_1pagkpa&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_058xsmq&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:outgoing&amp;gt;&lt;/span>SequenceFlow_0rs76c2&lt;span class="nt">&amp;lt;/bpmn:outgoing&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:multiInstanceLoopCharacteristics&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:userTask&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:exclusiveGateway&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;ExclusiveGateway_0ol3vgn&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;是否需要合伙人批阅&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_0icnkq2&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:outgoing&amp;gt;&lt;/span>SequenceFlow_1hoelow&lt;span class="nt">&amp;lt;/bpmn:outgoing&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:outgoing&amp;gt;&lt;/span>SequenceFlow_160qlaz&lt;span class="nt">&amp;lt;/bpmn:outgoing&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:exclusiveGateway&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:endEvent&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;EndEvent_1qn3z3o&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;结束&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_0ymsxgc&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_160qlaz&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:endEvent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:process&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>开始事件 &lt;strong>StartEvent&lt;/strong>&lt;/p>
&lt;p>原型细线标记，标明一个流程的开始事件，分为空启动、异常启动、定时启动等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结束事件 &lt;strong>EndEvent&lt;/strong>&lt;/p>
&lt;p>原型粗线标记，标明一个流程的结束事件，分为空结束、异常结束、取消结束等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>顺序流 &lt;strong>SequenceFlow&lt;/strong>&lt;/p>
&lt;p>顺序流表明两个模型之间的连接线，分为标准顺序流和条件顺序流。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务 &lt;strong>Task&lt;/strong>&lt;/p>
&lt;p>最重要的业务模型，一般用一个矩形表示，根据矩形左上角小图标的不同可以分为用户任务、Service任务、脚本任务、邮件任务等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>网关 &lt;strong>Gateway&lt;/strong>&lt;/p>
&lt;p>网关是用于控制流程走向的执行令牌，根据功能的不同主要分为排他网关、并行网关、包容网关、事件网关。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>子流程 &lt;strong>Subprocess&lt;/strong>&lt;/p>
&lt;p>把一切需要处理的任务归结到一起作为作为一个大流程的一部分，因为子流程嵌入在主流程中，所有也叫“嵌入式子流程”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>边界事件 &lt;strong>Boundary Event&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>中间事件 &lt;strong>Intermediate Event&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>监听器 &lt;strong>Listener&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="uel表达式">UEL表达式&lt;/h3>
&lt;p>Camunda BPM支持统一表达式语言（EL），它是JSP 2.1标准（JSR-245）的一部分，使用开源JUEL（Java Unified Expression Language，EL的Java实现）实现。在Camunda BPM的绝大多数地方都可以使用UEL表达式，主要支持两个UEL表达式：UEL-value 和 UEL-method。&lt;/p>
&lt;hr>
&lt;h3 id="流程引擎的生命周期">流程引擎的生命周期&lt;/h3>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/Camunda%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E7%AE%80%E4%BB%8B%20a4fe0f2279754a49b750f583f42fa27b.png" alt="流程引擎的生命周期">&lt;/p>
&lt;p>流程引擎的生命周期&lt;/p>
&lt;p>生命周期&lt;/p>
&lt;ul>
&lt;li>&lt;strong>定义&lt;/strong>：工作流的生命周期从定义开始，此阶段的主要任务是收集业务需求并且转化为流程定义。&lt;/li>
&lt;li>&lt;strong>发布&lt;/strong>：由开发人员打包各种资源，在流程引擎平台发布流程定义。在具体的流程引擎中包括流程定义文件（.bpmn结尾）、自定义表单、任务监听类等等。&lt;/li>
&lt;li>&lt;strong>执行&lt;/strong>：具体的流程引擎按照事先定义好的流程处理路线以任务驱动的方式执行业务流程。&lt;/li>
&lt;li>&lt;strong>监控&lt;/strong>：根据任务（Task）的结果做出相应的处理。&lt;/li>
&lt;li>&lt;strong>优化&lt;/strong>：不满足业务需求的流程或者需求变更的流程进行重新设计和发布。&lt;/li>
&lt;/ul>
&lt;h2 id="二流程引擎基础概念介绍">二、流程引擎基础概念介绍&lt;/h2>
&lt;hr>
&lt;h3 id="多租户-multitenancy">多租户 Multitenancy&lt;/h3>
&lt;p>总的来说，多租户是一个软件为多个不同组织提供服务的概念。其核心是数据是隔离的，一个组织不能看到其他组织的数据。在这个语境中，一个这样的组织（或部门、团队……）被称为一个&lt;em>租户（tenant）&lt;/em>。&lt;/p>
&lt;p>在Camunda流程引擎中部署流程定义时，可以传递一个&lt;em>租户标识符（tenant identifier）&lt;/em>，当然为了实际使用流程数据上的租户标识符，所有查询API都可以通过租户过滤。&lt;/p>
&lt;hr>
&lt;h3 id="流程定义-process-definitions">流程定义 Process Definitions&lt;/h3>
&lt;p>一个流程定义规定了整个流程的结构，Camunda BPM使用BPMN 2.0规范作为它的主要设计语言，并在此基础上扩展了新的元素和属性。&lt;/p>
&lt;p>主要属性：tenant，processDefinitionKey，version，processDefinitionId&lt;/p>
&lt;hr>
&lt;h3 id="流程实例-process-instances">流程实例 Process Instances&lt;/h3>
&lt;p>流程实例是一个流程定义（Process Definitions）与业务对象联系的入口，也就是说是流程定义的实际应用。&lt;/p>
&lt;p>流程实例与流程定义的关系与面向对象编程中的对象和类之间的关系相同。&lt;/p>
&lt;p>关键属性：processInstanceId、instanceRemark&lt;/p>
&lt;hr>
&lt;h3 id="流程执行对象-execution">流程执行对象 Execution&lt;/h3>
&lt;p>Execution的含义就是一个流程实例（Process Instances）具体要执行的过程对象。一个流程实例中，流程实例本身也是一条Execution，作为所有Execution的根节点一起形成一个树状结构。&lt;/p>
&lt;hr>
&lt;h3 id="活动实例-activity-instances">活动实例 Activity Instances&lt;/h3>
&lt;p>Activity Instances的概念与Execution比较像，不同的是Exectuion是把Activity Instances串起来的线的唯一标识。Activity Instances也是树状结构的，可能是Task、Subprocess、MuiltiInstance等等。&lt;/p>
&lt;hr>
&lt;h3 id="用户任务-usertask">用户任务 UserTask&lt;/h3>
&lt;p>顾名思义，表示需要人员去审批的任务。&lt;/p>
&lt;p>根据任务的处理方式的不同，可以分为单人审批，多人审批（并行），多人审批（串行）等。&lt;/p>
&lt;p>任务可以设置的主要属性有审批人，任务到期日，任务优先级等。其中关于审批人的设置，除了直接填写用户之外，还可以填写UEL表达式来支持从流程变量中获取审批人或者组以及从JavaBean中获取审批人。&lt;/p>
&lt;hr>
&lt;h3 id="任务和任务定义-jobs-and-job-definitions">任务和任务定义 Jobs and Job Definitions&lt;/h3>
&lt;hr>
&lt;h3 id="流程变量-process-variables">流程变量 Process Variables&lt;/h3>
&lt;p>流程变量是指在流程运行状态的时候（ProcessInstance而不是ProcessDefinition）存储的数据，它的数据结构本质为&lt;code>Map&amp;lt;String, Object&amp;gt;&lt;/code>，可以通过流程引擎提供的API进行数据的修改。流程变量是范围性的，也就是说可以为某个任务节点单独设置流程变量，这个值仅仅存在于当前的任务节点。也可以为整个流程设置全局性的流程变量，在整个流程的运行过程中都是可以查看并使用的。&lt;/p>
&lt;h2 id="三表结构及接口设计">三、表结构及接口设计&lt;/h2>
&lt;hr>
&lt;h3 id="流程引擎表结构">流程引擎表结构&lt;/h3>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/erd_710_bpmn.svg" alt="流程引擎的表结构（来源：官方文档）">&lt;/p>
&lt;p>流程引擎的表结构（来源：官方文档）&lt;/p>
&lt;p>根据前缀的不同，这些表可以分为以下几类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ACT_GE_&lt;/strong>：General，存储通用的配置&lt;/li>
&lt;li>&lt;strong>ACT_ID_&lt;/strong>：Identity，存储身份相关的数据&lt;/li>
&lt;li>&lt;strong>ACT_RE_&lt;/strong>：Repository，存储静态信息，如流程定义和流程资源等&lt;/li>
&lt;li>&lt;strong>ACT_HI_&lt;/strong>：History，这些表中保存的都是历史数据，比如执行过的流程实例、变量、任务，等等。&lt;/li>
&lt;li>&lt;strong>ACT_RU_&lt;/strong>：只保存流程实例在执行过程中的运行时数据，并且当流程结束后会立即移除这些数据，这是为了保证运行时表尽量的小并运行的足够快。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="拓展表表结构">拓展表表结构&lt;/h3>
&lt;p>自定义拓展表的表结构以GC开头，主要用于存储流程引擎拓展功能的数据、投资管理系统特殊的业务逻辑以及前端在线画图功能的数据等。&lt;/p>
&lt;p>&lt;a href="https://www.notion.so/a28f6f1ec71f42f6874f176ef24a77a8">拓展表部分表结构展示&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="流程引擎api">流程引擎API&lt;/h3>
&lt;p>&lt;img src="https://kiwi4814-1256211473.cos.ap-nanjing.myqcloud.com/img/api.services.png" alt="流程引擎API（来源：官方文档）">&lt;/p>
&lt;p>流程引擎API（来源：官方文档）&lt;/p>
&lt;ul>
&lt;li>&lt;strong>RepositoryService&lt;/strong>提供了管理和控制发布包和流程定义的操作，发布一个流程定义意味着把它上传到引擎中，所有流程都会在保存进数据库之前分析解析好。
&lt;ul>
&lt;li>查询引擎中的流程定义和部署信息。&lt;/li>
&lt;li>暂停或激活流程定义，对应全部和特定流程定义。&lt;/li>
&lt;li>获得流程定义的文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>IdentityService&lt;/strong>可以管理（创建，更新，删除，查询…）群组和用户。&lt;/li>
&lt;li>&lt;strong>TaskService&lt;/strong>主要涉及关于任务的操作。
&lt;ul>
&lt;li>查询分配给用户或组的任务&lt;/li>
&lt;li>创建独立运行任务&lt;/li>
&lt;li>手工设置任务的审批人&lt;/li>
&lt;li>认领并完成一个任务，对任务进行多样化的操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>HistoryService&lt;/strong>提供了流程引擎的所有历史数据的查询，比如历史流程实例、历史任务实例、历史流程变量等。&lt;/li>
&lt;/ul>
&lt;h2 id="四流程功能设计">四、流程功能设计&lt;/h2>
&lt;hr>
&lt;h3 id="选人">选人&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>设置审批人&lt;/strong>&lt;/p>
&lt;p>在流程设计的时候预先选好节点审批人，可以选用户、角色、部门、团队、团队-角色等等，也可自己实现接口用于选人。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态选人（自选审批人）&lt;/strong>&lt;/p>
&lt;p>在流程运行的时候动态的选择下一节点的审批人。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="监听">监听&lt;/h3>
&lt;p>流程引擎本身提供了在流程运行过程中各个节点的监听的实现，可以在捕捉到这些事件之后执行Java代码或者计算表达式。这些事件包括流程开始和结束，网关，节点，顺序流，任务的创建和完成等等。可以执行的代码包括UEL表达式、实现了对应监听接口的Java Class等。&lt;/p>
&lt;hr>
&lt;h3 id="会签">会签&lt;/h3>
&lt;p>在多人审批的情况下，会存在会签的情况，比如投决会审批，当投委会成员投票数大于等于2/3时，流程就可以通过并且自动跳入下一个节点。针对这种情况，流程引擎本身提供了任务模型（Task）上的完成条件&lt;code>completionCondition&lt;/code>以及顺序流（SequenceFlow）上的条件表达式&lt;code>conditionExpression&lt;/code>。这两者都支持UEL表达式的条件判断，其中UEL表达式中可以使用流程变量。在Task上还可以使用流程引擎内置的额外四个变量：&lt;/p>
&lt;ul>
&lt;li>nrOfInstances 节点的所有的实例数量&lt;/li>
&lt;li>nrOfCompletedInstances 已经完成的实例数量&lt;/li>
&lt;li>nrOfActiveInstances 当前激活的实例数量，当&lt;code>isSequential=true&lt;/code>时， nrOfActiveInstances的值永远为1&lt;/li>
&lt;li>loopCounter 实例循环的次数，依次递减&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="代理">代理&lt;/h3>
&lt;p>任务可交由代理人来代为审批&lt;/p>
&lt;hr>
&lt;h3 id="打回">打回&lt;/h3>
&lt;p>流程审批人将流程打回至流程发起人那里，等待重新发起&lt;/p>
&lt;hr>
&lt;h3 id="撤回">撤回&lt;/h3>
&lt;p>流程发起人撤回发起的流程&lt;/p>
&lt;hr>
&lt;h3 id="跳转">跳转&lt;/h3>
&lt;p>流程在执行中可以任意跳转到其他节点&lt;/p>
&lt;hr>
&lt;h3 id="加签">加签&lt;/h3>
&lt;ul>
&lt;li>前加签&lt;/li>
&lt;li>后加签&lt;/li>
&lt;li>中间加签&lt;/li>
&lt;/ul>
&lt;h2 id="五提供的接口">五、提供的接口&lt;/h2>
&lt;p>&lt;a href="https://www.notion.so/9ba42812297746d492be6bc27f356f5a">通用的参数名称说明&lt;/a>&lt;/p>
&lt;p>下面只列几个常用的接口，其他详见接口文档。&lt;/p>
&lt;hr>
&lt;h3 id="1-查询流程定义列表">1. 查询流程定义列表&lt;/h3>
&lt;p>功能：用于在发起流程时候选择合适的流程去发起，比如过阶段审批、现金流审批、会议室申请等等。&lt;/p>
&lt;p>接口地址：&lt;code>/api/definition/findProcessDefinitionWithType.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：租户ID（&lt;code>tenantId&lt;/code>），流程类型（&lt;code>processType&lt;/code>）【表示类型】&lt;/p>
&lt;hr>
&lt;h3 id="2-查询流程实例列表">2. 查询流程实例列表&lt;/h3>
&lt;p>功能：用于客户端查看和管理已发起的流程&lt;/p>
&lt;p>接口地址：&lt;code>/api/instance/findHisInstanceList.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：详见&lt;code>ProcessSearch&lt;/code>类&lt;/p>
&lt;hr>
&lt;h3 id="3-查询单个流程实例详情">3. 查询单个流程实例详情&lt;/h3>
&lt;p>功能：查询单个流程实例的详情，包括流程定义的xml字符串、流程实例的属性、流程实例已经生成的Activity instance列表等。&lt;/p>
&lt;p>接口地址：&lt;code>/api/instance/findInstanceInfo.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：流程实例ID（&lt;code>processInstanceId&lt;/code>）&lt;/p>
&lt;hr>
&lt;h3 id="4-发起一个流程实例">4. 发起一个流程实例&lt;/h3>
&lt;p>功能：根据流程的定义发起一个流程实例，是客户端发起流程的入口。&lt;/p>
&lt;p>接口地址：&lt;code>/api/instance/startProcessInstance.json&lt;/code>&lt;/p>
&lt;p>参数：租户ID（&lt;code>tenantId&lt;/code>），流程唯一Key（&lt;code>processDefinitionKey&lt;/code>）&lt;/p>
&lt;hr>
&lt;h3 id="5-查询待办列表">5. 查询待办列表&lt;/h3>
&lt;p>功能：查询待办列表&lt;/p>
&lt;p>接口地址：&lt;code>/api/task/findTasks.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：租户ID（&lt;code>tenantId&lt;/code>），流程实例ID（&lt;code>instanceId&lt;/code>），审批人（&lt;code>userId&lt;/code>），任务定义Key（&lt;code>taskDefinitionKey&lt;/code>）&lt;/p>
&lt;hr>
&lt;h3 id="6-查询单个待办详情">6. 查询单个待办详情&lt;/h3>
&lt;p>功能：用于审批人登录系统审批的时候查看审批的详细情况以及表单等等。&lt;/p>
&lt;p>接口地址：&lt;code>/api/task/selectTaskInfoById.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：待办ID（&lt;code>taskId&lt;/code>）&lt;/p>
&lt;hr>
&lt;h3 id="7-待办审批">7. 待办审批&lt;/h3>
&lt;p>功能：客户端审批待办的入口&lt;/p>
&lt;p>接口地址：&lt;code>/api/task/audit.json&lt;/code>&lt;/p>
&lt;p>参数：审批结果，审批意见&lt;/p>
&lt;hr>
&lt;h3 id="8-查询操作日志">8. 查询操作日志&lt;/h3>
&lt;p>功能：查询流程的操作日志&lt;/p>
&lt;p>接口地址：&lt;code>/api/process/findProcessOperHistoryList.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：租户ID（&lt;code>tenantId&lt;/code>），流程实例ID（&lt;code>processInstanceId&lt;/code>），任务定义Key（&lt;code>taskDefinitionKey&lt;/code>）&lt;/p>
&lt;h2 id="参考文档">&lt;strong>参考文档&lt;/strong>&lt;/h2>
&lt;p>&lt;em>&lt;strong>Camunda BPM版本：7.10&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://docs.camunda.org/manual/7.10/">【Camunda Docs】&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.camunda.org/javadoc/camunda-bpm-platform/7.10/org/camunda/bpm/engine/">【Camunda BPM Javadocs】&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.camunda.org/javadoc/camunda-bpm-platform/7.10/org/camunda/bpm/engine/">【BPMN 2.0规范】&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html">【UEL Docs】&lt;/a>&lt;/p>
&lt;p>【Activiti相关博文】自行百度&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2019/08/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/" term="流程引擎" label="流程引擎"/><category scheme="https://kiwi4814.github.io/tags/2019/08/camunda/" term="Camunda" label="Camunda"/></entry><entry><title type="text">Java和Javascript去除字符串空格的方法</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/space-remove/"/><id>https://kiwi4814.github.io/posts/2019/space-remove/</id><updated>2023-03-24T09:22:15+00:00</updated><published>2019-06-05T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">正则表达式详解 解析常用空格的正则表达式为： 1 [ *| *|\s*]* 其中正则表达式\s等同于[ \r\n\f\t\v] 1 2 3……</summary><content type="html">&lt;h3 id="正则表达式详解">正则表达式详解&lt;/h3>
&lt;p>&lt;strong>解析常用空格的正则表达式&lt;/strong>为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>&lt;span class="err">　&lt;/span>&lt;span class="o">*|&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="o">*|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">*]*&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中正则表达式&lt;code>\s&lt;/code>等同于&lt;code>[ \r\n\f\t\v]&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">空格：为U&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mo">00&lt;/span>&lt;span class="nx">A0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">不换行空格&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\r：回车符&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">CARRIAGE_RETURN&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nx">，使光标到行首，ASCII&lt;/span> &lt;span class="nx">代码&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="nx">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\n：换行符&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">LINE_FEED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nx">，使光标下移一格，ASCII&lt;/span> &lt;span class="nx">代码&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="nx">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\f：换页符&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">ASCII&lt;/span> &lt;span class="nx">代码&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="nx">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\t：横向跳进字符，ASCII&lt;/span> &lt;span class="nx">代码&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="nx">，即水平制表符；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\v：纵向跳进字符，即垂直制表符。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上述正则表达式中，另有两个空格，分别为&lt;/p>
&lt;pre tabindex="0">&lt;code>U+3000 12288 全角空格，表意文字空格，CJK（中日韩）符号及标点
U+0020 160 无中断空格（SPACE），可命名文件的空格类型
&lt;/code>&lt;/pre>&lt;p>另外正则表达式中&lt;code>\s&lt;/code>中包含的空格为：
&lt;code>U+00A0&lt;/code>，十进制为&lt;code>32&lt;/code>，&lt;code>HTML&lt;/code>代码为&lt;code>&amp;amp;nbsp;&lt;/code>，为最常用的不换行空格（NO-BREAK SPACE），即正常编译器中空格键打出的空格。
此外还有其他很多空格类型，都不包含在&lt;code>\s&lt;/code>，由于不常用所以并未列在正则表达式中。&lt;/p>
&lt;h3 id="java去空格">Java去空格&lt;/h3>
&lt;h4 id="去除所有空格">去除所有空格&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">str&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;[　*| *|\\s*]*&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="去除句首句尾空格">去除句首句尾空格&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">str&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;^[　*| *|\\s*]*&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;[　*| *|\\s*]*$&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="javascript的正则表达式">Javascript的正则表达式&lt;/h3>
&lt;h5 id="直接量语法">直接量语法&lt;/h5>
&lt;p>&lt;strong>&lt;code>/pattern/attributes&lt;/code>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>js&lt;/code>中使用&lt;code>//&lt;/code>定义的pattern不需要任何转义，只有&lt;code>&amp;quot;&amp;quot;&lt;/code>定义的字符串才需要转义字符。&lt;/li>
&lt;/ul>
&lt;h5 id="构造函数">构造函数&lt;/h5>
&lt;p>&lt;strong>&lt;code>new RegExp(pattern, attributes);&lt;/code>&lt;/strong>&lt;/p>
&lt;h5 id="参数">参数&lt;/h5>
&lt;p>参数 &lt;code>pattern&lt;/code> 是一个字符串，指定了正则表达式的模式或其他正则表达式。
参数 &lt;code>attributes&lt;/code> 是一个可选的字符串，包含属性 &amp;quot;g&amp;quot;、&amp;quot;i&amp;quot; 和 &amp;quot;m&amp;quot;，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 m 属性。如果 pattern 是正则表达式，而不是字符串，则必须省略该参数。&lt;/p>
&lt;h5 id="返回值">返回值&lt;/h5>
&lt;p>一个新的 &lt;code>RegExp&lt;/code> 对象，具有指定的模式和标志。如果参数 &lt;code>pattern&lt;/code> 是正则表达式而不是字符串，那么 &lt;code>RegExp()&lt;/code> 构造函数将用与指定的 &lt;code>RegExp&lt;/code> 相同的模式和标志创建一个新的 &lt;code>RegExp&lt;/code> 对象。
如果不用 &lt;code>new&lt;/code> 运算符，而将 &lt;code>RegExp()&lt;/code> 作为函数调用，那么它的行为与用 &lt;code>new&lt;/code> 运算符调用时一样，只是当 &lt;code>pattern&lt;/code> 是正则表达式时，它只返回 &lt;code>pattern&lt;/code>，而不再创建一个新的 &lt;code>RegExp&lt;/code> 对象。&lt;/p>
&lt;h5 id="抛出">抛出&lt;/h5>
&lt;p>&lt;code>SyntaxError&lt;/code> - 如果 &lt;code>pattern&lt;/code> 不是合法的正则表达式，或 &lt;code>attributes&lt;/code> 含有 &lt;code>&amp;quot;g&amp;quot;&lt;/code>、&lt;code>&amp;quot;i&amp;quot;&lt;/code> 和 &lt;code>&amp;quot;m&amp;quot;&lt;/code> 之外的字符，抛出该异常。
&lt;code>TypeError&lt;/code> - 如果 &lt;code>pattern&lt;/code> 是 RegExp 对象，但没有省略 &lt;code>attributes&lt;/code> 参数，抛出该异常。&lt;/p>
&lt;h3 id="javascript去空格">Javascript去空格&lt;/h3>
&lt;p>&lt;code>JS&lt;/code> 字符串替换操作有&lt;code>replace()&lt;/code> 方法，但是这个方法只能替换目标字符串中第一个匹配的字符串。
如果要将目标字符串全部替换的话，&lt;code>java&lt;/code>里可以用&lt;code>replaceAll&lt;/code>，但是&lt;code>JS&lt;/code> 没有提供这样的方法，所以使用正则表达式来达到&lt;code>replaceAll()&lt;/code>的效果：&lt;/p>
&lt;h4 id="全局匹配的写法1">全局匹配的写法1&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[　*| *|\s*]*/g&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>g&lt;/code> 的意义是：执行全局匹配（查找所有匹配而不是在找到第一个匹配后停止）。&lt;/p>
&lt;h4 id="全局匹配的写法2">全局匹配的写法2&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[　*| *|\\s*]*&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;gm&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="增加string-对象原型方法">增加String 对象原型方法&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">s2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;gm&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="nx">s2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就可以在&lt;code>js&lt;/code>代码中使用&lt;code>replaceAll&lt;/code>方法了。&lt;/p>
&lt;p>oracle去空格&lt;/p>
&lt;p>&lt;code>SELECT REGEXP_REPLACE('dark souls sin', '\s', NULL) FROM DUAL;&lt;/code>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/><category scheme="https://kiwi4814.github.io/tags/2019/12/javascript/" term="JavaScript" label="JavaScript"/></entry></feed>