<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><title type="text">客驿风尘面，花坐墨痕枝</title><subtitle type="html">这是kiwi4814的个人博客！</subtitle><updated>2022-03-13T08:51:21+00:00</updated><id>https://kiwi4814.github.io/</id><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/"/><link rel="self" type="application/atom+xml" href="https://kiwi4814.github.io/atom.xml"/><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><generator uri="https://gohugo.io/" version="0.94.2">Hugo</generator><entry><title type="text">1@面向对象与面向过程</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/tbod-oop/"/><id>https://kiwi4814.github.io/posts/2022/tbod-oop/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2022-03-08T22:40:15+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">理论一：什么是面向对象？ 面向对象编程和面向对象编程语言的区别？ 面向对象是一种编程风格……</summary><content type="html">&lt;h2 id="理论一什么是面向对象">理论一：什么是面向对象？&lt;/h2>
&lt;p>面向对象编程和面向对象编程语言的区别？&lt;/p>
&lt;blockquote>
&lt;p>面向对象是一种编程风格，面向对象编程语言是支持类或者对象的语法机制，使用面向对象语言能够很方便的实现面向对象编程。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>核心概念&lt;/strong>： 类（class）和对象（object）
&lt;strong>四大特性&lt;/strong>：封装、抽象、继承、多态&lt;/p>
&lt;p>UML（Unified Model Language），统一建模语言。&lt;/p>
&lt;p>&lt;a href="https://github.com/gdhucoder/Algorithms4/blob/master/designpattern/pic/umlcheatsheet.jpg">Algorithms4/umlcheatsheet.jpg at master · gdhucoder/Algorithms4 (github.com)&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/gdhucoder/Algorithms4/master/designpattern/pic/umlcheatsheet.jpg" alt="img">&lt;/p>
&lt;h2 id="理论二封装抽象继承多态分别可以解决哪些编程问题">理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？&lt;/h2>
&lt;h3 id="封装encapsulation">封装（Encapsulation）&lt;/h3>
&lt;p>使用钱包的例子，id和createTime在初始化的时候生成，同时只提供增加和修改余额的方法。&lt;/p>
&lt;p>封装的意义：可控、通过有限的方法暴露必要的属性，一方面可以控制权限和保护数据一致性，另一方面也更加易于使用。&lt;/p>
&lt;h3 id="抽象abstraction">抽象（Abstraction）&lt;/h3>
&lt;p>过滤非必要信息：抽象只关注功能点不关注实现过程&lt;/p>
&lt;p>很多设计原则都体现了抽象的思想，比如开闭原则、基于接口而非实现编程&lt;/p>
&lt;p>定义接口名称的时候要有抽象思维，不要在方法定义中暴露太多的实现细节&lt;/p>
&lt;h3 id="继承inheritance">继承（inheritance）&lt;/h3>
&lt;p>符合人类的认知，但是过多的继承会导致代码可读性、可维护性变差。所以很多人觉得继承是一种反模式。比如”多用组合少用继承“这一设计思想。&lt;/p>
&lt;h3 id="多态polymorphism">多态（polymorphism）&lt;/h3>
&lt;p>多态的定义：子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现。&lt;/p>
&lt;p>多态的前提是编程语言提供的特殊语法机制——&lt;strong>继承加方法重写&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>父类对象可以引用子类对象，DynamicArray dynamicArray = new SortedDynamicArray();&lt;/li>
&lt;li>支持继承&lt;/li>
&lt;li>支持子类重写父类的方法&lt;/li>
&lt;/ul>
&lt;p>除了这种方式外，还有两种常见的方式 —— 一是利用接口类语法，二是duck-typing语法。&lt;/p>
&lt;p>**多态能解决的问题：**提高代码的可扩展性和复用性。&lt;/p>
&lt;h2 id="理论三面向对象和面向过程">理论三：面向对象和面向过程&lt;/h2>
&lt;p>&lt;strong>发展流程&lt;/strong>：面向过程 -》 面向对象 -》 函数式编程&lt;/p>
&lt;p>其中粗略的来讲，面向过程已经几乎过时，面向对象是当前主流的设计思想，而函数式编程目前还没有被广泛接受。&lt;/p>
&lt;p>在实际工作中，很多人只是在用面向对象语言实现面向过程的编码罢了。&lt;/p>
&lt;p>&lt;strong>抛出问题&lt;/strong>：&lt;/p>
&lt;p>（1）什么是面向过程编程与面向过程编程语言？&lt;/p>
&lt;p>（2）面向对象编程相比面向过程编程有哪些优势？&lt;/p>
&lt;p>（3）为什么说面向对象编程语言比面向过程编程语言更高级？&lt;/p>
&lt;p>（4）有哪些看似是面向对象实际是面向过程风格的代码？&lt;/p>
&lt;p>（5）在面向对象编程中，为什么容易写出面向过程风格的代码？&lt;/p>
&lt;p>（6）面向过程编程和面向过程编程语言就真的无用武之地了吗？&lt;/p>
&lt;p>（1）&lt;strong>定义&lt;/strong>：&lt;strong>面向过程编程也是一种编程范式，以过程（可以理解为方法、函数、操作）作为组织代码的基本单元，以数据（可以理解为成员变量、属性）与方法相分离为主要的特点。&lt;/strong>&lt;/p>
&lt;p>（2）&lt;strong>优势&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>大规模复杂程序的开发（对于简单编程来说，面向过程反倒更有优势；对于大规模开发流程来说，面向对象编程提供了一种更加清晰的、更加模块化的代码组织方式）&lt;/li>
&lt;li>OOP风格的代码更易复用、易扩展、易维护 —— 也就是四大特性：封装、抽象、继承、多态&lt;/li>
&lt;li>OOP语言更加人性化、更加高级、更加智能&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在文章中我讲到，面向对象编程比面向过程编程，更加容易应对大规模复杂程序的开发。但像 Unix、Linux 这些复杂的系统，也都是基于 C 语言这种面向过程的编程语言开发的，你怎么看待这个现象？这跟我之前的讲解相矛盾吗？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用任何一个编程语言编写的程序，最终执行上都要落实到CPU一条一条指令的执行（无论通过虚拟机解释执行，还是直接编译为机器码），CPU看不到是使用何种语言编写的程序。对于所有编程语言最终目的是两种：提高硬件的运行效率和提高程序员的开发效率。然而这两种很难兼得。
C语言在效率方面几乎做到了极致，它更适合挖掘硬件的价值，如：C语言用数组char a[8]，经过编译以后变成了（基地址＋偏移量）的方式。对于CPU来说，没有运算比加法更快，它的执行效率的算法复杂度是O(1)的。从执行效率这个方面看，开发操作系统和贴近硬件的底层程序，C语言是极好的选择。
C语言带来的问题是内存越界、野指针、内存泄露等。它只关心程序飞的高不高，不关心程序猿飞的累不累。为了解脱程序员，提高开发效率，设计了OOP等更“智能”的编程语言，但是开发容易毕竟来源于对底层的一层一层又一层的包装。完成一个特定操作有了更多的中间环节, 占用了更大的内存空间, 占用了更多的CPU运算。从这个角度看，OOP这种高级语言的流行是因为硬件越来越便宜了。我们可以想象如果大众消费级的主控芯片仍然是单核600MHz为主流，运行Android系统点击一个界面需要2秒才能响应，那我们现在用的大部分手机程序绝对不是使用JAVA开发的，Android操作系统也不可能建立起这么大的生态。&lt;/p>
&lt;/blockquote>
&lt;h2 id="理论四哪些代码看似是面向对象实际是面向过程的">理论四：哪些代码看似是面向对象，实际是面向过程的？&lt;/h2>
&lt;p>这一章节主要回答的是上一章节的后三个问题。&lt;/p>
&lt;h3 id="三个典型的看似是面向对象风格但其实是面向编程的代码案例">三个典型的看似是面向对象风格但其实是面向编程的代码案例&lt;/h3>
&lt;h4 id="1-滥用gettersetter方法">1. 滥用getter、setter方法&lt;/h4>
&lt;p>不推荐使用Lombok这样的插件，它违反了面向对象编程的封装特性。&lt;/p>
&lt;p>比如一个购物车类，有三个属性：数量、价格和购物车列表。&lt;/p>
&lt;p>数量和价格定义getter和setter方法明显违反了面向对象的封装特性，items即使只暴露getter方法也是有问题的，因为上层代码拿到list之后仍然可以对购物车中的数据做修改，比如像下面这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ShoppingCart&lt;/span> &lt;span class="n">cart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShoppCart&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getItems&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">clear&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 清空购物车
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是如果不提供getter方法实际上是看不到购物车的，这时候怎么办呢？解决方法也很简单，以Java为例,&lt;strong>我们可以通过 Java 提供的 Collections.unmodifiableList() 方法，让 getter 方法返回一个不可被修改的 UnmodifiableList 集合容器，而这个容器类重写了 List 容器中跟修改数据相关的方法，比如 add()、clear() 等方法。一旦我们调用这些修改数据的方法，代码就会抛出 UnsupportedOperationException 异常，这样就避免了容器中的数据被修改。具体的代码实现如下所示。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShoppingCart&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略其他代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShoppingCartItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getItems&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unmodifiableList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">items&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UnmodifiableList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">UnmodifiableCollection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">implements&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UnsupportedOperationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">clear&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UnsupportedOperationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...省略其他代码...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ShoppingCart&lt;/span> &lt;span class="n">cart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShoppingCart&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShoppingCartItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getItems&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clear&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//抛出UnsupportedOperationException异常
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过这样也是有风险的，因为即使无法修改List，也可以修改List中的item，这个问题可以留待日后讨论。&lt;/p>
&lt;p>&lt;strong>总结：&lt;/strong> 在设计实现类的时候，除非真的需要，尽量不要给属性定义setter方法。除此之外，尽管getter方法相对setter方法要安全些，但是如果返回的是集合容器（比如List），也要防范集合内部数据被修改的风险。&lt;/p>
&lt;h4 id="2-滥用全局变量和全局方法">2. 滥用全局变量和全局方法&lt;/h4>
&lt;blockquote>
&lt;p>在面向对象编程中，常见的全局变量有单例类对象、静态成员变量、常量等，常见的全局方法有静态方法。单例类对象在全局代码中只有一份，所以，它相当于一个全局变量。静态成员变量归属于类上的数据，被所有的实例化对象所共享，也相当于一定程度上的全局变量。而常量是一种非常常见的全局变量，比如一些代码中的配置参数，一般都设置为常量，放到一个 Constants 类中。静态方法一般用来操作静态变量或者外部数据。你可以联想一下我们常用的各种 Utils 类，里面的方法一般都会定义成静态方法，可以在不用创建对象的情况下，直接拿来使用。静态方法将方法与数据分离，破坏了封装特性，是典型的面向过程风格。&lt;/p>
&lt;/blockquote>
&lt;p>下面以Constants和Utils这两种常见的类为例，说说全局变量和全局方法的利与弊。&lt;/p>
&lt;h5 id="constants">Constants&lt;/h5>
&lt;p>定义一个又大又全的常量类不是一个很好的设计思路，主要原因有：&lt;/p>
&lt;ul>
&lt;li>影响代码的可维护性，增加了代码冲突的概率&lt;/li>
&lt;li>增加代码的编译时间，对于比较大的工程来说，编译一次项目花费的时间可能会很长&lt;/li>
&lt;li>影响代码的复用性&lt;/li>
&lt;/ul>
&lt;p>如何解决？&lt;/p>
&lt;ul>
&lt;li>其一是按照功能进行拆分，比如MySQLConstants、RedisConstants等等&lt;/li>
&lt;li>其二是不单独设计Constants常量类，而是直接定义在使用的类中，这样也提高了类设计的内聚性和代码的复用性&lt;/li>
&lt;/ul>
&lt;h5 id="utils">Utils&lt;/h5>
&lt;p>Utils类我们一般会放一些很常用的操作，比如URL拼接、JSON数据的处理等等，这些方法不需要共享任何数据，不需要定义任何属性，所以是彻彻底底的面向过程的编程风格。在这种情况下，我们是可以使用Utils类的，只是要避免滥用，要避免不加思考的随意定义Utils类。&lt;/p>
&lt;p>此外，与常量类一样，尽量针对不同的功能设计不同的Utils类，比如FileUtils、IOUtils、StringUtils、UrlUtils等。&lt;/p>
&lt;h4 id="3-定义数据和方法分离的类">3. 定义数据和方法分离的类&lt;/h4>
&lt;blockquote>
&lt;p>我们再来看最后一种面向对象编程过程中，常见的面向过程风格的代码。那就是，数据定义在一个类中，方法定义在另一个类中。你可能会觉得，这么明显的面向过程风格的代码，谁会这么写呢？实际上，如果你是基于 MVC 三层结构做 Web 方面的后端开发，这样的代码你可能天天都在写。&lt;/p>
&lt;/blockquote>
&lt;p>传统的MVC架构（前后端分离的模式）分为Controller层、Service层、Repository层（Dao层），在每一层中也会定义相应的VO、Dto、Entity等。一般情况下，VO、Dto只会定义数据不会定义方法，所有操作都在对应的controller、Service以及Dao中，而这就是典型的面向过程的编程风格。&lt;/p>
&lt;p>实际上，这种开发模式叫做基于贫血模型的开发模式。&lt;/p>
&lt;h3 id="为什么在面向对象编程中容易写出面向过程风格的代码">为什么在面向对象编程中容易写出面向过程风格的代码？&lt;/h3>
&lt;ul>
&lt;li>面向过程符合流程化的思维模式，而面向对象是自底向上的，将任务进行拆解和组装&lt;/li>
&lt;li>面向对象设计起来比较难，而很多工程师在开发的过程中更倾向于不动脑子的方式去实现需求&lt;/li>
&lt;/ul>
&lt;h3 id="面向过程及面向过程的编程语言真的再无用武之地了吗">面向过程及面向过程的编程语言真的再无用武之地了吗？&lt;/h3>
&lt;ul>
&lt;li>在一些微小程序、数据处理和算法中，脚本式的面向过程的编程风格更合适&lt;/li>
&lt;li>面向过程是面向对象的基础，即使在面向对象语言中，类里面每个方法的实现过程就是面向过程的&lt;/li>
&lt;li>我们的最终目的是写出易维护、易读、易复用的高质量代码，所以这两种编程风格并不是非黑即白的。&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2022/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/" term="设计模式之美" label="设计模式之美"/><category scheme="https://kiwi4814.github.io/tags/2022/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" term="读书笔记" label="读书笔记"/><category scheme="https://kiwi4814.github.io/tags/2022/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式"/></entry><entry><title type="text">从零开始搭建个人博客（1） - 准备工作</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2022/hugo-github-pages/"/><id>https://kiwi4814.github.io/posts/2022/hugo-github-pages/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2022-01-03T22:10:15+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">很久以来我的电子笔记都是通过本地化文件来管理的，中间也经历过很多痛苦的过程，Ever……</summary><content type="html">&lt;p>很久以来我的电子笔记都是通过本地化文件来管理的，中间也经历过很多痛苦的过程，Evernote、Notion、Typora以及目前主力使用的Obsidian，但是我发现这些管理方式都有着比较致命的缺点：知识过于碎片化以及过于依赖我的自制力。&lt;/p>
&lt;p>卡片式笔记法固然优秀，但是目前里面的很多文字都是随意写就，力求自己能够看懂，搭建自己的知识体系足够，但是想要分享的话却是难上加难。基于以上种种，有了搭建一个个人博客的想法，一方面尝试着分享一下自己粗浅的知识储备，另一方面借此机会学习一下这个过程。&lt;/p>
&lt;p>因而有了这篇文章，或者说这个系列的文章，希望能够让看到这篇文章的人也能学会如何搭建自己的个人博客。&lt;/p>
&lt;p>本文为此系列的第一章，主要介绍下我们需要预先准备的账号、需要了解的知识以及需要安装的工具。&lt;/p>
&lt;h2 id="一github简介">一、Github简介&lt;/h2>
&lt;p>如果你是一个程序员或者相关从业者，跳过此节即可。&lt;/p>
&lt;h3 id="1-github是啥">1. GitHub是啥？&lt;/h3>
&lt;p>&lt;strong>GitHub&lt;/strong>是通过Git进行版本控制的软件源代码托管服务平台，简单来说就是一个帮你管理代码以及代码历史记录的平台，很多教程网上特别多，&lt;a href="https://www.zhihu.com/question/21669554">适合新手的&lt;/a>也有很多，这里不作过多的介绍了，我们需要的是注册一个github账号，才能进行接下来的一些操作。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>打开&lt;a href="https://github.com/">Github官网&lt;/a>，然后点击右上角&lt;code>Sign Up&lt;/code>，如下图所示按照提示填写信息操作即可：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/github1.png" alt="github1">&lt;/p>
&lt;p>创建完之后会有一些初始化的过程，可以选择跳过，也可以根据需要勾选一些配置和选项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>账号注册后登录系统，点击右上角头像，在下拉选项中找到 &lt;code>your repositories&lt;/code>并打开，然后点击&lt;code>new&lt;/code>创建一个仓库：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/github2.png" alt="github2">&lt;/p>
&lt;p>点击&lt;code>new&lt;/code>创建一个新的仓库：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/github3.png" alt="github3">&lt;/p>
&lt;p>我们先来建立一个普通仓库：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/github4.png" alt="github4">&lt;/p>
&lt;p>创建后自动跳转到项目主页，如果你没勾选&lt;code>Add a README file&lt;/code>，那么看到的应该是如下页面，这里介绍了git的一些主要命令和用法，建议可以按照提示操作一下。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/github5.png" alt="github5">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="2-github-pages">2. Github Pages&lt;/h3>
&lt;p>下面我们来建立另外一个仓库，步骤与第一个一样，不同的是仓库名称有所区别。仓库名称固定为&lt;code>你的用户名+.github.io&lt;/code>，比如我上面截图的用户名是&lt;code>tsuchinoe&lt;/code>，那么我仓库的名称就应该写成&lt;code>tsuchinoe.github.io&lt;/code>&lt;strong>（注意这次勾选一下&lt;code>Add a README file&lt;/code>）&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/github6.png" alt="">&lt;/p>
&lt;p>仓库创建完后，自动跳转到项目主页，可以看到仓库中已经存在一个&lt;code>README.md&lt;/code>，并且里面的内容中已经自动填充了仓库名以及仓库简介。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/github7.png" alt="github7">&lt;/p>
&lt;p>接下来我们试试在浏览器中直接输入仓库名称，比如我直接在浏览器地址栏输入&lt;code>tsuchinoe.github.io&lt;/code>，会发现这个地址是可以打开的，而且里面的内容就是刚刚创建好的&lt;code>README.md&lt;/code>里面的内容，这就是Github Pages。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/github8.png" alt="github8">&lt;/p>
&lt;h3 id="3-git的简单用法">3. Git的简单用法&lt;/h3>
&lt;h2 id="二安装hugo">二、安装Hugo&lt;/h2>
&lt;h2 id="三购买自己的域名可选">三、购买自己的域名（可选）&lt;/h2></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2022/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" term="从零开始搭建个人博客" label="从零开始搭建个人博客"/><category scheme="https://kiwi4814.github.io/tags/2022/01/hugo/" term="Hugo" label="Hugo"/><category scheme="https://kiwi4814.github.io/tags/2022/01/github/" term="Github" label="Github"/><category scheme="https://kiwi4814.github.io/tags/2022/01/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" term="个人博客" label="个人博客"/></entry><entry><title type="text">windows软件不完全推荐03—工具篇</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/windows-software-tools/"/><id>https://kiwi4814.github.io/posts/2021/windows-software-tools/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-12-29T22:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本篇会放一些使用频率没那么高但也同样优秀的软件。也会按照第一章那样进行归类，同时也会……</summary><content type="html">&lt;p>本篇会放一些使用频率没那么高但也同样优秀的软件。也会按照第一章那样进行归类，同时也会介绍一些前文提到的同类软件。&lt;/p>
&lt;p>增加了关键词的词条，可以按照想要的功能检索。&lt;/p>
&lt;h3 id="截图类">截图类&lt;/h3>
&lt;h4 id="snipastehttpszhsnipastecom">&lt;a href="https://zh.snipaste.com/">Snipaste&lt;/a>&lt;/h4>
&lt;h3 id="文件管理类">文件管理类&lt;/h3>
&lt;h4 id="adrenamer">AdRenamer&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="handshaker">HandShaker&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="synergyhttpssymlesscomsynergy">&lt;a href="https://symless.com/synergy">Synergy&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="faststone">FastStone&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="beyond-comparehttpwwwscootersoftwarecom">&lt;a href="http://www.scootersoftware.com/">Beyond Compare&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="wirelesskeyviewhttpwwwnirsoftnetutilswireless_keyhtml">&lt;a href="http://www.nirsoft.net/utils/wireless_key.html">WirelessKeyView&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="windows-terminalhttpswwwmicrosoftcomzh-cnpwindows-terminal9n0dx20hk701">&lt;a href="https://www.microsoft.com/zh-cn/p/windows-terminal/9n0dx20hk701">Windows Terminal&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="迅雷httpsxl11xunleicom">&lt;a href="https://xl11.xunlei.com/">迅雷&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：不用介绍了，不过迅雷已经不是迅雷极速版/尊享版那个年代的良心迅雷了，装软件喜欢一路下一步的慎装。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：额外安装一个迅雷的目的是，有些资源真的用什么都下不动，但是迅雷可以有速度（玄学），所以我会额外装一个以备不时之需。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：下载最新的安装包，安装时勾选掉所有的捆绑项目，安装后打开设置，取消所有的开机启动、接管设置、文件关联等配置项，然后就可以关掉了。&lt;/li>
&lt;/ul>
&lt;h4 id="picgo">PicGo&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="heu-kms-activator">HEU KMS Activator&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="directx-repair">DirectX Repair&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h3 id="电子书">电子书&lt;/h3>
&lt;p>如果你喜欢看电子书，那么你肯定对epub、mobi、azw3，甚至CBZ、CBR这些格式都不陌生。其中epub为开放标准，mobi和azw3主要是亚马逊在用。这几种格式的电子书相比于远古时期的text，支持更精细的排版、脚本，公式，矢量图形等，是目前主流的几种电子书格式。&lt;/p>
&lt;p>下面是我常用的一些相关的软件：&lt;/p>
&lt;h4 id="calibrehttpscalibre-ebookcom">&lt;a href="https://calibre-ebook.com/">calibre&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：calibre是一个自由开源的电子书软体套装，可以用来组织、存放、以及管理电子书，支援大多数的电子书格式。 同时也支援与许多流行的电子书阅读器进行同步，並可能在DRM的限制下转换电子书的格式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：Kindle最佳伴侣。可以在电脑上管理和增加Kindle书籍，个性化修改书籍封面和内容，转换格式（epub、mobi、azw3），当然也可以直接当作电子书阅读器使用，是一个功能非常齐全的电子书管理器。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/11/28/wt9UqNFAC4pjaRI.png" alt="image-20211128202259395">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：使用可以参照&lt;a href="https://sspai.com/post/43843">最强大的本地电子书管理工具：Calibre 使用指南&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>关键词&lt;/strong>：电子书管理、Kindle、epub、mobi、azw3&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="kindle-comic-converterhttpskcciosphere">&lt;a href="https://kcc.iosphe.re/">Kindle Comic Converter&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Kindle Comic Converter (KCC) 是一个可以把 PNG、JPG、GIF、CBZ、CBR 和 CB7 格式的漫画转换成 EPUB 或 MOBI 格式电子书的免费开源软件，制作 E-Ink 设备适用的电子书从此轻而易举。KCC 最初是专门为 Kindle 所开发的，但是现在对 EPUB 3.0 和 CBZ 也有效。此外 KCC 在处理图片时会针对电子墨水显示屏进行全面优化。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：如果你喜欢在Kindle看漫画，通常我们网上找到的资源是以多张图片压缩包的形式呈现给我们的，一般我会使用此软件来将图片转换为mobi格式的漫画。针对不同的Kindle版本优化分辨率，根据文件夹自动分章节等等，非常好用。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：参考&lt;a href="https://bookfere.com/post/164.html">最简单的漫画转换工具&lt;/a>。实际使用的时候注意不要一次转换太多章节，容易失败。&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：Kindle，漫画&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：亚马逊官方的Kindle Comic Creator，使用繁琐，不推荐。&lt;/li>
&lt;/ul>
&lt;h4 id="comicshttpswwwmicrosoftcomzh-cnpcomics9nblgggzlsmqactivetabpivotoverviewtab">&lt;a href="https://www.microsoft.com/zh-cn/p/comics/9nblgggzlsmq?activetab=pivot:overviewtab">Comics++&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：优秀的漫画阅读器，支持ZIP/CBZ、RAR/CBR、7Z/CB7、PDF和文件夹图像文件。此程序由C++/CX语言写成，操作简单，速度敏捷，功能具备。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：在PC上按照文件夹读漫画的时候会选择用它。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费UWP&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：打开后选择你要看的漫画所在文件夹或者压缩包即可。&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：漫画阅读器&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.cdisplayex.com/">CBR Reader（前身Comic reader）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="aria">Aria&lt;/h4>
&lt;h3 id="影音工具">影音工具&lt;/h3>
&lt;p>此部分适合家里有NAS的小伙伴。&lt;/p>
&lt;h4 id="tmmhttpswwwtinymediamanagerorg">&lt;a href="https://www.tinymediamanager.org/">TMM&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：tinyMediaManager作为一款电影信息刮削神器，目前支持Linux、Windows、Mac三个平台。而tinyMediaManager是基于Java开发的，需要Java 1.8以上版本的运行时环境支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：如果你喜欢自己打造属于自己的电影墙，你肯定会爱上它，支持从各大数据库刮削电影和电视剧对的海报、简介、分集介绍等等。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/11/28/ir9kWldhb35v6LF.png" alt="image-20211128182340967">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：使用免费的4.0.6版本即可&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：选择自己收藏电影或者电视剧的文件夹，然后在主界面刮削即可，可以自定义从哪个数据库进行刮削。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>关键词&lt;/strong>：刮削，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="kodi">Kodi&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：免费&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>关键词&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="jellyfinhttpsjellyfinorg">&lt;a href="https://jellyfin.org/">jellyfin&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Jellyfin 是一个自由的软件媒体系统，用于控制和管理媒体和流媒体。本质就是用照片墙的形式展示你自己的电影、电视剧等多媒体数据，并提供多平台访问播放服务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：搭配群晖QuickConnect、公网IP或者其他内网穿透软件就可以在任何地方观看你在家里存储的电影电视了，最终实现的效果可以参考下图所示。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/11/28/aR5Qmp3dYskSLj7.jpg" alt="image-20211128184640304 (1)">&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/11/28/reO3KygQYZtVxL5.png" alt="image-20211128184015350">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：折腾&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>关键词&lt;/strong>：群晖，NAS，海报墙，家庭影院&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.plex.tv/">plex&lt;/a>，&lt;a href="https://emby.media/">emby&lt;/a>，&lt;a href="https://jellyfin.org/">Jellyfin&lt;/a>一般我们并称家庭影院三剑客，其中Plex体验最好但也最贵，emby和jellyfin同出一源，Jellyfin为emby的开源免费版。另外两个不再做过多的额外介绍了。&lt;/p>
&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2021/12/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/series/2021/12/windows%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8E%A8%E8%8D%90/" term="windows软件不完全推荐" label="windows软件不完全推荐"/><category scheme="https://kiwi4814.github.io/tags/2021/12/windows/" term="windows" label="windows"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/></entry><entry><title type="text">windows软件不完全推荐02—办公篇</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/windows-software-work/"/><id>https://kiwi4814.github.io/posts/2021/windows-software-work/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-12-28T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">其实大部分行业我都不太了解，所以这里也就只能放放一些我认为比较通用的办公软件了。 办公……</summary><content type="html">&lt;p>&lt;em>&lt;strong>其实大部分行业我都不太了解，所以这里也就只能放放一些我认为比较通用的办公软件了。&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="办公软件">办公软件&lt;/h2>
&lt;h3 id="零一些在线网站">零：一些在线网站&lt;/h3>
&lt;p>&lt;a href="https://tophub.today/">今日热榜&lt;/a>：嗯，每天摸鱼看热搜&lt;/p>
&lt;p>&lt;a href="https://www.todaybing.com/">必应壁纸&lt;/a>：必应4K壁纸&lt;/p>
&lt;p>&lt;a href="https://hellogithub.com/">Github热门开源项目&lt;/a>：发现好玩的好用的项目&lt;/p>
&lt;h3 id="一工具箱">一、工具箱&lt;/h3>
&lt;h4 id="万彩办公大师httpwwwwofficeboxcomabouthtml">&lt;a href="http://www.wofficebox.com/about.html">万彩办公大师&lt;/a>&lt;/h4>
&lt;p>用的不多，但是功能齐全，一般我U盘里会放一个完整离线版的。这里贴一个官网的介绍还有软件首页的截图吧。&lt;/p>
&lt;blockquote>
&lt;p>万彩办公大师OfficeBox是一款由广州万彩信息技术有限公司研发的免费办公工具软件超级套装，几乎可以满足日常各种办公工具需求。它内置了60多款强大的，无任何广告及插件的绿色办公组件，如PDF工具集（PDF转换（PDF 转 Word/Excel/PPT， PDF 合并分割水印）；文档/音视频/图片转换工具集；OCR工具集；屏幕录制工具集；图片处理工具集；文件处理工具集等。所有的套装工具不需要安装，直接可以绿色加载启动，省去了用户为安装各种办公软件而寻找工具、安装及卸载的麻烦。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211127231339424.png" alt="image-20211127231339424">&lt;/p>
&lt;h3 id="二office全家桶">二、Office全家桶&lt;/h3>
&lt;p>说到办公，肯定离不开Office三件套，对于微软的Microsoft Office版本而言，目前最常用的应该是Office 2013，Office 2016，Office 2019以及随Windows11发布的Office 2021。&lt;/p>
&lt;p>这里推荐大家直接使用Microsoft 365，如果有熟悉的小伙伴或者家人一起使用可以选择Microsoft 365 家庭版，最多支持6个人使用并且每个人附赠1T的OneDrive空间，官网购买即可，还是挺香的。&lt;/p>
&lt;p>白嫖的话，建议如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一种，如果你有一个&lt;strong>国外EDU邮箱&lt;/strong>的话，可以来&lt;a href="https://www.microsoft.com/zh-cn/education/products/office">这里&lt;/a>申请Office 365 教育版，同样含有1TB的OneDrive，但这里就不建议存储太过私人的东西了哈，可以当中转站使用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二种，&lt;strong>安装Office 2019&lt;/strong>使用。在&lt;a href="https://msdn.itellyou.cn/">这里&lt;/a>下载官方原版镜像（不建议下载网上的各种私人破解版），然后使用KMS工具（例如&lt;a href="https://github.com/zbezj/HEU_KMS_Activator">HEU KMS Activator&lt;/a>）或者用&lt;a href="https://cmwtat.cloudmoe.com/cn.html">云萌&lt;/a>进行破解激活；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第三种，使用WPS全家桶（可以找WPS2019的专业版）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>除此以外，推荐一些与Office相关的套件：&lt;/p>
&lt;h4 id="islidehttpswwwislidecc">&lt;a href="https://www.islide.cc/">iSlide&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：iSlide是一款基于PowerPoint的一键化效率插件，提供了便捷的排版设计工具，能够帮助使用者快速进行字体统一、色彩统一、矩形/环形布局、批量裁剪图片等操作。具备8个资源库，包括主题库、色彩库、图示库、智能图表库、图标库、图片库和插图库，所有资源即插即用。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：做PPT的时候不需要关注配色、字体、图标库什么的了，只需要关注内容就好了，剩下的iSlide几乎都可以帮你搞定。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>，而且是最讨厌的订阅制！&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;a href="https://sspai.com/post/42773">如何快速设计出令人满意的 PPT？用 iSlide 四步帮你搞定&lt;/a>&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="http://meihua.docer.com/">PPT美化大师&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="方方格子httpwwwffcellcom">&lt;a href="http://www.ffcell.com/">方方格子&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：方方格子 Excel工具箱是一款Excel工具箱软件。上百个实用功能：文本处理、批量录入、删除工具、合并转换、重复值工具、数据对比、高级排序、颜色排序、合并单元格排序、 聚光灯、宏收纳箱等。另外还有会员工具：汇总拆分（含汇总大师）、导航、图片专题工具、快查快录、身份证工具、拼音笔画、打印专题、邮件群发、翻译、财务工具等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：集成了一些Excel快捷操作，每个人的使用习惯不同，可以根据官网或者其他论坛的介绍先看一眼是否有心水的快捷操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>使用，但也有很多工具是付费的，深度使用的话可以考虑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后会额外多出方方格子和DIY工具箱两栏&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2021/12/06/97WVstQzOa1e6Zh.png" alt="image-20211206234550340">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="datacharts-for-excel-34httpsclubexcelhomenetthread-1310268-1-1html">&lt;a href="https://club.excelhome.net/thread-1310268-1-1.html">&lt;strong>DataCharts For Excel 3.4&lt;/strong>&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：初衷是将百度的Echarts搬到Excel中，让不懂的开发的人也开始使用绚丽的图表，但因为只有业余时间且对js不熟悉，搬的过程很吃力，进展比较慢。关于Echarts可访问百度浏览图表效果。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：网络大神自主研发，安全性和稳定性不敢保障，抛个链接，自行判断。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;/ul>
&lt;h4 id="小恐龙公文排版助手httpsgwxkonglongcom">&lt;a href="https://gw.xkonglong.com/#/">小恐龙公文排版助手&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：根据《党政机关公文格式国家标准》(GB/T 9704—2012)的格式要求，快速设置页面版式、快速设置常用文字格式、插入常用符号、版头、版记、公文页码、红线等。支持对文字的快速排版，中文首行缩进2字符、删除空白，断句重排等。支持对文档盖章、可以在文档同目录下生成 PDF/ doc /图片 格式的副本。可广泛用于各类规范文本的排版。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：按照指引安装后会在功能菜单最右边出现公文菜单。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2021/12/07/gmA42kr8VyJqvYa.png" alt="image-20211207223022212">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="三pdf处理">三、PDF处理&lt;/h3>
&lt;p>上面的&lt;strong>万彩办公大师&lt;/strong>里其实已经有很多针对PDF文件的处理了，如果还是不能满足需求的话，这里推荐几个更专业的软件。&lt;/p>
&lt;h4 id="福昕pdf编辑器httpseditorfoxitsoftwarecn万兴pdf专家httpspdfwondersharecn">&lt;a href="https://editor.foxitsoftware.cn/">福昕PDF编辑器&lt;/a>、&lt;a href="https://pdf.wondershare.cn/">万兴PDF专家&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：福昕PDF编辑器一款简单方便的PDF编辑器。 主要功能及优势：轻松修改PDF文档内容，以所见即所得的方式实现可靠、方便的编辑，无需了解PDF格式知识。此外，PDF Element（国内叫万兴PDF专家）几乎和福昕PDF编辑器功能一样，要用的话二选一即可。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：大学时候不想用笨重的Adobe阅读器的时候一直在用福昕，后来需要对PDF进行编辑的时候，自然而然也会想到他们家的编辑器。现在PDF编辑器的软件非常多，国内比较有名的就是福昕和万兴了。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：两款软件都是&lt;font>付费&lt;/font>的，都很贵，&lt;del>但是破解版也都很多&lt;/del>。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.adobe.com/acrobat/acrobat-pro.html">Adobe Acrobat Pro DC&lt;/a> 、&lt;a href="https://pdf.wondershare.cn/">PDF Element&lt;/a>、&lt;a href="https://www.pdfshaper.com/">PDFShaper&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="pdf24-toolshttpstoolspdf24orgzh">&lt;a href="https://tools.pdf24.org/zh/">PDF24 Tools&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：PDF24 Tools是一个免费且易于使用的&lt;strong>线上PDF工具&lt;/strong>，一共收录28个PDF功能，包括很常见的PDF转档、合并、编辑、压缩、加密解密、旋转、分割页面、加入浮水印或页码、提取图片、比较PDF文件、注释等等，PDF24 Tools另一特色是已经内建包括中文在内等多国语言，操作起来也很简单。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：这款工具最大的几个优势：①线上工具，打开网页就能直接用；②完全免费，允许商业化使用；③不想线上的话安装客户端也支持&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211207224040240.png" alt="image-20211207224040240">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：各类线上工具，如：&lt;a href="https://easypdf.com/cn">easypdf&lt;/a>、&lt;a href="https://pdf.io/">PDF.io&lt;/a>、&lt;a href="https://smallpdf.com/cn">Smallpdf&lt;/a>等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="四图片处理">四、图片处理&lt;/h3>
&lt;h4 id="在线工具">在线工具&lt;/h4>
&lt;p>在线工具主要适合应急使用，所以推荐的尽量以免费的为主，或者那种免费的也够用了的。&lt;/p>
&lt;h5 id="图片综合处理">图片综合处理&lt;/h5>
&lt;ul>
&lt;li>&lt;a href="https://www.iloveimg.com/zh-cn">iLoveIMG&lt;/a>：图片综合处理工具，&lt;font style="background-color:#8bc34a">免费&lt;/font>可用，高级帐户可解锁更多功能&lt;/li>
&lt;li>&lt;a href="https://renzhezhilu.gitee.io/webp2jpg-online/#/">多功能图片转换器&lt;/a>：图片格式转换器，此作者另有&lt;a href="https://renzhezhilu.gitee.io/webp2jpg-online/batch.html">图片加水印&lt;/a>以及&lt;a href="https://renzhezhilu.gitee.io/webp2jpg-online/splicing.html#/splicing">视频字幕拼接&lt;/a>工具，&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;a href="https://www.canva.com/">Canva可画&lt;/a>：在线设计平台，设计贺卡、海报、Logo等，&lt;font style="background-color:#8bc34a">免费&lt;/font>可用，亦可选择付费解锁更多模板&lt;/li>
&lt;li>&lt;a href="https://www.jpeg.io/">Jpeg.io | Convert any major image format into a highly optimized JPEG&lt;/a>&lt;/li>
&lt;/ul>
&lt;h5 id="图片压缩">图片压缩&lt;/h5>
&lt;ul>
&lt;li>&lt;a href="https://squoosh.app/">Squoosh&lt;/a>：Google的压缩神器，&lt;font style="background-color:#8bc34a">完全免费&lt;/font>&lt;/li>
&lt;li>&lt;a href="https://zh.recompressor.com/">最优图像优化&lt;/a>：在文件尺寸和质量之间选择完美平衡，并且可获取完整在线预览，&lt;font style="background-color:#8bc34a">完全免费&lt;/font>&lt;/li>
&lt;li>&lt;a href="https://www.picdiet.com/zh-cn">Picdiet&lt;/a>：基于浏览器的本地压缩工具，&lt;font style="background-color:#8bc34a">完全免费&lt;/font>&lt;/li>
&lt;li>&lt;a href="https://imagecompressor.com/zh/">在线图片优化器 (imagecompressor.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h5 id="图片放大">图片放大&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://bigjpg.com/">Bigjpg&lt;/a>：无损放大图片的在线工具，&lt;font style="background-color:#8bc34a">免费&lt;/font>但每个月限制20张&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://imglarger.com/">imglarger&lt;/a>：AI图像放大，&lt;font style="background-color:#8bc34a">免费&lt;/font>空间只有8个&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="在线ps">在线PS&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.photopea.com/">Photopea &lt;/a>：最早做在线PS的网站，免费账户就可以使用全部功能了，会员去广告&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ps.gaoding.com/#/">稿定设计PS&lt;/a>：国内的Photopea，网络不好的可以用这个代替，此外，他们家还有很多工具，不过很多都是收费的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://photoeditor.polarr.com/">Polarr&lt;/a>：泼辣修图的网页版，会员功能更多&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.remove.bg/">Remove.bg&lt;/a>：扣除图片背景&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="客户端">客户端&lt;/h4>
&lt;p>如果电脑配置允许，并且有一定的技术基础的话，编辑图片肯定还是要选用专业的软件的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Adobe全家桶&lt;/strong>：安装破解版的话可以跳转到微博大佬&lt;a href="https://weibo.com/vposy">@vposy&lt;/a>&lt;/li>
&lt;li>&lt;strong>Topaz全家桶&lt;/strong>：主打AI智能处理，无损放大、清晰度增强、降噪、扣图、HDR效果增强、4K视频修复等等，用过几次，操作非常简单，破解版网上也很多。&lt;/li>
&lt;/ul>
&lt;h3 id="五文本编辑">五、文本编辑&lt;/h3>
&lt;p>&lt;em>如果不喜欢用Word，那么非常推荐使用markdown来做文字相关类的工作，具体可在【常用篇】里的云笔记里看一些相关的软件推荐。&lt;/em>&lt;/p>
&lt;h4 id="visual-studio-codehttpscodevisualstudiocom">&lt;a href="https://code.visualstudio.com/">Visual Studio Code&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：VSCode 全称 Visual Studio Code，是微软出的一款轻量级代码编辑器，免费、开源而且功能强大。它支持几乎所有主流的程序语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：原本一直是使用Notepad++来代替默认记事本的，后来因为作者发布反华言论寻找替代品时发现微软的Visual Studio Code简直太好用了，不愧是最优秀的代码编辑器，丰富的插件让你可以在上面做任何事（&lt;del>比如我之前上班就在VS Code上看微信读书&lt;/del>）。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：微软出品，&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：不是用来开发的话，开启文本类文件（txt,log,conf,无后缀..）的时候右键选择使用code打开即可。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.sublimetext.com/blog/articles/sublime-text-4">Sublime Text &lt;/a>，&lt;a href="https://www.ultraedit.com/">UltraEdit&lt;/a>，&lt;a href="https://atom.io/">Atom&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="beyond-comparehttpswwwbeyondcomparecc">&lt;a href="https://www.beyondcompare.cc/">Beyond Compare&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Beyond Compare 是一套由 Scooter Software 推出的非常实用的文件及文件夹对比工具，丌仅可以快速比较出两个文件夹的不同之处，还可以详细的比较文件之间的内容差异，并将差异以颜色标示。 程序内建了文件浏览器，方便您对文件、文件夹、压缩包、FTP 网站之间的差异对比以及资料同步。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：对于会用git的人应该很熟悉show diff的操作，其实就是对比文件的历史版本的差异。而不熟悉git或者我们想要对比Office、图像文件时，Beyond Compare目前还是市面上首屈一指的对比软件。建议搭配git使用效果更佳，再也不怕自己写过的东西丢了。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211128105911299.png" alt="image-20211128105911299">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>，有点贵，用的话建议破解版就好&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：拖动文件&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211128110108145.png" alt="image-20211128110108145">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：git、&lt;a href="https://winmerge.org/">Winmerge&lt;/a>、&lt;a href="https://sourcegear.com/diffmerge/">DiffMerge&lt;/a>都是开源免费的，但是功能不如BC强大。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="六文本识别ocr">六、文本识别（OCR）&lt;/h3>
&lt;p>在线OCR：&lt;a href="https://gongpeione.github.io/quick-js-ocr/example/">JsOCR (gongpeione.github.io)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/AnyListen/tianruoocr">tianruoocr开源版本&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://ocr.tianruo.net/">天若OCR文字识别-59&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/AnyListen/tools-ocr">树洞OCR/tools-ocr)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://gitee.com/wanglifree/tianruoocr-cl">tianruoocr-cl: 天若ocr开源版本的本地版，采用Chinese-lite和paddleocr识别框架 (gitee.com)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/miaomiaosoft/PandaOCR">PandaOCR&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/miaomiaosoft/PandaOCR.Pro">PandaOCR.Pro&lt;/a>&lt;/p>
&lt;p>使用教程：&lt;a href="https://support.qq.com/products/322047/faqs-more/">PandaOCR专业版 (qq.com)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/PaddlePaddle/PaddleOCR">PaddleOCR&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://sspai.com/post/44944">这款被忽视的大厂作品，其实有更出色的中文 OCR 效果：ABBYY FineScanner - 少数派 (sspai.com)&lt;/a>&lt;/p>
&lt;h3 id="七流程图思维导图">七、流程图&amp;amp;思维导图&lt;/h3>
&lt;p>推荐一些相关的软件/网站：&lt;/p>
&lt;h4 id="microsoft-office-visio">Microsoft Office Visio&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="drawiohttpsappdiagramsnet">&lt;a href="https://app.diagrams.net/">drawio&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：draw.io 是一个强大简洁的在线的绘图网站，支持流程图，UML图，架构图，原型图等图标。支持Github，Google Drive, One drive等网盘同步，并且永久免费。如果觉得使用Web版不方便，draw.io 也提供了多平台的离线桌面版可供下载。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h4 id="xmind">Xmind&lt;/h4>
&lt;h4 id="edrawmax">EdrawMax&lt;/h4>
&lt;h4 id="coggle">coggle&lt;/h4>
&lt;p>coggle&lt;/p>
&lt;h4 id="processon">ProcessOn&lt;/h4>
&lt;p>网站&lt;/p>
&lt;h4 id="httpswwwzhixicom">&lt;a href="https://www.zhixi.com/">https://www.zhixi.com/&lt;/a>&lt;/h4>
&lt;p>客户端&lt;/p>
&lt;h3 id="七邮箱">七、邮箱&lt;/h3>
&lt;p>邮箱类的软件坑比较少，我一般常用的有两个：Foxmail和OutLook，前者是腾讯收购的张小龙（微信）研发的邮箱产品，符合国人的使用习惯，非常轻量、简洁和易用；后者是微软官方的邮件客户端，优点是功能强大、高效协同而且与Office套件、exchange无缝集成，缺点是使用起来过于麻烦，远远不如Foxmail。其他的同类产品还有网易邮箱，QQ邮箱，Gmail客户端等等。&lt;/p>
&lt;h3 id="八gtd">八、GTD&lt;/h3>
&lt;p>GTD类软件相信大家有这个习惯的肯定都有自己惯用的了，市面上能找到的GTD软件数不胜数，这里只列两个，一个是微软收购奇妙清单后开发的&lt;a href="https://todo.microsoft.com/tasks/">Microsoft To Do&lt;/a>，另外一个是辅助办公的番茄钟软件&lt;a href="https://pomofocus.io/">Pomofocus&lt;/a>。&lt;/p>
&lt;p>目前前者已经被我用Notion替代掉了，Notion强大的定制化功能（&lt;del>抄别人模板很方便&lt;/del>）足以应对大部分的GTD需求。&lt;/p>
&lt;p>Pomofocus则是我常用的另一款软件（PS：其网页端也可以集成在Notion里面，就不需要额外安装软件了），主要功能非常简单，就是计时，附带的任务管理和数据统计可以忽略，颜值尚可。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211128165134247.png" alt="image-20211128165134247">&lt;/p>
&lt;h3 id="九协同办公">九、协同办公&lt;/h3>
&lt;p>&lt;a href="https://docs.qq.com/desktop/">腾讯文档 (qq.com)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://shimo.im/welcome">石墨文档-企业在线协同办公系统平台,支持云端多人在线协作编辑文档和表格 (shimo.im)&lt;/a>&lt;/p>
&lt;h3 id="十开会">十、开会&lt;/h3></content><category scheme="https://kiwi4814.github.io/categories/2021/12/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/series/2021/12/windows%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8E%A8%E8%8D%90/" term="windows软件不完全推荐" label="windows软件不完全推荐"/><category scheme="https://kiwi4814.github.io/tags/2021/12/windows/" term="windows" label="windows"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/></entry><entry><title type="text">windows软件不完全推荐01—常用篇</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/windows-software-common/"/><id>https://kiwi4814.github.io/posts/2021/windows-software-common/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-12-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">前言 初衷：除了分享给大家之外，也用来备份大部分我平时使用频率很低的软件； 软件大家用着……</summary><content type="html">&lt;h2 id="前言">前言&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>初衷：除了分享给大家之外，也用来备份大部分我平时使用频率很低的软件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>软件大家用着舒服即可，本文旨抛砖引玉，同类型下在没有更好软件的时候可以考虑尝试；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关于软件的一些描述：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>代表源代码开放，可以放心使用；&lt;font style="background-color:#8bc34a">免费&lt;/font>仅指当前免费，不排除以后会商业化；&lt;font>付费&lt;/font>软件一般分为买断制或者订阅制；&lt;/p>
&lt;p>&lt;strong>当然有条件的话还是尽量支持正版。（&lt;del>&lt;a title="可ta卖的实在是太贵了....">🌚&lt;/a>&lt;/del>）&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>点击标题可跳转官网，下载的话一定去官网下载，其他版本都可能有风险；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="系统信息">系统信息&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>系统：Windows 10 专业版 21H2 19044.1387&lt;/p>
&lt;/li>
&lt;li>
&lt;p>时间：2021年12月01日&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="目录">目录&lt;/h2>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="正文">正文&lt;/h2>
&lt;h3 id="01-解压缩类">01. 解压缩类&lt;/h3>
&lt;h4 id="bandiziphttpswwwbandisoftcombandizip">&lt;a href="https://www.bandisoft.com/bandizip/">Bandizip&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：由Bandisoft出品（韩国开发商，他们家的几个软件都还不错）的Bandizip 是一个强大的多功能解压缩文件管理工具，它提供了高速的解压缩速度和其他各种实用功能。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：曾经尝试过很多解压缩软件，直到切换到Bandizip就再也没换过其他的了，无广告、无弹窗、多线程压缩，解决压缩包乱码问题的神器。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：从7.0版本开始&lt;font>收费&lt;/font>，建议使用6.29版即可。&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：使用6.29版本记得关闭自动更新。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：WinRar、&lt;a href="http://7-zip.org/">7-Zip&lt;/a>等等&lt;/li>
&lt;/ul>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211127161546420.png" alt="image-20211127161546420" style="zoom: 50%;" />
&lt;h3 id="02-浏览器">02. 浏览器&lt;/h3>
&lt;h4 id="microsoft-edgehttpswwwmicrosoftcomen-usedgefeaturesformmy01rzocidmy01rz">&lt;a href="https://www.microsoft.com/en-us/edge/features?form=MY01RZ&amp;amp;OCID=MY01RZ">MicroSoft Edge&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：微软在2020 年 1 月发布了基于 Chromium 的新版 Microsoft Edge（国内的大部分厂商的浏览器都是基于Chromium内核的，比如360浏览器、QQ浏览器，其本质就是Chrome），喜欢使用chrome的小伙伴可以考虑直接无缝迁移过来。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：操作系统自带的&lt;em>Chrome浏览器++&lt;/em>，对于小伙伴们来说最大的好处就是不需要代理就可以进行账号同步、密码管理、安装扩展等一系列操作，与windows深度集成，微软也一直在更新好用的功能，配合丰富的浏览器插件使用更加完美。&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：有机会的话单独再介绍一下我认为好用的浏览器插件&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：Google Chrome、Mozilla Firefox（喜欢火狐的可以尝试&lt;a href="https://www.runningcheese.com/">runningcheese&lt;/a>）&lt;/li>
&lt;/ul>
&lt;h3 id="03-阅读器">03. 阅读器&lt;/h3>
&lt;h4 id="sumatrapdfhttpswwwsumatrapdfreaderorgfree-pdf-reader">&lt;a href="https://www.sumatrapdfreader.org/free-pdf-reader">SumatraPDF&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：一款开源免费、超级小巧、快速快捷的Windows平台阅读器，不仅支持PDF格式，也支持 XPS、DjVu、CBZ、CBR 格式。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：启动非常快、占空间小&amp;amp;便携（只有6M左右，U盘必备）、支持的格式多（支持电子书，漫画等都可以看）&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：本机使用直接安装exe即可，放U盘下载个Portable version。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：对PDF其他要求的（比如文档注释、编辑、转换、合并和水印签名等）可以看后续的办公类软件中的推荐，一般我默认开启PDF的软件是SumatraPDF，同时会额外安装一个更加专业的PDF处理软件用于复杂的需求。&lt;/li>
&lt;/ul>
&lt;h3 id="04-启动器">04. 启动器&lt;/h3>
&lt;h4 id="woxhttpsgithubcomwox-launcherwox">&lt;a href="https://github.com/Wox-launcher/Wox">Wox&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：一个非常简单的程序启动器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：刚开始用电脑的时候，都是直接双击桌面上的图标打开软件，时间久了桌面上的图标会越来越多也越来越乱，以至于开一个软件要找很久的快捷方式。后来发现了Wox这个启动器，可以直接通过键盘启动程序、查找文件（默认集成everything）、搜索网页、使用计算器等等。&lt;strong>最重要的是，可以还我一个干净的桌面&amp;amp;挑选自己喜欢的壁纸。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：键盘&lt;code>Alt+Space&lt;/code>按下后输入想要做的事就可以了。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/NPfw6S1j8OhCp7k.gif" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：同类的软件有很多，比如说&lt;a href="https://www.launchy.net/">Launchy&lt;/a>，&lt;a href="https://www.listary.com/">Listary&lt;/a>，&lt;a href="https://docs.microsoft.com/zh-cn/windows/powertoys/">Power Toys&lt;/a>等等。值得一提的是，Power Toy是微软官方出的，算是微软认识早自己系统不足之后钦点的官方启动器了，虽然没有集成everything（但是也同样包含文件检索，需要实现设置好索引，感觉没有everything好用），但也加了很多有意思的功能，尚可一试。&lt;/p>
&lt;blockquote>
&lt;p>微软可能是看到了开源软件的各种优势，终于重新拾起了时隔许多年的PowerToys项目，将一些GitHub上的小工具集成到了这款效率工具中。PowerToys包含很多工具，例如能够改变窗口布局的FancyZones、能够调整图片尺寸的Image Resizer、能够丰富批量文件重命名的Power rename，以及照抄Wox的PowerToys Run等等。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h4 id="utoolshttpsutools">&lt;a href="https://u.tools/">utools&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：uTools 是一个极简、插件化的现代桌面软件，通过自由选配丰富的插件，打造得心应手的工具集合。说白了就是一个工具箱，集成各种小工具，开启软件、搜索网页、翻译、计算、记录备忘等等都可以通过它来完成而非手动一步一步操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：如果你喜欢用MacOS，那你一定知道Alfred，它基本上替代了苹果自家的Spotlight，在我看来，上面说的Wox及其同类软件做的就是Spotlight做的事情，而utools想做的是Alfred，虽然相比于万能的Alfred还逊色很多，但总归有这样的软件出现了，希望能越做越好。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/11/29/wD7RhGYyEpFImTo.png" alt="image-20211129213706647">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>使用，升级VIP有更多功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：与大部分启动器一样，&lt;code>Alt+Space&lt;/code>触发（快捷键可自由设置）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.launchy.net/">Launchy&lt;/a>，&lt;a href="https://www.listary.com/">Listary&lt;/a>，&lt;a href="https://docs.microsoft.com/zh-cn/windows/powertoys/">Power Toys&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="fenceshttpswwwstardockcomproductsfences">&lt;a href="https://www.stardock.com/products/fences/">Fences&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Fences也被称为栅栏桌面，是著名的Stardock公司推出的一款软件。Fences栅栏桌面可以将不同的图标放到不同的“容器”当中，使用者还可以移动和拉伸这个“容器”。这样将图标分类以后，桌面再也不会看起来一团糟了。它还提供了一个有趣的功能：双击桌面，隐藏所有图标；再次双击桌面，显示所有图标。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：虽然使用启动器代替了文件检索和程序开启，但总有些文件夹、文件或者快捷方式需要放到桌面的，这时候就需要Fences来帮我整理了。将桌面切成一块块矩形区域，每一块放置不同类型的文件，不用的时候双击隐藏，用到的时候随时打开即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>，推荐官网试用，想入正的话steam购买，价格只有官方网站的一半。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：使用起来非常简单，在桌面上绘制一个矩形，然后进行分类即可；双击隐藏所有文件（也可以设置哪些区域不隐藏）。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2021/12/05/ROAW86uwKnJ1LBF.png" alt="image-20211205165111007">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://guanjia.qq.com/product/zmzl/">腾讯桌面&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="05-效率类">05. 效率类&lt;/h3>
&lt;p>效率类的软件有很多，包括上一节介绍的启动器也可以说是效率类的一种，这些软件的功能并不是完全相互独立的，甚至很多重复的功能，找到自己喜欢的那款就好，如果过度执着于使用这些软件，很可能会起到反效果，自然也就无法提高效率了。&lt;/p>
&lt;p>有些软件是潜移默化的改变我的工作和学习习惯的，比如下面的everything、ditto、aText等，而有些软件则是属于锦上添花，会用可以极大的提高效率，不会用也最多就是鼠标多点几下的事情。&lt;/p>
&lt;h4 id="everythinghttpswwwvoidtoolscomzh-cn">&lt;a href="https://www.voidtools.com/zh-cn/">Everything&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：&lt;strong>Everything&lt;/strong>是voidtools开发的一款文件搜索工具，官网描述为&amp;quot;基于名称实时定位文件和目录&amp;quot;。它体积小巧，界面简洁易用，快速建立索引，快速搜索，同时占用极低的系统资源，实时跟踪文件变化，并且还可以通过http或ftp形式分享搜索。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：好用，Windows必装软件。配合Wox或者其他启动器找文件非常方便。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：建议搭配启动器使用&lt;/li>
&lt;/ul>
&lt;h4 id="dittohttpsditto-cpsourceforgeio">&lt;a href="https://ditto-cp.sourceforge.io/">Ditto&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Ditto 是一款强大的Windows 剪贴板增强工具，免费、开源、支持中文，而且还有免安装的绿色版本。 开启Ditto 后，不会有任何程序界面出现，它只是默默地在系统右下角弹出了一个蓝色的托盘图标，这时候你复制任何内容到剪贴板都会被Ditto 一一记录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：经常需要复制粘贴的小伙伴应该都有类似的需求，比如需要连续复制多段文字，或者最近复制过的东西想要再次使用的，都可以通过这款软件实现，支持文字和文件，并且能够检索。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：设置好自己熟悉的快捷键，比如我自己设置的时&lt;strong>Ctrl+`&lt;/strong>，当我想要使用的时候快速呼出，方向键选择或者直接搜索后按Enter即可。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/KIbCoPnzO891Eje.gif" alt="动画">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：windows自带的&lt;code>Win+V&lt;/code>、开源软件CopyQ，此外还有多平台支持的云剪切板工具&lt;a href="https://clipber.com/">快贴&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="atexthttpswwwtrankynamcomatext">&lt;a href="https://www.trankynam.com/atext/">aText&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：aText 是一款文字输入效率工具，可以配置常用的文本、代码模板、邮件模板等，并通过短语形式进行触发替换。国内的同学可能听过名气更大的 TextExpander，但是 TextExpander 改成订阅制后性价比极低，且很多细节甚至没有 aText 打磨的精细，所以个人更推荐 aText。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：如果ditto解决了我剪切板的问题，aText能够帮我做的就是记住我常用的短语。比如说我的一些邮箱号码、短语、脚本，常用的邮件模板等等，都可以事先维护好，然后在用到的时候快速找到。另外比如python脚本、shellScript、日期、随机密码等等高阶用法也都非常好用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>版本已经够用，深度使用可以尝试付费版（USD 4.99）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：两种，一种是快捷键呼出搜索常用短语，另外一种是设置快捷短语，比如我输入&lt;code>@163&lt;/code>这四个字符的时候，就会快速把我的网易邮箱替换上去，非常方便。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2021/12/06/MbLpdKgjJCVmOHc.gif" alt="1">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：几乎所有的输入法都带有自定义短语的功能，上面说的邮箱、电话也是可以实现的，但是d动态渲染、脚本之类的就不支持了；此外还有&lt;a href="https://textexpander.com/download">TextExpander&lt;/a>，价格太贵，同样不推荐。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="quickerhttpsgetquickernet">&lt;a href="https://getquicker.net/">Quicker&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Quicker 是一款 Windows 平台的效率工具，由独立开发者 &lt;a href="https://www.weibo.com/cuiliang123">@崔亮&lt;/a> 开发。Quicker 的使用逻辑和软件启动器比较接近，在快捷调用的基础上增加了更深度的功能。它的亮点在于用户可以通过&lt;strong>可视化编程&lt;/strong>的方式编写属于自己的动作，官方共享库中有意思的动作也是层出不穷，堪称 Windows 上的快捷指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：Windows工作流的集大成者，将一套指令做成动作库。比如说有人发给我一张图片，里面的文字，我想要识别出里面的文字并使用Google搜索相关信息，正常我需要OCR识别，打开浏览器开始搜索，使用Quicker的话只需要触发一个动作即可。当然这是很基础的应用了，可以去官网的动作库去查看更多复杂的指令。&lt;/p>
&lt;p>&lt;em>其实这个软件和上面的很多功能都有重叠，尤其是utools，都是集合了很多丰富功能的效率软件，但是Quicker侧重点在于工作流，utools本质还是启动器+工具。即便如此，要用的话只需要选一个使用就可以了。&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/apOHgyohsntqX2Q.png" alt="image-20211205173110301">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：免费使用，但有限制，收费的话是&lt;font>订阅制&lt;/font>的形式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：因为是国人开发，官网文档教程非常详细，我不算深度用户，这里贴几篇文章吧。&lt;/p>
&lt;p>&lt;a href="https://sspai.com/post/47776">Quicker -- 一种全新的Windows效率神器&lt;/a>
&lt;a href="https://sspai.com/post/53336">在 Windows 里实现 6 个不为人知的文件操作&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/48181379">Quicker -- 新一代Windows效率神器 &lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="quicklookhttpsgithubcomql-winquicklook">&lt;a href="https://github.com/QL-Win/QuickLook">QuickLook&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Windows上的一款快速预览软件，选中文件，按下空格就可以快速查看文件的内容了。支持图片、视频、压缩文件、PSD等，通过插件还可以支持预览Office、epub、apk等等。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：MacOS带来的恶习，打开文件之前总要先空格按下去看看里面是啥，于是在windows上也找到了类似的软件。与之相似的还有Seer，设置和功能更加丰富，但是预览速度略慢一点，见仁见智即可。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：单击想要查看的文件，按下空格松开就可以预览了。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="http://1218.io/">Seer&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="total-commanderhttpswwwghislercom">&lt;a href="https://www.ghisler.com/">Total Commander&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Total Commander 是一款应用于Windows 平台的文件管理器 ，它包含两个并排的窗口，这种设计可以让用户方便地对不同位置的“文件或文件夹”进行操作，例如复制、移动、刪除、比较等，相对Windows 资源管理器而言方便很多，极大地提高了文件操作的效率，被广大软件爱好者亲切地简称为：TC 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：一直在被安利这款软件，每次下载完感觉学习成本太高了就弃用了，直到第N次重装系统之后，潜心学习了一下，才发现这款软件的强大之处。如果你是个程序员或者囤囤鼠，喜欢在电脑里存储大量的资源，并且不怕折腾的话，这款软件将极大的方便你整理资料的速度，虽然界面古朴了一点，但是确实非常好用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>，可以找到各种&lt;del>破解版&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：&lt;a href="https://xbeta.info/studytc/">教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://doc.qt.io/">Q-Dir&lt;/a>、&lt;a href="https://www.xyplorer.com/">XYplorer&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="anytxt-searcherhttpsanytxtnet">&lt;a href="https://anytxt.net/">AnyTXT Searcher&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：AnyTXT Searcher是一款功能强大的本地数据全文搜索引擎，就像本地磁盘Google搜索引擎一样，它是文件搜索工具Everything作者推荐的文档和文本内容搜索工具。简单来说就是everything检索文档名称，AnyTXT Searcher检索文档内容，支持纯文本、Office文档、PDF、电子书的检索。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：这个软件本应该放在工具类推荐的，因为使用频率真的很低。不过作为和everything互补的一款软件，放在这里也没什么问题。使用场景的话，大概就是忘记了文件名字但是记得大概内容的时候可能会用？反正我基本没用到过。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：不常用的话记得关闭开机自启。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.textseek.net/cn/">TextSeek&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="06-图像视频类">06. 图像视频类&lt;/h3>
&lt;h4 id="honeyviewhttpswwwbandisoftcomhoneyview">&lt;a href="https://www.bandisoft.com/honeyview/">honeyview&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>： 蜂蜜浏览器Honeyview 是一款快速的图片查看器，Bandisoft出品（上面介绍的解压缩软件也是）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：一般来说我们用Windows系统自带的图片查看器就足以查看各种图片格式，比如JPG、PNG、GIF等格式，但要查看PSD、RAW等格式就比较麻烦了。我一般使用Honeyview替代默认图片浏览器，主要支持的特色功能有：查看WEBP、PSD、RAW等多种格式，无边框浏览，预览压缩包内图片以及批量编辑图片等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：作为默认的图像浏览器使用即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://imageglass.org/">ImageGlass&lt;/a>等等等等等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="eaglehttpscneaglecool">&lt;a href="https://cn.eagle.cool/">Eagle&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Eagle 是国人开发的一款图片管理软件，借助 Eagle 软件，设计师可以方便的创建，专属自己的设计素材库、灵感库，在这个线上素材管理越来越不靠谱的今天，一个线下本地的专业素材管理软件，是最靠谱的！&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：工作非设计师，不过喜欢收集壁纸、美图、表情包等等（仓鼠的本质）。配合浏览器插件以及云盘同步，收藏和管理图片非常方便。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font>付费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：由于是国人开发，官方文档非常详细，使用方法也很简单，安装浏览器插件，遇到喜欢的图片拖一下就可以保存了。在软件管理界面可以设置分类、标签、文件夹等等。&lt;/li>
&lt;/ul>
&lt;h4 id="sharexhttpsgetsharexcom">&lt;a href="https://getsharex.com/">ShareX&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>： &lt;em>ShareX&lt;/em> 是一款开源的截图录屏工具，支持截图，录制视频，录制Gif，也支持图片上传，拾色器等功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：功能非常齐全，如果你只用一款截图软件，那么推荐你用这个，特色功能：截图后上传到图床、截图后自动OCR、也可以直接录屏或者GIF（第一次使用会提示你下载FFmpeg ）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后设置常用的快捷键以及截图后的默认动作，比如我一般设置快捷键为Ctrl+Shift+A，录屏为Ctrl+Shift+PrintScreen，截图后复制到剪切板。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211127181335391.png" alt="image-20211127181335391">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：Snipaste，FastStone等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="screentogifhttpswwwscreentogifcom">&lt;a href="https://www.screentogif.com/">ScreenToGif&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：ScreenToGif 是一款录制屏幕、摄像头、画板于一身的 GIF 制作软件。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：虽然有很多软件可以制作Gif（比如上文的ShareX也可以），但是仍然要推荐一下这个，小而精，功能非常强大，本文的一些演示gif即是用本软件录制而成。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：以录制Gif来说，点击录制后框选要录制的范围，录制完成后可以逐帧进行编辑，最后输出为gif，中间还有很多高级选项可以自己研究。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.bandisoft.com/honeycam/">Honeycam&lt;/a>，&lt;a href="https://gifcam.en.softonic.com/download">GifCam&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="tiantuoocr">TianTuoOCR&lt;/h4>
&lt;p>天若OCR免费版由于接口限制太严重已经不如之前那么好用，OCR软件在办公篇单独推荐。&lt;/p>
&lt;h3 id="07-影音类">07. 影音类&lt;/h3>
&lt;h4 id="potplayerhttpspotplayerdaumnet">&lt;a href="https://potplayer.daum.net/">PotPlayer&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：PotPlayer 是KMPlayer 的原制作者姜龙喜先生（韩国）进入Daum 公司后的新一代网络播放器。 PotPlayer 的优势在于强大的内置解码器；而KMPlayer 的优势在于强大的定制能力和个性化功能。 PotPlayer 使用VC++ 编写， KMPlayer 为Delphi 编写。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：电脑上的离线播放器，是我用了很多年也不打算换的一个，曾经痴迷于折腾这个软件的皮肤、徽标、字幕、滤镜、直播源等，功能非常强大，配置也十分丰富，是PC观看高清影视剧的不二之选。最近更新支持从subHD直接检索字幕，很方便。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：默认快捷键与其他播放器不太一样，比如双击暂停、右键选项菜单、鼠标中键切换全屏等，不习惯的可以自定义。另外，倍速播放、切换音轨、切换字幕都是很方便的快捷键，可以自行搜索下，记住常用的即可。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：KMPlayer 、迅雷影音等&lt;/li>
&lt;/ul>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211127164723187.png" alt="image-20211127164723187" style="zoom:67%;" />
&lt;h4 id="yesplaymusichttpsgithubcomqier222yesplaymusic">&lt;a href="https://github.com/qier222/YesPlayMusic">YesPlayMusic&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：高颜值的第三方网易云播放器。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/2TvV3RA41xSltW6.png" alt="image-20211202221610043">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：最近发现的一个三方客户端，颜值很高，喜欢折腾的可以去尝试&lt;a href="https://github.com/revincx/UnblockNeteaseMusic">UnblockNeteaseMusic&lt;/a>，这样最头疼的版权问题也能解决，顺便还支持Last.fm，喜欢看数据的话可以关联一下。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/oFzmsPybitjfckw.png" alt="image-20211202221406255">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：设置中可以登录网易云账号，音质改成无损，全局快捷键开关酌情选择开启或者关闭，不然发现自己其他软件的快捷键莫名其妙不能用了而干着急。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：Apple Music、Spotify等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="哔哩哔哩uwphttpswwwshowdoccomcnbiliuwpv4">&lt;a href="https://www.showdoc.com.cn/biliuwpv4">哔哩哔哩UWP&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：此应用是哔哩哔哩第三方UWP客户端！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：相比于丑到爆的官方UWP，这款第三方客户端感觉体验上更像手机客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：电脑上看B站一般直接用网页了，触屏或者喜欢UWP客户端式体验的可以考虑&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：如果喜欢在线追剧，爱奇艺UWP版本也是没有广告的。&lt;/p>
&lt;p>&lt;strong>此外，如果你的系统是Windows11，那么也有相应的三方版——&lt;a href="https://github.com/Richasy/Bili.Uwp">Richasy/Bili.Uwp: 适用于新系统UI的哔哩 &lt;/a>，功能更为强大，不过目前还在开发阶段，需要手动安装。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="08-下载类">08. 下载类&lt;/h3>
&lt;h4 id="internet-download-managerhttpswwwinternetdownloadmanagercom">&lt;a href="https://www.internetdownloadmanager.com/">Internet Download Manager&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：一般简称IDM，一款超级强大的http/ftp下载工具，能和浏览无缝配合，自动抓取网页视频，缺点是不支持bt和磁力链接下载。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：除了下载就没有其他功能的一个软件，潜移默化的改善你的冲浪体验。配合浏览器扩展无缝接管大部分网页的下载，多线程且速度快，非常好用。&lt;/p>
&lt;p>我一般常用来：嗅探各大视频网站（B站、油管、直播等等），接管浏览器百度盘、城通盘的下载，此外，还可以正则抓取网页的所有资源（比如喜欢某网页的图片又不想一张一张保存，可以批量抓取）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>买断制&lt;/font>，官方售价25刀，国内有各种代理商和&lt;del>破解版&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后会提示你安装浏览器插件，按照指引操作即可。此外在选项-连接可以设置线程数（一般32即可），这样可以快速下载百度云的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.neatdownloadmanager.com/">NeatDownloadManager（免费）&lt;/a>、&lt;a href="https://www.freedownloadmanager.org/zh/">Free Download Manager（免费）&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="qbittorrenthttpswwwqbittorrentorg">&lt;a href="https://www.qbittorrent.org/">qBittorrent&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：QBittorrent是一个新的轻量级BitTorrent客户端，可运行于Linux、windows及其他可能系统，它简单易用，漂亮的外观，功能强大。 现在它可以被视为一个良好的替代其他BitTorrent软件的客户端。 软件自带简体中文。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：由于IDM只支持Http下载，所以还需要一款BT下载软件，BT下载的同类软件基本都大同小异，一般装一到两个即可。我的电脑中装了三个，迅雷（很少用，但有些资源不得不用）、比特彗星（没有迅雷那么浏览，BT下载的话很推荐，但是一般PT站是不允许使用比特彗星的）和这款QBittorrent（几乎所有的PT站点都支持，而且性能强大）。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：打开&lt;code>.torrent&lt;/code>后缀的文件&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：&lt;a href="https://www.utorrent.com/">uTorrent&lt;/a>、&lt;a href="http://www.bittorrent.com/">BitTorrent&lt;/a>、&lt;a href="https://deluge-torrent.org">Deluge&lt;/a>、&lt;a href="https://transmissionbt.com/">Transmission&lt;/a> 等&lt;/li>
&lt;/ul>
&lt;h3 id="09-系统类">09. 系统类&lt;/h3>
&lt;h4 id="adguardhttpsadguardcomzh_cnwelcomehtml">&lt;a href="https://adguard.com/zh_cn/welcome.html">Adguard&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：AdGuard 是拥有可获取最佳网络冲浪体验所需全部功能的独特程序。其集合了世界上最高级的广告拦截器，隐私保护模块以及家长控制为一体，还可协同任何浏览器和应⁠用工⁠作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：全平台可用+广告拦截器+隐私保护+脚本管理，可以拦截网页的广告，甚至是一些视频的广告。此外，服务器端的AdGuardHome是开源的，不过功能也相对较少，只能通过DNS拦截，家里有软路由的一般都会装一个，从路由器层面拦截恶意广告。&lt;/p>
&lt;p>【&lt;strong>从技术上来讲，它可以接管你的所有流量，所以不放心其安全性的千万不要使用哈。&lt;/strong>】&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font>买断制&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装软件后，记得安装Edge浏览器插件。在设置中可以开启隐私保护以及URL过滤等。家长模式可以防止恶意安装exe以及NSFW内容过滤。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：火绒（与火绒的区别在于火绒只是拦截一些软件的弹窗广告，而且是广告出来后才拦截），不过火绒胜在免费。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="dismhttpswwwchuyumezh-hans">&lt;a href="https://www.chuyu.me/zh-Hans/">Dism++&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Dism++ 是一款 Windows 系统管理优化工具，它解决了我们安装、维护系统的一大痛点问题——自定义设置和优化。相当于一个 “一站式” 管理优化工具集。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：集成了一些系统本身就有但是隐藏很深的功能，比如右键菜单的管理、去除快捷方式小箭头，清理WinSxS组件等。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：安装完系统后，想清理下C盘或者任何时候心血来潮的时候打开使用就好了。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：各种系统管理大师&lt;/li>
&lt;/ul>
&lt;h4 id="geekhttpsgeekuninstallercom">&lt;a href="https://geekuninstaller.com/">Geek&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Geek Uninstaller是一个免费的专业的卸载软件，采取深而快的扫描方式，删除你电脑上多余的东西。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：除了卸载软件之外没有任何花里胡哨的功能，同样是调用软件本身的方式卸载，与Windows控制面板不同的是，geek卸载完软件后，会自动检查清理注册表和无用的文件。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/li>
&lt;li>&lt;strong>使用方法&lt;/strong>：本身不需要安装，就是一个单文件，用的时候双击打开使用即可。&lt;/li>
&lt;li>&lt;strong>同类软件&lt;/strong>：Total Uninstall、IObit Uninstaller等&lt;/li>
&lt;/ul>
&lt;h3 id="10-云笔记">10. 云笔记&lt;/h3>
&lt;p>相信大家都有自己的一款笔记软件，从最早的Google Keep、OneNote、Evernote，到现在异军突起的各类知识库软件，云笔记也越来越卷。为了能找到满足我的所有&amp;quot;需求&amp;quot;的一款软件，我试了十几种当下流行的笔记类，并深入体验了其中一些之后，抛开程序员专属的一些，不负责任的推荐几个。&lt;/p>
&lt;p>顺便说一下我的需求，方便小伙伴们参考。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>支持离线浏览&lt;/strong>——数据放在自己手里最安全，没有网络的世界同样也可以很精彩&lt;/li>
&lt;li>&lt;strong>全平台&lt;/strong>——至少支持windows、mac os以及网页端，有app更好&lt;/li>
&lt;li>&lt;strong>云同步&lt;/strong>——方便随时随地能够看到自己的笔记&lt;/li>
&lt;li>&lt;strong>支持markdown&lt;/strong>——markdown现在已经不是程序员专属了，用习惯的话你肯定也会爱不释手&lt;/li>
&lt;/ul>
&lt;p>此外，&lt;strong>双链、数据库、服务器在国内还是国外、免费亦或者收费的方式、脑图&lt;/strong>等等都是非常锦上添花的功能。&lt;/p>
&lt;h4 id="typroahttpstyporaio">&lt;a href="https://typora.io/">Typroa&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Typora是一款轻便简洁的Markdown编辑器，最大的特点是即时渲染技术，这也是与其他Markdown编辑器最显著的区别。这使得你写Markdown能像写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：尝试过很多Markdown软件，这个是最好用的。从内测用到现在，定制化越来越强，bug也越来越少。如果你讨厌笨重的Word但是写东西的时候喜欢层次分明的，可以试试Markdown语言。&lt;/p>
&lt;p>本文就是基于Markdown语法完全在Typroa完成的，支持导出PDF、Html，搭配Pandoc还可以导出更多丰富的格式，如Word、Epub、OPML等。&lt;/p>
&lt;p>如果你不知道Markdown但是对这个软件有点兴趣，可以看下&lt;a href="https://sspai.com/post/54912">这篇文章&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：1.0版本后开始&lt;font>收费&lt;/font>（买断制国内89），当然可以直接使用0.11.18的&lt;font style="background-color:#8bc34a">免费&lt;/font>版，功能已经非常完善。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：本身并不算云笔记的分类范畴，但是如果你喜欢markdown，那么一定要试试这款软件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="notionhttpswwwnotionso">&lt;a href="https://www.notion.so/">Notion&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：&lt;strong>Notion&lt;/strong>是一款提供笔记、任务、数据库、看板、维基、日历和提醒等组件的应用程序。用户可以将这些组件连接起来，来创建自己的系统，用于知识管理、笔记记录、数据管理、项目管理等。这些组件和系统可以单独使用，也可以与他人进行跨平台协作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：非常出色的一款软件！！！但我觉得Notion的与众不同之处在于其丰富的&lt;strong>可定制化&lt;/strong>以及&lt;strong>数据看板&lt;/strong>，目前这是无可替代的，也是我一直在用的原因。&lt;/p>
&lt;p>我使用Notion一般用来做数据库，比如管理我近期要追的剧、管理我的工作计划，管理我订阅的软件/服务并设置提醒。此外，通过Notion还可以设计自己的个人主页，组合不同的模板以及自己的作品并进行分享。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/Gdox5by4l8HhjPI.gif" alt="atext2">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>一般够用，深度用户可选择性订阅（EDU邮箱可申请专业版，非常良心）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：入门有一定门槛，想要尝试的话建议找个B站入门视频看看。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缺点&lt;/strong>：不支持离线！！需要网络才可以打开，而且服务器在国外，网络不好的慎用！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="语雀httpswwwyuquecom">&lt;a href="https://www.yuque.com/">语雀&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：「语雀」是一个「专业的云端知识库」，孵化自 &lt;a href="https://www.antfin.com/?deer_tracert_token=cc478126-c93a-459b-a448-dd41de67f2d4">蚂蚁集团&lt;/a> ，是 &lt;a href="https://www.yuque.com/yubo/explore/tcaywl?deer_tracert_token=cc478126-c93a-459b-a448-dd41de67f2d4">体验科技&lt;/a> 理念下的一款创新产品，已是 10 万阿里员工进行文档编写、知识沉淀的标配。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：阿里出品，质量有保障。开启速度快，支持markdown、word、excel以及各种图表，非常易于上手，当然也能实现各种复杂的需求。如果有人要我推荐一款云笔记，我一定会优先推荐这个。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>有上传量限制（一般够用），付费可购买更多&lt;/li>
&lt;/ul>
&lt;h4 id="obsidianhttpsobsidianmd">&lt;a href="https://obsidian.md/">Obsidian&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>软件简介&lt;/strong>：Obsidian 是一款支持 macOS、Windows、Linux 多平台的 Markdown 编辑器，同时也支持双向链接，带有效果相当惊艳的网状笔记视图，它还支持标签管理、多种插件（例如日记、实时预览、星标、自定义 CSS 样式等）。&lt;/li>
&lt;li>&lt;strong>我的理由&lt;/strong>：为什么不用语雀而选择了Obsidian，最主要的是因为本地离线管理，切换成本很低，因为我的所有笔记都是以md文件的形式存放在本地以及云盘的，Obsidian只需要打开我原有的目录就可以进行工作了。在此基础上，Obsidian 有着非常非常丰富的第三方插件，拥有无限可能。&lt;/li>
&lt;li>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>【有收费机制，不过无需付费也可正常使用全部功能】&lt;/li>
&lt;/ul>
&lt;p>除了以上推荐的这些，此外，同样非常强大对标Obsidian的&lt;a href="https://b3log.org/siyuan/download.html">思源笔记&lt;/a>以及偏向程序员使用的&lt;a href="https://logseq.com/">Logseq&lt;/a>都是很优秀的笔记软件。由于我并没有更加深入的体验（知识库的导入和维护比较耗精力），所以不细说了。&lt;/p>
&lt;p>&lt;em>另外，由于没有找到完全符合我所有需求的一款云笔记，所以最终我的方案变成（仅供参考）：&lt;/em>&lt;/p>
&lt;ol>
&lt;li>**笔记管理：**以Obsidian为主，主要用来做双链、知识图谱以及丰富的第三方插件实现各种功能，移动端同样也是Obsidian；&lt;/li>
&lt;li>**云同步：**由于Obsidian的管理方式是以离线md为主的，所以文件的控制权实际在我手中的，我设置了Google Drive同步以及提交到Github上；&lt;/li>
&lt;li>&lt;strong>离线编辑器&lt;/strong>：在写作、写博客的输出过程中，以typora为主，所见即所得实在是太好用，无法舍弃；&lt;/li>
&lt;li>**数据库Database：**仍然以Notion为主，主要管理自己的软件订阅、观影记录以及游戏记录等等个人文件。此外，GTD也是Notion来做的，主要记录日常办公事项、会议纪要、备忘等。&lt;/li>
&lt;li>&lt;strong>当然了，没有这么多要求的，语雀真的就很好用了。&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h3 id="11-云存储">11. 云存储&lt;/h3>
&lt;blockquote>
&lt;p>这部分没有详细的软件推荐，只提供几种思路。&lt;/p>
&lt;/blockquote>
&lt;p>现在喜欢摄影、vlog和剪视频的年轻人越来越多，对存储空间的要求也越来越大，尤其是有了孩子后，空间就更不够用了。大家都希望自己的这些&amp;quot;电子宝贝&amp;quot;能以更安全的方式存储在某个地方，在用到的时候可以随时使用。于是，越来越多的云存储（早就）开始兴起，成熟的解决方案一抓一大把，国内有&lt;a href="https://cloud.baidu.com/">百度云&lt;/a>、&lt;a href="https://www.aliyundrive.com/">阿里云&lt;/a>、&lt;a href="https://www.weiyun.com/">腾讯微云&lt;/a>、&lt;a href="https://www.jianguoyun.com/">坚果云&lt;/a>、&lt;a href="https://www.lanzou.com/">蓝奏云&lt;/a>、&lt;a href="https://cloud.189.cn/">天翼云&lt;/a>....国外有&lt;a href="https://www.dropbox.com/">Dropbox&lt;/a>，&lt;a href="https://www.microsoft.com/en-us/microsoft-365/onedrive/online-cloud-storage">OneDrive&lt;/a>，&lt;a href="https://www.google.com/drive/">GoogleDrive&lt;/a>，&lt;a href="https://www.icloud.com/">iCloud&lt;/a>，&lt;a href="https://www.box.com/home">Box&lt;/a>等等等等。&lt;/p>
&lt;p>这里不会去对比每一款的特点和价格，也不会讨论数据安全方案相关，只是基于我个人的观察和身边小伙伴的一些需求介绍几种解决方案：&lt;/p>
&lt;p>&lt;strong>（1）只想要云备份&lt;/strong>&lt;/p>
&lt;p>如果你只是想让自己的文件有“另外一个安身之地”，那么基本上国内任意一个网盘都能满足你的需求。上传速度一般不会额外限制，但是下载速度快并且无限制的就要买空间，免费空间足够大的则要买下载速度，各家基本大同小异，选择顺眼的用就行了。&lt;/p>
&lt;p>硬要说的话苹果系可以选择服务器架设在贵州的iCloud，非苹果的可以尝试下最近在推广阶段的阿里云盘。&lt;/p>
&lt;p>&lt;del>话说这样的话，自购硬盘不是更好&lt;/del>&lt;/p>
&lt;p>&lt;strong>（2）多设备数据同步&lt;/strong>&lt;/p>
&lt;p>如果你下班的时候不希望背着笨重的电脑，但是&lt;del>想要加班&lt;/del>的时候不想去公司的话，可以试试这种方案（前提是公司允许并且有这个条件）。其本质就是将你设定的某个文件夹在多个设备上实时保持同步，支持历史版本。&lt;/p>
&lt;p>这种国内最好用的应该是坚果云，是同步文件、笔记等不怎么占空间的数据的最佳选择，但是如果要同步的数据量较大就要付费了（上传每月限制1G）；如果你使用office 365的话，可以尝试&lt;em>OneDrive&lt;/em>，深度集成windows，空间足够大，不足之处在于不能选择已有的文件夹同步；如果你喜欢Google全家桶，那么可以使用&lt;em>Google Drive&lt;/em>（配合国外edu邮箱可以做到无限空间）。&lt;/p>
&lt;p>&lt;strong>（3）支持Webdav（第三方应用可以读写）&lt;/strong>&lt;/p>
&lt;p>一般来说有这种需求的都是应用数据的备份，比如软件配置、浏览器书签、账号设置等等，这种一般单独注册一个支持Webdav的网盘即可，对空间和速度的要求都不高。比如我用坚果云备份了一些软件的配置信息防止电脑重装配置丢失；在我切换chrome和edge浏览器期间，一直使用box配合浏览器插件实时同步两个浏览器的所有书签。&lt;/p>
&lt;p>支持Webdav的网盘国内有坚果云、城通，国外有Dropbox，Box等，此外NAS和Seafile也同样支持。&lt;/p>
&lt;p>&lt;strong>（4）你有自己的云服务器&lt;/strong>&lt;/p>
&lt;p>你都有服务器了，还..&lt;span alt="hide">搭建一个Seafile就可以实现存储、同步、协同等上述各种功能了&lt;/span>&lt;/p>
&lt;p>&lt;strong>（5）“终极”解决方案&lt;/strong>&lt;/p>
&lt;p>最重要的数据，当然放在自己手里最靠谱，云存储的本质也只是你的数据某地某机房的某块硬盘里安安静静躺着而已。所以如果&lt;del>家里有这个条件的&lt;/del>，可以自己买硬盘存储，当然了，自购硬盘也会有诸多问题，要拆主机安装、电脑要开着才能使用、无法在家里之外的环境使用....这种方式更适合冷备份。&lt;/p>
&lt;p>如果想要一个随时随地都可以访问到的“云空间”，最好的解决方案就是自己搭建/购买一个NAS。&lt;/p>
&lt;details>
&lt;summary>对NAS感兴趣的话点开观看&lt;/summary>
&lt;br>
NAS，全程是网络附属存储，本质就是你的另一台电脑，里面搭载着你想要用来存储数据的硬盘。我们知道系统不止有Windows，还有MacOS，Linux等，这类系统的主要功能是娱乐和办公，NAS也可以理解成为一类操作系统，只不过它的主要功能就是存储和文件管理。目前最主流的NAS系统有群晖DSM，威联通QTS，万由U-Nas，FreeNAS，UNRAID等等，其中最出名的就是群晖DSM和威联通QTS，他们是提供全套解决方案的，购买后插上硬盘就可以使用了。
&lt;br>&lt;br>
再说回存储，我们知道硬盘是有寿命的，尤其是固态硬盘。我们一般使用机械硬盘来备份数据，但即使是机械硬盘也会因为各种原因损坏，所以有了RAID这个东西，中文名叫磁盘阵列。它的作用简单来说就是将几块硬盘并作一块，就算硬盘坏了一个，你的数据也不会丢失。此外，还可以提高数据读写速度、提供数据容错等功能。拿我的个人经验来说，我会拿两块4T的硬盘组成RAID1（这样实际可用空间是4T）来存储我最重要的数据（照片、视频、文章、个人资料等），剩下几块单独使用即可（一般会放影视资源以及一些我觉得即使丢了也无所谓的数据）。至于如何挑选硬盘就是另外一个话题了，这里不做讨论。
&lt;br>
&lt;/details>
&lt;h3 id="12-其他类">12. 其他类&lt;/h3>
&lt;h4 id="clash-for-windowshttpsgithubcomfndroidclash_for_windows_pkgreleases">&lt;a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">Clash for windows&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Clash是一个 Go 语言开发的多平台代理客户端，本软件为Clash 的 Windows图形客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：全局流量代理，界面符合审美，自定义规则&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/BUgi42AudjGprmP.png" alt="image-20211202235657168">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">开源免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：本软件不提供服务器信息，URL 及配置文件都由服务商提供，在clash中导入即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同类软件&lt;/strong>：SS、SSR、V2ray等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="wallpaper-engine">Wallpaper Engine&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：Wallpaper Engine是由Kristjan Skutta所开发的一款动态壁纸软件，支持各种类型的壁纸，包括2D和3D动画，网站，视频，甚至某些应用程序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：~~steam上唯一的买了还要玩的游戏。~~桌面动态壁纸，不怎么占内存，创意工坊可以下载其他人制作的壁纸，甚至可以在桌面上玩互动游戏。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/12/02/DIxUnhTEtNoZS35.png" alt="image-20211202235140350">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：需通过&lt;a href="https://store.steampowered.com/">Steam&lt;/a>商店购买，18R&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：第一次安装需要steam，设置开机启动后面就不需要了，当然了浏览创意工坊还是需要的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="eartrumpethttpswwwmicrosoftcomzh-cnpeartrumpet9nblggh516xpactivetabpivotoverviewtab">&lt;a href="https://www.microsoft.com/zh-cn/p/eartrumpet/9nblggh516xp?activetab=pivot:overviewtab">EarTrumpet&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：EarTrumpet 是一款功能强大的 Windows 音量控制应用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：可以很方便的单独为各个应用设置音量，windows自带的功能，只是入口没那么方便。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：微软应用商店UWP，&lt;font style="background-color:#8bc34a">免费&lt;/font>下载&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后任务管理器会出现音量图标，设置原本的音量图标不显示即可，单机图标即可出现下图所示的调节音量界面。&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211127191256910.png" alt="image-20211127191256910" style="zoom:33%;" />
&lt;/li>
&lt;/ul>
&lt;h4 id="fluxhttpsjustgetfluxcom">&lt;a href="https://justgetflux.com/">f.lux&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>软件简介&lt;/strong>：f.lux是一款根据时间变化来改变屏幕色温的软件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我的理由&lt;/strong>：喜欢暖色，相比与win10自带的夜览，设置更加丰富。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>授权方式&lt;/strong>：&lt;font style="background-color:#8bc34a">免费&lt;/font>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用方法&lt;/strong>：安装后设置经纬度就可以自动变化色温了，当然也有更专业的设置可以自己研究，&lt;strong>设计师慎用&lt;/strong>。&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211127192252616.png" alt="image-20211127192252616" style="zoom:50%;" />
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>本文涉及到的一些软件的安装包已经上传到&lt;a href="https://www.aliyundrive.com/s/6P9Ftt2bD6v">阿里云盘&lt;/a>，方便某些开源软件网络问题无法下载的小伙伴们获取。&lt;/p>
&lt;p>完。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2021/12/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/series/2021/12/windows%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8E%A8%E8%8D%90/" term="windows软件不完全推荐" label="windows软件不完全推荐"/><category scheme="https://kiwi4814.github.io/tags/2021/12/windows/" term="windows" label="windows"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/></entry><entry><title type="text">常见方法论和心理效应</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/methodology/"/><id>https://kiwi4814.github.io/posts/2021/methodology/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-12-22T22:42:13+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本文介绍了一些在工作和生活中经常听到的一些方法论名词以及心里效应，比如PCDA、5W1H、SMART原则、沉默成本、必要难度等等。</summary><content type="html">&lt;h2 id="一思考技巧与模板">一、思考技巧与模板&lt;/h2>
&lt;h3 id="1-scqa">1. SCQA&lt;/h3>
&lt;p>SCQA模型是一个“结构化表达”工具，是麦肯锡咨询顾问芭芭拉·明托在《金字塔原理》中提出的。&lt;/p>
&lt;p>S（Situation）情景——由大家都熟悉的情景、事实引入。
C（Complication）冲突——实际情况往往和我们的要求有冲突。
Q（Question）疑问——怎么办？
A（Answer）回答——我们的解决方案是……&lt;/p>
&lt;h3 id="2-pcda">2. PCDA&lt;/h3>
&lt;p>PDCA循环是美国质量管理专家休哈特博士提出的，后由戴明采纳普及，又称戴明环。&lt;/p>
&lt;p>&lt;strong>P——Plan（计划）&lt;/strong>
包括方针和目标的确定，以及活动规划的制定。&lt;/p>
&lt;p>&lt;strong>D——Do（执行）&lt;/strong>
根据已知的信息，设计具体的方法、方案和计划布局；再根据设计和布局，进行具体运作，实现计划中的内容。&lt;/p>
&lt;p>&lt;strong>C——Check（检查）&lt;/strong>
总结执行计划的结果，分清哪些对了，哪些错了，明确效果，找出问题。&lt;/p>
&lt;p>&lt;strong>A——Action（处理）&lt;/strong>
对总结检查的结果进行处理，对成功的经验加以肯定，并予以标准化；对于失败的教训也要总结，引起重视。对于没有解决的问题，应提交给下一个PDCA循环中去解决。&lt;/p>
&lt;h3 id="3-mece">3. MECE&lt;/h3>
&lt;p>MECE分析法(Mutually Exclusive Collectively Exhaustive)，中文意思是相互独立、完全穷尽。也就是对于一个重大的议题，能够做到不重迭、不遗漏的分类，而且能够借此有效把握问题的核心，并解决问题的方法。&lt;/p>
&lt;h3 id="4-5w1h法则">4. 5W1H法则&lt;/h3>
&lt;p>What —— 设置的目标&lt;/p>
&lt;p>Where —— 施展的平台&lt;/p>
&lt;p>When —— 完成的期限&lt;/p>
&lt;p>Who —— 任务的主体&lt;/p>
&lt;p>Why —— 产生的动机&lt;/p>
&lt;p>How —— 解决的策略&lt;/p>
&lt;h3 id="5-smart原则">5. SMART原则&lt;/h3>
&lt;p>&lt;strong>SMART原则&lt;/strong>是&lt;a href="https://zh.wikipedia.org/wiki/%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86">目标管理&lt;/a>中的一种方法。目标管理的任务是有效地进行成员的组织与目标的制定和控制以达到更好的工作绩效，由管理学大师&lt;a href="https://zh.wikipedia.org/wiki/%E5%BD%BC%E5%BE%97%C2%B7%E6%9D%9C%E6%8B%89%E5%85%8B">彼得·杜拉克&lt;/a>于1954年首先提出。SMART原则便是为了达到这一目的而提出的一种方法，目前在企业界有广泛的应用。它的首次出现被认为是在1981年12月发行的《&lt;a href="https://zh.wikipedia.org/w/index.php?title=%E7%AE%A1%E7%90%86%E8%AF%84%E8%AE%BA&amp;amp;action=edit&amp;amp;redlink=1">管理评论&lt;/a>》（Management Review）上（由George Doran、Arthur Miller和James Cunningham编著）。&lt;/p>
&lt;p>SMART原则中的“S”、“M”、“A”、“R”、“T”五个字母分别对应了五个英文单词：Specific（明确）、Measurable（可衡量）、Achievable（可达成）、Relevant（相关）和Time-bound（有时限）。&lt;/p>
&lt;h2 id="二心理学效应">二、心理学效应&lt;/h2>
&lt;h3 id="1-框格效应">1. 框格效应&lt;/h3>
&lt;p>框架效应（英语：Framing effect）是一种认知偏差，人们根据选项是否具有积极或消极的含义来决定选项——例如作为损失或收益。人们在呈现正面框架时倾向於避免风险，而在呈现负面框架时寻求风险。 在假定的事件发展中，收益和损失被定义为结果的描述（例如，失去或挽救的生命、治疗和未治疗的疾病患者等）。 前景理论表明，损失比等效收益更显著，确定收益（确定性效应和伪确定性效应（英语：Pseudocertainty effect））优于概率收益，並且概率损失优于确定性损失。&lt;/p>
&lt;p>框架效应的危险之一是人们经常在两个框架之一的背景下被提供选择。 这个概念有助于理解社会运动中的框架分析，也有助于形成政治舆论，其中政治化妆师在政治民意调查中发挥着重要作用，政治民意调查旨在鼓励对委托进行民意调查的组织有益的回应。有人认为，这种技术的使用正在诋毁政治民意调查本身。如果向人们提供充足的可信信息，这种影响会减少甚至消除。&lt;/p>
&lt;h3 id="2-心理账户">2. 心理账户&lt;/h3>
&lt;p>心理账户(心理会计学)，最早由 2017 年的诺奖得主理查德·塞勒提出。&lt;/p>
&lt;p>塞勒认为，每个人都有心理账户，通过该心理账户来进行各种各样的经济决策。 通过心理账户，可以解释人的不理性经济决策。 心理账户是芝加哥大学行为科学教授理查德·萨勒(Richard Thaler)提出的概念。他认为，除了荷包这种实际账户外，在人的头脑里还存在著另一种心理账户。人们会把在现实中客观等价的支出或收益在心理上划分到不同的账户中。比如，我们会把工资划归到靠辛苦劳动日积月累下来的“勤劳致富”账户中；把年终奖视为一种额外的恩赐，放到“奖励”账户中；而把买彩票贏来的钱，放到“天上掉下的馅饼”账户中。&lt;/p>
&lt;p>对於“勤劳致富”账户里的钱，我们会精打细算，谨慎支出。而对“奖励”账户里的钱，我们就会抱著更轻鬆地態度花费掉，比如买一些平日捨不得买的衣服，作为送给自己的新年礼物等。“天上掉下的馅饼”账户里的钱就最不经用了。通常是来也匆匆，去也匆匆型。想想那些中了头彩的人，不论平日多么的节俭，一旦中了500万，也会立马变得豪情万丈，义薄云天。这时的他们通常会有一些善举，比如捐出一部分给贫困儿童。这就是心理账户在起用。当然，他们对社会的贡献是值得称颂的。&lt;/p>
&lt;p>实际上，绝大多数的人都会受到心理账户的影响，因此总是以不同的態度对待等值的钱財，並做出不同的决策行为。从经济学的角度来看，一万块的工资、一万块的年终奖和一万块的中奖彩票並没有区別，可是普通人却对三者做出了不同的消费决策。&lt;/p>
&lt;h3 id="3-沉没成本">3. 沉没成本&lt;/h3>
&lt;p>沉没成本常用来和可变成本（Prospective Costs）作比较，可变成本可以被改变，而沉没成本则不能被改变。在微观经济学理论中，做决策时仅需要考虑可变成本。如果同时考虑到沉没成本（这被微观经济学理论认为是错误的），那结论就不是纯粹基于事物的价值作出的。&lt;/p>
&lt;p>举例来说，如果某人预订了一张电影票，已经付了票款且假设不能退票。此时付的价钱已经不能收回，就算不看电影钱也收不回来，电影票的价钱算作沉没成本。&lt;/p>
&lt;p>当然有时候沉没成本只是价格的一部分。比方说某人买了一辆自行车，然后骑了几天低价在二手市场卖出。此时原价和卖出价中间的差价就是沉没成本。而且这种情况下，沉没成本随时间而改变，例如某人留着那辆自行车骑的时间越长，一般来说因为折旧而使卖出价会越低。&lt;/p>
&lt;p>大多数经济学家们认为，如果人是理性的，那就不该在做决策时考虑沉没成本。比如在前面提到的看电影的例子中，会有两种可能结果：&lt;/p>
&lt;ol>
&lt;li>付钱后发觉电影不好看，但忍受着看完；&lt;/li>
&lt;li>付钱后发觉电影不好看，退场去做别的事情。&lt;/li>
&lt;/ol>
&lt;p>两种情况下都已经付钱，所以不应该考虑退钱这件事情。如果后悔买票了，那么当前的决定应该是基于是否想继续看这部电影，而不是为这部电影付了多少钱。此时的决定不应该考虑到买票的事，而应该以看免费电影的心态来作判断。经济学家们往往建议选择后者，这样只是花了点冤枉钱，还可以通过腾出时间来做其他更有意义的事来降低机会成本，而选择前者还要继续受冤枉罪。&lt;/p>
&lt;p>人类与其他物种都对时间沉没成本有一定的敏感性。&lt;/p>
&lt;h3 id="4-必要难度">4. 必要难度&lt;/h3>
&lt;p>「必要难度」理论，英文是 Desirable difficulty，最早是由加州大学洛杉矶分校的 Robert Bjork 和 Elizabeth Bjork 教授在 1994 年提出。这个理论简单来说就是我们应该让自己学习记忆的过程始终保持必要的难度，这种难度虽然在最初会减慢你的学习速度，但是长期来看对学习效果更加有利。&lt;/p>
&lt;p>必要难度理论指出，人的记忆其实有两个不同的维度，分别是存储强度（Storage Strength）和提取强度（Retrieval Strength），两者存在密切的相关性，主要表现在以下三个方面：&lt;/p>
&lt;ul>
&lt;li>当我们学习记忆时，信息的存储强度和提取强度同步提升。&lt;/li>
&lt;li>在学习过程结束，存储强度越高，提取强度自然也越高，两者呈正相关。&lt;/li>
&lt;li>当我们再次学习记忆，检索强度越低，存储强度反而会越高，两者负相关。&lt;/li>
&lt;/ul>
&lt;p>听起来有点复杂，其实简单来说就是，你如果记忆的过程越容易，那么你忘的就越快，反之如果记起来很艰辛，那么也不那么容易忘记。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2021/12/%E6%9D%82%E8%B0%88/" term="杂谈" label="杂谈"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E6%96%B9%E6%B3%95%E8%AE%BA/" term="方法论" label="方法论"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E5%BF%83%E7%90%86%E6%95%88%E5%BA%94/" term="心理效应" label="心理效应"/></entry><entry><title type="text">流媒体时代如何找到自己想看的电影</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/streaming-media/"/><id>https://kiwi4814.github.io/posts/2021/streaming-media/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-12-04T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本文仅讨论在国内正规渠道无法看到的影视资源，无特殊说明一般代指美剧，有错误欢迎指出。……</summary><content type="html">&lt;head>
&lt;link rel="stylesheet" href="https://kiwi4814.github.io//unpkg.com/heti/umd/heti.min.css">
&lt;/head>
&lt;p>&lt;strong>本文仅讨论在国内正规渠道无法看到的影视资源，无特殊说明一般代指美剧，有错误欢迎指出。&lt;/strong>&lt;/p>
&lt;h2 id="片源哪里来">片源哪里来？&lt;/h2>
&lt;p>当前最热门的流媒体平台有网飞（Netflix），HBO（HBO Max），迪士尼（Disney+），苹果（Apple TV+），Hulu等等。对于身处国内的我们，是如何看到一部美剧的呢？&lt;/p>
&lt;h3 id="1-web-dl">1. WEB-DL&lt;/h3>
&lt;p>我们以当下最热门的流媒体网飞为例，网飞在流媒体上映电视剧后，有专门的团队会对这些视频流进行破解和抓取，拿到的这个资源一般为Web-DL，一般来说这个清晰度你可以理解为你在腾讯看的1080P高清。一般这种破解组我们称之为“0-day”发行组。目前像网飞这样的巨头流媒体已经会配上46国字幕了，而没有字幕的一手资源就是我们常说的“生肉”。&lt;/p>
&lt;p>这时候一般我们已经能从各大BT网站找到种子并进行下载了，如果是没有字幕的，国内的字幕组会同步进行翻译和校对，英语不好的为其配上字幕就可以进行观看了。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>字幕组的挑选&lt;/strong>&lt;/p>
&lt;p>首先每个字幕组都有自己擅长的领域，且不说不同语种，同样是美剧也有差异，不同地域、不同文化带来的差异巨大。比如说人人影视、伊甸园、风软、破烂熊被称之为“四大美剧字幕组”，他们翻译速度快、质量也有所保障，因为人数多规模大，不同的剧总有擅长的人来进行翻译。&lt;/p>
&lt;p>当然，也有一些小众的字幕组，虽然人少但是专注某一部剧或者某一相关领域的翻译也很厉害，比如翻译了Rick and Morty的电波字幕组（与A站合作了）以及权游的专属字幕组衣柜军团，我们在看这类剧的时候，这种字幕组往往才是看剧的最佳伴侣。&lt;/p>
&lt;p>最后，向每一个为爱发电的字幕组致敬，让我们看到了更多优秀的作品。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-蓝光片源">2. 蓝光片源&lt;/h3>
&lt;p>大概半年（没有考证，体感时间，具体可从&lt;a href="https://www.blu-ray.com/">这里&lt;/a>查），无论是电影还是电视剧一般会出蓝光光碟，这时候也会有破解组负责购买蓝光片源并进行破解，后面就分很多种了，原盘BDMV体积最大，里面包括了各国音轨、花絮等等，还有经过无损封装的Remux、BluRay以及有损压制的BDrip就是我们下载高清电影时最常下载的几种格式了，这里来举两个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Interstellar&lt;/span>&lt;span class="mf">.2014&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BluRay&lt;/span>&lt;span class="mf">.2160&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x265&lt;/span>&lt;span class="mf">.10&lt;/span>&lt;span class="nx">bit&lt;/span>&lt;span class="mf">.4&lt;/span>&lt;span class="nx">Audio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mUHD&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">FRDS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mkv&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面这个是星际穿越的资源名称，每一小节以小点（.）隔开，其中前两段意思很明显，就是电影名称+电影年代，第三节和第四节BluRay.2160p代表这个资源是来自蓝光原盘的2016P的清晰度。&lt;/p>
&lt;p>x265.10bit.4Audio这三段代表压制参数，分别指的是：编码标准、编码精度、音轨数量，此外还有可能有声道、是否杜比、HDR等信息，这里就不展开细讲了，我也是一知半解。&lt;/p>
&lt;p>最后一段是压制组，上面那些参数就是他们在对蓝光资源进行压制时候的参数，不同的压制组特点各不相同，并且有的压制组会在压制的时候就把精修版的字幕也一同封装进去，这样的资源一般质量就很高了，收藏级的。&lt;/p>
&lt;p>再看下面这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="o">**&lt;/span>&lt;span class="nx">Money&lt;/span> &lt;span class="nx">Heist&lt;/span> &lt;span class="nx">Complete&lt;/span> &lt;span class="nx">Series&lt;/span> &lt;span class="mi">1080&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="nx">NF&lt;/span> &lt;span class="nx">WEB&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">DL&lt;/span> &lt;span class="nx">DDP5&lt;/span>&lt;span class="mf">.1&lt;/span> &lt;span class="nx">x264&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">DoA&lt;/span>&lt;span class="o">**&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其实从上面的经验我们就可以看出来，这是纸钞屋全五季的网飞1080P资源。其中NF代表网飞（Netflix），如果是HBO出品的这里就会变成HMAX，DDP5.1代表声道为杜比数字5.1声道，DoA为压制组。是不是很简单？&lt;/p>
&lt;p>我们在国内的一些下载网站上看到的&lt;code>XXX.MKV&lt;/code>，一般来说资源都是从以上的压制组流出的，而这些资源会被再次进行封装，压缩，配上字幕甚至强行加上广告，这就是我们在各种“在线网站”看到的视频的来源了。&lt;/p>
&lt;h2 id="离线的生活">离线的生活&lt;/h2>
&lt;p>基于以上种种，如果没有条件购买/订阅流媒体资源的话，我仍然推荐下载观看的形式，并且推荐使用BT进行下载。&lt;/p>
&lt;p>&lt;strong>如果不想下载观看，可以拉到最后看附录中提供的&lt;a href="https://www.notion.so/8878c1c1b1c24380a492502549b0fe51">一些网站&lt;/a>，由于这些网站本身就有很大的不确定性（靠广告盈利，用爱发电的少），随时有可能关站、变卖，时效性可能不长，酌情参考即可。&lt;/strong>&lt;/p>
&lt;h3 id="1-什么是btpt">1. 什么是BT/PT&lt;/h3>
&lt;p>&lt;strong>BT&lt;/strong>&lt;/p>
&lt;p>来自维基百科的定义——&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>BitTorrent协议（简称BT，俗称比特洪流、BT下载）是用在&lt;a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C">对等网络&lt;/a>中&lt;a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB">文件分享&lt;/a>的&lt;a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE">网络协议&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F">程序&lt;/a>。和&lt;a href="https://zh.wikipedia.org/wiki/%E7%82%B9%E5%AF%B9%E7%82%B9%E5%8D%8F%E8%AE%AE">点对点&lt;/a>（point-to-point）的协议&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F">程序&lt;/a>不同，它是用户群对用户群（peer-to-peer），而且用户越多，下载同一档案的人越多，下载该档案的速度越快。且下载后，继续维持上传的状态，就可以“分享”，成为其用户端节点下载的&lt;a href="https://zh.wikipedia.org/wiki/%E7%A7%8D%E5%AD%90%E6%96%87%E4%BB%B6">种子文件&lt;/a>（.torrent），同时上传及下载。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>简单来说，就说你用迅雷下载的资源，这些资源不是存放到某个特定的地方让你下载的，你下载的资源可能就来源于我的电脑，来源于上千上万个同时在下载和上传这个资源的人，其本质就是数据的交换。&lt;/p>
&lt;p>发布资源的人将资源生成并提供一个.torrent文件，即&lt;a href="https://zh.wikipedia.org/wiki/%E7%A7%8D%E5%AD%90%E6%96%87%E4%BB%B6">种子文件&lt;/a>，也简称为“种子”。而下载者需要先得到这个种子，然后开始下载，也就是和上传者在交换数据。所以同一个种子文件，下载的人越多，下载速度也就越快。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>PT&lt;/strong>&lt;/p>
&lt;p>PT的全称是Private Tracker，是一种改良自BitTorrent协议的P2P下载方式，“Private Tracker”指私有种子服务器。与BT最大的不同点为：可进行私密范围下载，并且记录每一个用户的详细数据。&lt;/p>
&lt;p>PT可进行私密范围下载，因此提供PT的论坛（网络论坛）大多非公开的，采用邀请制或是不定时开放注册。由已注册的用户向自己所信任的人发送邀请，以确保用户质量。有一些站点还会允许用户通过官方渠道捐助或购买邀请码以获得邀请。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>BT与PT的不同之处&lt;/strong>&lt;/p>
&lt;p>由于BT的特殊性，下载者必须开启上传才可以保证资源让其他人下的到，也就是要“人人为我，我为人人”，如果下载完成就关闭上传或者修改文件名，其他人就无法从你这里获取资源了。久而久之，一些老资源就会”绝版“。所以PT站一般有着严格的规则，必须持续做种或者有足够的上传量才可以在PT站存活，这也是PT站小众和门槛高的原因。&lt;/p>
&lt;p>其次，压制组一般都会活跃在各大PT站，甚至某些PT站就是压制组的大本营，所以PT站更容易接触到一手资源。&lt;/p>
&lt;h3 id="2-用什么工具">2. 用什么工具&lt;/h3>
&lt;p>俗话说，&lt;del>差生文具多&lt;/del>。那么作为一个使用者，我们该选择哪些工具去下载和观看呢？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>离线播放器&lt;/p>
&lt;p>&lt;strong>PotPlayer&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载器&lt;/p>
&lt;p>可以选择&lt;strong>迅雷、比特彗星、FDM、Aria2&lt;/strong>等等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PT下载器&lt;/p>
&lt;p>这里所指的PT下载器并不只有PT能用，作为一个BT客户端，只要是种子文件都可以进行下载。&lt;/p>
&lt;p>PT站点一般只有特定的下载器才能使用，不同PT站的规则不太一样，你可以选择通用一点的，比如&lt;strong>qBittorrent 4.x、uTorrent 2.0.x&lt;/strong>或者按照PT站的要求选用即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-从哪里下载">3. 从哪里下载&lt;/h3>
&lt;p>前文提到过，下载者必须获取到”种子”文件才可以进行下载，那么去哪里获得这些种子文件呢？这里还是分BT和PT分别进行介绍。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>BT种子的下载&lt;/strong>&lt;/p>
&lt;p>如果你在国外，可以直接去&lt;a href="https://thepiratebay.org/index.html">海盗湾&lt;/a>、&lt;a href="https://proxyrarbg.org/torrents.php">RARBG&lt;/a>、&lt;a href="https://yts.mx/">YTS&lt;/a>、&lt;a href="https://kickasscr.net/">KAT&lt;/a>等等“大站”搜索。&lt;/p>
&lt;p>国内的话虽然也有很多很多磁力站，但除了少数几个，大部分站点存活时间都很短，这就导致我们如果要通过BT下载的话经常要更换站点，很是麻烦。&lt;/p>
&lt;p>但是不用担心，已经有很多“网络大神”帮我们整理好了，也无需特地记忆，需要找的时候打开百度检索就好了，比如下图这样子的：&lt;/p>
&lt;p>&lt;img src="%E6%B5%81%E5%AA%92%E4%BD%93%E6%97%B6%E4%BB%A3%E5%A6%82%E4%BD%95%205994dc91311e40fb887a92a286fa1298/Untitled.png" alt="Untitled">&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>这里随便贴几个磁力站或者导航站：&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://tellme.pw/btsow">BTSOW&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.yuhuage52.xyz/">雨花阁 - 简单好用的BT搜索引擎&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.yeeach.com/post/1367">2021年可用、好用、值得推荐的磁力搜索引擎【更新版】-出家如初,成佛有余&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.xerer.com/archives/27010.html">75个 bt磁力搜索网站推荐汇总（亲测可用，可直接访问）&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://ifun.cool/">趣导航 | 趣导航搜集互联网各种优秀的网站网址，打造全网最实用简洁的网址导航，同时支持网址收录，网址导航，选趣导航！&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://funletu.com/">Funletu - 发现好物，分享资源，推荐精品&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>当然了，除了磁力站之外，在附录中的资源站很多也都支持BT种子或者磁力链接的下载，嫌麻烦的可以直接去搜索即可。&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>&lt;strong>PT站点介绍&lt;/strong>&lt;/p>
&lt;p>国内 PT 站可以划分为两个系别：教育网 PT 站 与 公网 PT 站。&lt;/p>
&lt;p>其中教育网以北京邮电大学的北邮人、西北工业大学的蒲公英、东北大学的六维空间、天津大学的北洋园等等为主。公网PT站点很多，也有很多因为版权问题隐没的，目前主流的几大站点有：CHD、HdChina、TTG、M-Team、BtSchool等等，由于PT站点的私密性以及邀请制度，加之门槛较高，需要有较大的硬盘空间和做种机器，所以这里不多做介绍了，有兴趣的小伙伴可以自行查阅相关资料，打开新的世界。&lt;/p>
&lt;p>完。&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://www.notion.so/8878c1c1b1c24380a492502549b0fe51">附：一些资源站&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2021/12/%E6%95%B0%E5%AD%97%E7%94%9F%E6%B4%BB/" term="数字生活" label="数字生活"/><category scheme="https://kiwi4814.github.io/tags/2021/12/bt/" term="BT" label="BT"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E6%B5%81%E5%AA%92%E4%BD%93/" term="流媒体" label="流媒体"/></entry><entry><title type="text">WSL安装oh-my-posh踩坑记录</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/wsl-oh-my-posh/"/><id>https://kiwi4814.github.io/posts/2021/wsl-oh-my-posh/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-11-21T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">整体思路参考此文：Windows Terminal Custom Prompt Setup | Microsoft Docs 一、安装NerdFonts 推荐安装Ca……</summary><content type="html">&lt;p>整体思路参考此文：&lt;a href="https://docs.microsoft.com/zh-cn/windows/terminal/tutorials/custom-prompt-setup">Windows Terminal Custom Prompt Setup | Microsoft Docs&lt;/a>&lt;/p>
&lt;h3 id="一安装nerdfontshttpswwwnerdfontscomfont-downloads">一、安装&lt;a href="https://www.nerdfonts.com/font-downloads">NerdFonts&lt;/a>&lt;/h3>
&lt;p>推荐安装&lt;strong>Caskaydia Cove Nerd Font&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211121161954784.png" alt="image-20211121161954784">&lt;/p>
&lt;h3 id="二安装oh-my-posh">二、安装oh-my-posh&lt;/h3>
&lt;p>文章中采用了两种方式，一种是为powershell单独安装，另外一种是使用包管理器Winget同时为WSL和PowerShell安装。下面采用的是第二种：&lt;/p>
&lt;h4 id="1-安装winget">1. 安装Winget&lt;/h4>
&lt;p>官方中文文档：&lt;a href="https://docs.microsoft.com/zh-cn/windows/package-manager/">Windows 程序包管理器&lt;/a>，应用商店直接搜索 app installer安装即可。&lt;/p>
&lt;h4 id="2-安装oh-my-posh">2. 安装oh-my-posh&lt;/h4>
&lt;p>安装命令如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>winget install JanDeDobbeleer.OhMyPosh
&lt;/code>&lt;/pre>&lt;p>此命令将会安装：&lt;/p>
&lt;ul>
&lt;li>oh-my-posh windows程序&lt;/li>
&lt;li>oh-my-posh-wsl&lt;/li>
&lt;li>oh-my-posh 主题&lt;/li>
&lt;/ul>
&lt;p>安装日志如下，仅供参考&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">PS &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Users&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">heqifeng&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">winget&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">JanDeDobbeleer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">OhMyPosh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;msstore&amp;#34;&lt;/span>&lt;span class="n">源要求在使用前查看以下协议&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Terms&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">Transaction&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">//&lt;/span>&lt;span class="n">aka&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">microsoft-store&lt;/span>&lt;span class="n">-terms-of-transaction&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">源要求发送当前计算机的地理区域才能正常工作&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">是否同意所有源协议条款&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="no">[Y] 是 [N]&lt;/span> &lt;span class="n">否&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="n">Y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">已找到&lt;/span> &lt;span class="nb">Oh &lt;/span>&lt;span class="n">My&lt;/span> &lt;span class="n">Posh&lt;/span> &lt;span class="no">[JanDeDobbeleer.OhMyPosh]&lt;/span> &lt;span class="n">版本&lt;/span> &lt;span class="n">6&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">此应用程序由其所有者授权给你&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Microsoft&lt;/span> &lt;span class="n">对第三方程序包概不负责&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">也不向第三方程序包授予任何许可证&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Downloading&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">//&lt;/span>&lt;span class="n">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">JanDeDobbeleer&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">releases&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">download&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">v6&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">install-amd64&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exe&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">██████████████████████████████&lt;/span> &lt;span class="n">15&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">8&lt;/span> &lt;span class="n">MB&lt;/span> &lt;span class="p">/&lt;/span> &lt;span class="n">15&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">8&lt;/span> &lt;span class="n">MB&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">已成功验证安装程序哈希&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">正在启动程序包安装&lt;/span>&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">已成功安装&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="21-查看主题">2.1 &lt;strong>查看主题&lt;/strong>&lt;/h5>
&lt;p>官方文档：&lt;a href="https://ohmyposh.dev/docs/themes">prompt themes in the Oh My Posh docs&lt;/a>&lt;/p>
&lt;p>文章给出的命令如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>Get-ChildItem -Path &amp;#34;~\AppData\Local\Programs\oh-my-posh\themes\*&amp;#34; -Include &amp;#39;*.omp.json&amp;#39; | Sort-Object Name | ForEach-Object -Process {
$esc = [char]27
Write-Host &amp;#34;&amp;#34;
Write-Host &amp;#34;$esc[1m$($_.BaseName)$esc[0m&amp;#34;
Write-Host &amp;#34;&amp;#34;
oh-my-posh --config $($_.FullName) --pwd $PWD
Write-Host &amp;#34;&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>这里注意路径需要根据实际情况去修改。&lt;/p>
&lt;blockquote>
&lt;p>WSL下的路径为：/mnt/c/Users/heqifeng/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.wsl【这里列出来没有实际作用，只是想说明，wsl的文件也在windows下的安装路径上】&lt;/p>
&lt;p>Windows下的路径为：C:\Users\heqifeng\AppData\Local\Programs\oh-my-posh&lt;/p>
&lt;/blockquote>
&lt;p>此处如果使用第一种方式，即单独为powershell安装的话，可以使用&lt;code>Get-PoshThemes&lt;/code>命令直接查看主题。&lt;/p>
&lt;p>【注】第二种方式没有试过这个命令，不知道是否可行（因为是重新按照第一种方式单独执行了命令，在这之前没有执行过主题命令）&lt;/p>
&lt;h5 id="22-增加启动脚本">2.2 增加启动脚本&lt;/h5>
&lt;p>选择好自己的主题之后，分别在PowerShell和WSL中修改配置文件即可。&lt;/p>
&lt;h6 id="221-powershell">2.2.1 PowerShell&lt;/h6>
&lt;p>修改PowerShell的启动配置文件，在末尾加上脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-init&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-shell&lt;/span> &lt;span class="n">pwsh&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-config&lt;/span> &lt;span class="p">~/&lt;/span>&lt;span class="n">jandedobbeleer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">omp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">json&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">Invoke-Expression&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-PoshPrompt&lt;/span> &lt;span class="n">-Theme&lt;/span> &lt;span class="n">jandedobbeleer&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中第一行代表初始化oh-my-posh，第二行代表设置主题。&lt;/p>
&lt;p>按照文档的说法在powershell中执行命令：&lt;code>notepad $PROFILE&lt;/code>。提示记事本无法找到路径，因为该文档本身并不存在。两种解决方法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>执行一个判断命令，没有则创建一个&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(!(&lt;/span>&lt;span class="nb">Test-Path&lt;/span> &lt;span class="n">-Path&lt;/span> &lt;span class="nv">$PROFILE&lt;/span> &lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nb">New-Item&lt;/span> &lt;span class="n">-Type&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="n">-Path&lt;/span> &lt;span class="nv">$PROFILE&lt;/span> &lt;span class="n">-Force&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用VS Code打开【[排查](&lt;a href="https://stackoverflow.com/questions/8997316/powershell-profile-is-pointing-to-a-path-that-i-cant-find-and-setting-permane">windows - Powershell: $profile is pointing to a path that I can't find and setting permanent path - Stack Overflow&lt;/a>)】&lt;/p>
&lt;pre tabindex="0">&lt;code>code $PROFILE
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>执行&lt;code>code $PROFILE&lt;/code>命令时遇到的第一个问题是：&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>无法加载文件 D:\Users\heqifeng\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，因为在此系统上禁止运行
脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。
所在位置 行:1 字符: 3
+ . &amp;#39;D:\Users\heqifeng\Documents\WindowsPowerShell\Microsoft.PowerShell ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo : SecurityError: (:) []，PSSecurityException
+ FullyQualifiedErrorId : UnauthorizedAccess
&lt;/code>&lt;/pre>&lt;p>按照[文档](&lt;a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2">关于执行策略 - PowerShell | Microsoft Docs&lt;/a>)排查后，执行下面命令解决：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 查询当前的执行策略&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">get-executionpolicy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 修改执行策略（以管理员身份打开powershell）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set-executionpolicy&lt;/span> &lt;span class="n">remotesigned&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解决完执行策略的问题之后，修改完配置文件后重新打开windows terminal。&lt;/p>
&lt;p>&lt;strong>这里遇到第二个问题：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-PoshPrompt&lt;/span> &lt;span class="err">:&lt;/span> &lt;span class="n">无法将&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="nb">Set-PoshPrompt&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="n">项识别为&lt;/span> &lt;span class="n">cmdlet&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">函数&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">脚本文件或可运行程序的名称&lt;/span>&lt;span class="err">。&lt;/span>&lt;span class="n">请检查名称的拼写&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">如果包括路径&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">请确保路径正确&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">然后再试一次&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>此问题没有找到原因，怀疑是第二种方式本身的安装方式有问题。解决的方法是按照第一种方式重新安装了一次：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Install-Module&lt;/span> &lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最终效果：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211121173415026.png" alt="image-20211121173415026">&lt;/p>
&lt;h6 id="222-wsl">2.2.2 WSL&lt;/h6>
&lt;p>对于WSL来说需要更新&lt;code>.bashrc&lt;/code>配置文件。&lt;/p>
&lt;p>使用命令 &lt;code>nano .bashrc&lt;/code> 打开配置文件 并将下面的脚本放进去。（下面脚本中&lt;code>paradox.omp.json&lt;/code> 为主题部分，可自行替换，你可以在&lt;code>.poshthemes&lt;/code>这个文件夹下面看到所有的主题。 ）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>oh-my-posh-wsl --init --shell bash --config ~/.poshthemes/paradox.omp.json&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考链接：&lt;a href="https://ohmyposh.dev/docs/windows">Oh My Posh documentation&lt;/a>.&lt;/p>
&lt;p>【注意】这里的路径要根据实际情况变更，直接放进去会报错。我这里的安装日志如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 编辑配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim .bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 增加下面的命令到末尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>oh-my-posh-wsl --init --shell bash --config /mnt/c/Users/heqifeng/AppData/Local/Programs/oh-my-posh/themes/paradox.omp.json&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使配置生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> .bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20211121181139938.png" alt="image-20211121181139938">&lt;/p>
&lt;p>当然了，WSL下是可以使用oh-my-zsh的，这里预留个坑位： [WSL安装oh my zsh.md](WSL安装oh my zsh.md)&lt;/p>
&lt;h6 id="223-附第一种方式的安装说明">2.2.3 附第一种方式的安装说明&lt;/h6>
&lt;p>如果不考虑在WSL上使用oh-my-posh，可以完全参考下面这篇文章操作。&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/354603010">Windows Terminal美化（oh-my-posh3）&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>下面是官方文章中对于第一种方式的说明。&lt;/strong>&lt;/em>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;em>&lt;strong>Using PowerShell, install Oh My Posh with the command:&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Install-Module&lt;/span> &lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Browse the prompt themes, with the command:&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Get-PoshThemes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Choose a theme and update your PowerShell profile with this command. (You can replace &lt;code>notepad&lt;/code> with the text editor of your choice.)&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">notepad&lt;/span> &lt;span class="nv">$PROFILE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Add the following to the end of your PowerShell profile file to set the &lt;code>paradox&lt;/code> theme. (Replace &lt;code>paradox&lt;/code> with the theme of your choice.)&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Import-Module&lt;/span> &lt;span class="nb">oh-my&lt;/span>&lt;span class="n">-posh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-PoshPrompt&lt;/span> &lt;span class="n">-Theme&lt;/span> &lt;span class="n">paradox&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="三安装posh-git">三、安装posh-git&lt;/h3>
&lt;p>经过上面的安装记录，这里就非常简单了，按照步骤操作即可。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install posh-git using PowerShell with the command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Install-Module&lt;/span> &lt;span class="nb">posh-git&lt;/span> &lt;span class="n">-Scope&lt;/span> &lt;span class="n">CurrentUser&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Update your PowerShell profile file: &lt;code>notepad $PROFILE&lt;/code>. (You can replace nodepad with the text editor of your choice).&lt;/p>
&lt;p>In your PowerShell profile, add the following to the end of the file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Import-Module&lt;/span> &lt;span class="nb">posh-git&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>git设置和取消代理&lt;/p>
&lt;pre tabindex="0">&lt;code>git config --global https.proxy http://127.0.0.1:1080
git config --global https.proxy https://127.0.0.1:1080
git config --global --unset http.proxy
git config --global --unset https.proxy
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol></content><category scheme="https://kiwi4814.github.io/categories/2021/12/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/tags/2021/12/windows/" term="windows" label="windows"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/></entry><entry><title type="text">高可用06：高可用系统设计之「其他辅助手段」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-aids/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-aids/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-10-12T16:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">其他辅助手段 （1）异地多活 异地多活架构的关键点就是异地、多活，其中异地就是指地理位置……</summary><content type="html">&lt;h2 id="其他辅助手段">其他辅助手段&lt;/h2>
&lt;h3 id="1异地多活">（1）异地多活&lt;/h3>
&lt;p>异地多活架构的关键点就是异地、多活，其中异地就是指地理位置上不同的地方，类似于“不要把鸡蛋都放在同一篮子里”；多活就是指不同地理位置上的系统都能够提供业务服务，这里的“活”是活动、活跃的意思。&lt;/p>
&lt;p>异地多活架构可以分为&lt;strong>同城异区、跨城异地、跨国异地&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>同城跨区的关键在于搭建高速网络将两个机房连接起来，达到近似一个本地机房的效果。架构设计上可以将两个机房当作本地机房来设计，无须额外考虑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跨城异地的关键在于数据不一致的情况下，业务不受影响或者影响很小，这从逻辑的角度上来说其实是矛盾的，架构设计的主要目的就是为了解决这个矛盾。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跨国异地的关键主要是面向不同地区用户提供业务，或者提供只读业务，对架构设计要求不高&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>异地多活架构的代价：&lt;/p>
&lt;ul>
&lt;li>系统复杂度会发生质的变化，需要设计复杂的异地多活架构。&lt;/li>
&lt;li>成本会上升，毕竟要多在一个或者多个机房搭建独立的一套业务系统。&lt;/li>
&lt;/ul>
&lt;p>异地多活的设计原则：&lt;/p>
&lt;ul>
&lt;li>保证核心业务的异地多活&lt;/li>
&lt;li>保证核心数据最终一致性（不需要保证实时一致性）&lt;/li>
&lt;li>采用多种手段同步数据&lt;/li>
&lt;li>只保证绝大部分用户的异地多活&lt;/li>
&lt;/ul>
&lt;p>异地多活设计步骤：&lt;/p>
&lt;ul>
&lt;li>业务分级 - 常见的分级标准有：
&lt;ul>
&lt;li>&lt;strong>流量大的业务&lt;/strong>：以用户管理系统为例，业务包括登录、注册、用户信息管理，其中登录的访问量肯定是最大的。&lt;/li>
&lt;li>&lt;strong>核心业务&lt;/strong>：以 QQ 为例，QQ 的主场景是聊天，QQ 空间虽然也是重要业务，但和聊天相比，重要性就会低一些&lt;/li>
&lt;li>&lt;strong>盈利业务&lt;/strong>：同样以 QQ 为例，聊天可能很难为腾讯带来收益，因为聊天没法插入广告；而 QQ 空间反而可能带来更多收益，因为 QQ 空间可以插入很多广告，因此如果从收入的角度来看，QQ 空间做异地多活的优先级反而高于 QQ 聊天了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据分类 - 常见的数据分析维度有：
&lt;ul>
&lt;li>
&lt;p>&lt;strong>数据量&lt;/strong>：这里的数据量包括总的数据量和新增、修改、删除的量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>唯一性&lt;/strong>：唯一性指数据是否要求多个异地机房产生的同类数据必须保证唯一。例如用户 ID，如果两个机房的两个不同用户注册后生成了一样的用户 ID，这样业务上就出错了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实时性&lt;/strong>：实时性指如果在 A 机房修改了数据，要求多长时间必须同步到 B 机房，实时性要求越高，对同步的要求越高，方案越复杂。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可丢失性&lt;/strong>：可丢失性指数据是否可以丢失。例如，写入 A 机房的数据还没有同步到 B 机房，此时 A 机房机器宕机会导致数据丢失，那这部分丢失的数据是否对业务会产生重大影响。例如，登录过程中产生的 session 数据就是可丢失的，因为用户只要重新登录就可以生成新的 session；而用户 ID 数据是不可丢失的，丢失后用户就会失去所有和用户 ID 相关的数据，例如用户的好友、用户的钱等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可恢复性&lt;/strong>：可恢复性指数据丢失后，是否可以通过某种手段进行恢复，如果数据可以恢复，至少说明对业务的影响不会那么大，这样可以相应地降低异地多活架构设计的复杂度。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313163546122.png" alt="image-20220313163546122">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据同步 - 常见的数据同步方案
&lt;ul>
&lt;li>
&lt;p>&lt;strong>存储系统同步&lt;/strong>：这是最常用也是最简单的同步方式。例如，使用 MySQL 的数据主从数据同步、主主数据同步。缺点是无法定制化，例如，无论需要同步的数据量有多大，MySQL 都只有一个同步通道。因为要保证事务性，一旦数据量比较大，或者网络有延迟，则同步延迟就会比较严重。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消息队列同步&lt;/strong>：采用独立消息队列进行数据同步，常见的消息队列有 Kafka、ActiveMQ、RocketMQ 等。适合无事务性或者无时序性要求的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>重复生成&lt;/strong>：数据不同步到异地机房，每个机房都可以生成数据，这个方案适合于可以重复生成的数据。例如，登录产生的 cookie、session 数据、缓存数据等。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313163605280.png" alt="image-20220313163605280">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>异常处理 - 常见异常处理措施：
&lt;ul>
&lt;li>&lt;strong>多通道同步&lt;/strong>：通过多种方式同步数据，例如消息队列+MySQL。&lt;/li>
&lt;li>&lt;strong>同步和访问结合&lt;/strong>：这里的访问指异地机房通过系统的接口来进行数据访问。例如业务部署在异地两个机房 A 和 B，B 机房的业务系统通过接口来访问 A 机房的系统获取账号信息，如下图所示。&lt;/li>
&lt;li>&lt;strong>日志记录&lt;/strong>：日志记录主要用于用户故障恢复后对数据进行恢复，其主要方式是每个关键操作前后都记录相关一条日志，然后将日志保存在一个独立的地方，当故障恢复后，拿出日志跟数据进行对比，对数据进行修复。&lt;/li>
&lt;li>&lt;strong>用户补偿&lt;/strong>：游戏中比较常见，比如对某某日无法登陆游戏的用户补偿特殊的奖励。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2软件质量保证">（2）软件质量保证&lt;/h3>
&lt;p>很多网站都保证 7*24 小时高可用运行，同时网站不断发布新功能吸引用户以保证在激烈的市场竞争中获得成功。许多大型网站都需要发布一到两次，而中小网站则更加频繁，一些处于快速发展期的网站甚至每天发布十几次。&lt;/p>
&lt;p>不管发布的新功能是修改了一个按钮的布局还是核心交易功能，都需要再服务器上关闭原有应用，然后重新部署启动新的应用，整个过程都需要不影响用户的使用。网站的发布过程和服务器宕机效果相当，可以用服务器宕机的高可用方案来应对网站的发布。&lt;/p>
&lt;p>所以，设计网站的高可用架构时，需要考虑的服务器宕机概率不是物理上的每年一两次，而是事实上的每周一两次。用户需要面对的是每周一两次的宕机故障。&lt;/p>
&lt;p>这需要一套完善的流程来保证在发布的过程中用户不受到任何的影响或者说将影响降到最低：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>自动化测试： Web 自动化测试技术，使用自动测试工具或脚本完成测试，比如Selenium。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化部署&lt;/p>
&lt;/li>
&lt;li>
&lt;p>持续部署：持续集成（jenkins、单元测试）、持续交付、持续部署【&lt;a href="https://www.zhihu.com/question/23444990">如何理解持续集成、持续交付、持续部署？&lt;/a>】&lt;/p>
&lt;/li>
&lt;li>
&lt;p>预发布验证：开发环境&amp;gt;测试环境&amp;gt;回归测试&amp;gt;预发布环境&amp;gt;生产环境&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码版本控制：分支开发，主干发布&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化发布&lt;/p>
&lt;/li>
&lt;li>
&lt;p>灰度发布&lt;/p>
&lt;p>应用发布完成后，仍然可能会发现因为软件问题而引入的故障，这时候就需要做发布回滚，即卸载刚刚发布的软件，将上一个软件包重新发布，使系统恢复，消除故障。&lt;/p>
&lt;p>大型网站的主要业务服务器集群规模非常庞大，比如：QQ 的服务器数量超过一万台。一旦发现故障，即使想要发布回滚也需要很长的时间才能完成，只能看着故障时间增加。&lt;/p>
&lt;p>为了应付这种局面，大型网站会使用灰度发布模式，将集群服务器分成若干部分，每天只发布一部分服务器，观察运行稳定没有故障，第二天继续发布一部分服务器，持续几天的时间把整个集群全部发布完毕，期间如果发现问题，就只需要回滚已发布的一部分服务器即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://xie.infoq.cn/article/0f32b2eff858821f8062f1839">高可用：架构运维方案 &lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/9f7b9db4fc31">蓝绿部署、灰度发布、滚动发布&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/42671353">什么是蓝绿部署、滚动发布和灰度发布？ &lt;/a>&lt;/p>
&lt;h3 id="3系统运维和监控">（3）系统运维和监控&lt;/h3>
&lt;p>“不允许没有监控的系统上线”，这是许多网站架构师在做项目上线评审的时候常说的一句话。&lt;/p>
&lt;p>网站运行监控对于网站运维和架构设计优化只管重要，没有监控的网站，犹如盲人骑瞎马，夜半临深渊而不知。生死未卜，提高可用性，减少故障率就无从做起。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>系统运维&lt;/p>
&lt;p>Docker+Kubernetes&lt;/p>
&lt;/li>
&lt;li>
&lt;p>监控数据采集&lt;/p>
&lt;ul>
&lt;li>用户行为日志收集
&lt;ul>
&lt;li>服务端日志收集 - Apache、Nginx 等几乎所有 Web 服务器都具备日志记录功能，只要开启日志记录即可。如果是服务器比较多，需要集中采集日志，通常会使用 Elastic 来进行收集。&lt;/li>
&lt;li>客户端日志收集 - 利用页面嵌入专门的 JavaScript 脚本可以收集用户真实的操作行为。&lt;/li>
&lt;li>日志分析 - 可以利用 ElasticSearch 做语义分析及搜索；利用实时计算框架 Storm、Flink 等开发日志统计与分析工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>服务器性能监控&lt;/strong> - 收集服务器性能指标，如系统负载、内存占用、CPU 占用、磁盘 IO、网络 IO 等。常用的监控工具有：&lt;a href="https://github.com/apache/skywalking">Apache SkyWalking (opens new window)&lt;/a>、&lt;a href="https://github.com/naver/pinpoint">Pinpoint (opens new window)&lt;/a>等。&lt;/li>
&lt;li>&lt;strong>运行数据报告&lt;/strong> - 应该监控一些与具体业务场景相关的技术和业务指标，如：缓存命中率、平均响应时延、TPS、QPS 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>监控管理&lt;/p>
&lt;ul>
&lt;li>&lt;strong>系统报警&lt;/strong> - 设置阈值。当达到阈值，及时触发告警（短信、邮件、通信工具均可），通过及时判断状况，防患于未然。&lt;/li>
&lt;li>&lt;strong>失效转移&lt;/strong> - 监控系统可以在发现故障的情况下主动通知应用进行失效转移。&lt;/li>
&lt;li>自动优雅降级
&lt;ul>
&lt;li>优雅降级是为了应付突然爆发的访问高峰，主动关闭部分功能，释放部分资源，以保证核心功能的优先访问。&lt;/li>
&lt;li>系统在监控管理基础之上实现自动优雅降级，是柔性架构的理想状态。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用05：高可用系统设计之「存储高可用」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-storage/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-storage/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-10-12T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">存储高可用 数据备份 数据备份是保证数据有多个副本，任意副本的丢失都不会导致数据的永久丢……</summary><content type="html">&lt;h2 id="存储高可用">存储高可用&lt;/h2>
&lt;h3 id="数据备份">数据备份&lt;/h3>
&lt;p>数据备份是保证数据有多个副本，任意副本的丢失都不会导致数据的永久丢失。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>冷备份&lt;/strong> - 定期将数据复制到某种存储介质。&lt;/li>
&lt;li>热备份
&lt;ul>
&lt;li>&lt;strong>异步热备方式&lt;/strong> - 异步热备方式是指多份数据副本的写入操作异步完成，应用程序收到数据服务系统的写操作成功响应时，只写成功了一份，存储系统将会异步地写其他副本。&lt;/li>
&lt;li>&lt;strong>同步热备方式&lt;/strong> - 同步热备方式是指多份数据副本的写入操作同步完成，即应用程序收到数据服务系统的写成功响应时，多份数据都已经写操作成功。但是当应用程序收到数据写操作失败的响应式，可能有部分副本或者全部副本都已经写入成功了（因为网络或者系统故障，无法返回操作成功的响应）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="失效转移">失效转移&lt;/h3>
&lt;p>失效转移是保证任意一个副本不可访问时，可以快速切换访问其他副本，保证系统整体可用。&lt;/p>
&lt;h4 id="失效确认">失效确认&lt;/h4>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313163458193.png" alt="image-20220313163458193">&lt;/p>
&lt;p>判断服务器宕机的手段有两种：&lt;strong>心跳检测&lt;/strong>和&lt;strong>访问失败报告&lt;/strong>。&lt;/p>
&lt;p>对于应用程序的访问失败报告，控制中心还需要再一次发送心跳检测进行确认，以免错误判断服务器宕机。因为一旦进行数据访问的失效转移，意味着数据存储多份副本不一致，需要进行后续一系列的复杂动作。&lt;/p>
&lt;h3 id="访问转移">访问转移&lt;/h3>
&lt;p>确认某台数据服务器宕机后，就需要将数据读写访问重新路由到其他服务器上。对于完全对等存储的服务器，当其中一台宕机后，应用程序根据配置直接切换到对等服务器上。如果存储不对等，就需要重新计算路由，选择存储服务器。&lt;/p>
&lt;h3 id="数据恢复">数据恢复&lt;/h3>
&lt;p>因为某台服务器宕机，所以数据存储的副本数目会减少，必须将副本的数目恢复到系统设定的值，否则，再有服务器宕机时，就可能出现无法访问转移，数据永久丢失的情况。因此系统需要从健康的服务器复制数据，将数据副本数目恢复到设定值。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用04：高可用系统设计之「服务高可用」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-server/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-server/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-10-11T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">服务高可用——弹力设计 在上面这个图上，我们可以看到，有三大块的东西—— 服务冗余：通过……</summary><content type="html">&lt;h2 id="服务高可用弹力设计">服务高可用——弹力设计&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313162619060.png" alt="image-20220313162619060">&lt;/p>
&lt;p>在上面这个图上，我们可以看到，有三大块的东西——&lt;/p>
&lt;p>&lt;font color="red">&lt;strong>服务冗余：&lt;/strong>&lt;/font>通过冗余服务的副本数可以消除单点故障。这需要&lt;strong>服务发现【zookeeper、consul】，负载均衡【Nginx、HAProxy】，动态路由和健康检查&lt;/strong>四个功能或组件。&lt;/p>
&lt;p>&lt;font color="red">&lt;strong>服务解耦：&lt;/strong>&lt;/font>通过解耦可以做到把业务隔离开来，不让服务间受影响，这样就可以有更好的稳定性。在水平层面上，需要把业务或用户分片分区（业分做隔离，用户做多租户）。在垂直层面上，需要&lt;strong>异步通讯&lt;/strong>机制。因为应用被分解成了一个一个的服务，所以在服务的编排和聚合上，需要有工作流（像 Spring 的 Stream 或 Akka 的 flow 或是 AWS 的 Simple Workflow）来把服务给串联起来。而一致性的问题又需要业务补偿机制来做反向交易。&lt;/p>
&lt;p>&lt;font color="red">&lt;strong>服务容错：&lt;/strong>&lt;/font>服务容错方面，需要有&lt;strong>重试&lt;/strong>机制，重试机制会带来&lt;strong>幂等&lt;/strong>操作，对于服务保护来说，&lt;strong>熔断&lt;/strong>，&lt;strong>限流&lt;/strong>，&lt;strong>降级&lt;/strong>都是为了保护整个系统的稳定性，并在可用性和一致性方面在出错的情况下做一部分的妥协。&lt;/p>
&lt;p>初看之下，我们可能对这些概念有些陌生，但其实都是我们日常开发和设计中“触手可及”的设计，下面我们来一一简单学习下这些设计思想：&lt;/p>
&lt;h3 id="1服务隔离bulkheads">（1）服务隔离（Bulkheads）&lt;/h3>
&lt;p>&lt;strong>水密舱壁&lt;/strong>是中国造船史上的一项重要发明，其原理是用隔舱板将船舱分成若干个互不相通的独立船舱，当船舶发生触礁、碰撞等造成船壳破损时，即使某一船舱破损进水，也不致于波及其它船舱，从而提高船舶的抗沉性。其原理如下图所示：&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/960a304e251f95cad1c8e606975b683e6709c93df465.jpg" alt="960a304e251f95cad1c8e606975b683e6709c93df465" style="zoom: 25%;" />
&lt;p>我们的软件设计当然也可能会“漏水”，所以为了不让“故障”蔓延开来，需要使用“隔板”技术，来将架构分隔成多个“船舱”来隔离故障。&lt;/p>
&lt;p>在分布式软件架构中，我们同样需要使用类似的技术来让我们的故障得到隔离。这就需要我们对系统进行分离。一般来说，对于系统的分离有两种方式，一种是以服务的种类来做分离，一种是以用户来做分离。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>按照服务的种类——典型的例子：微服务&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313162919658.png" alt="image-20220313162919658">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按照用户的请求——典型的例子：多租户&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313162929855.png" alt="image-20220313162929855">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="2异步通讯asynchronous">（2）异步通讯（Asynchronous）&lt;/h3>
&lt;p>在服务解耦的操作完成后，我们肯定要面临的一大问题就是这些服务直接如何通讯。&lt;/p>
&lt;p>通讯一般来说分&lt;strong>同步&lt;/strong>和&lt;strong>异步&lt;/strong>两种。同步通讯就像打电话，需要实时响应，而异步通讯就像发邮件，不需要马上回复。各有千秋，我们很难说谁比谁好。但是在面对超高吐吞量的场景下，异步处理就比同步处理有比较大的优势了，这就好像一个人不可能同时接打很多电话，但是他可以同时接收很多的电子邮件一样。&lt;/p>
&lt;p>异步通讯通常有三种方式：&lt;/p>
&lt;h4 id="请求响应式">①请求响应式&lt;/h4>
&lt;p>这种方式的通讯是：发送方（sender）会直接请求接收方（receiver），被请求方接收到请求后，直接返回结果，比如“正在处理”。对于返回结果，有两种方法，一种是发送方时不时地去轮询一下，问一下干没干完。另一种方式是发送方注册一个回调方法，也就是接收方处理完后回调请求方。这种架构模型在以前的网上支付中比较常见，页面先从商家跳转到支付宝或银行，商家会把回调的 URL 传给支付页面，支付完后，再跳转回商家的 URL。很明显，这种情况下还是有一定耦合的。是发送方依赖于接收方，并且要把自己的回调发送给接收方，处理完后回调。&lt;/p>
&lt;h4 id="直接订阅">②直接订阅&lt;/h4>
&lt;p>在这种方式下，接收方（receiver）会来订阅发送方（sender）的消息，发送方会把相关的消息或数据放到接收方所订阅的队列中，而接收方会从队列中获取数据。这种方式下，发送方并不关心订阅方的处理结果，它只是告诉订阅方有事要干，收完消息后给个 ACK 就好了，你干成啥样我不关心。&lt;/p>
&lt;p>举个例子，在购物过程下订单的时候，一旦用户支付完成了，就需要把这个事件通知给订单处理以及物流，订单处理变更状态，物流服务需要从仓库服务分配相应的库存并准备配送，后续这些处理的结果无需告诉支付服务。商家这边只需要订阅一个支付完成的事件，这个事件带一个订单号，而不需要让支付方知道自己的回调 URL。&lt;/p>
&lt;p>但是，在这种方式下，接收方需要向发送方订阅事件，所以是接收方依赖于发送方。这种方式还是有一定的耦合。&lt;/p>
&lt;h4 id="中间订阅broker">③中间订阅（Broker）&lt;/h4>
&lt;p>所谓 Broker，就是一个中间人，发送方（sender）和接收方（receiver）都互相看不到对方，它们看得到的是一个 Broker，发送方向 Broker 发送消息，接收方向 Broker 订阅消息。如下图所示。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313162946453.png" alt="image-20220313162946453">&lt;/p>
&lt;p>这是完全的解耦。所有的服务都不需要相互依赖，而是依赖于一个中间件 Broker。这个 Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。&lt;/p>
&lt;p>在 Broker 这种模式下，发送方的服务和接收方的服务最大程度地解耦。但是所有人都依赖于一个总线，所以这个总线就需要有如下的特性：&lt;/p>
&lt;ul>
&lt;li>必须是高可用的，因为它成了整个系统的关键；&lt;/li>
&lt;li>必须是高性能而且是可以水平扩展的；&lt;/li>
&lt;li>必须是可以持久化不丢数据的。&lt;/li>
&lt;/ul>
&lt;p>要做到这三条还是比较难的。当然，好在现在开源软件或云平台上 Broker 的软件是非常成熟的，所以节省了我们很多的精力。&lt;/p>
&lt;p>✨&lt;strong>事件驱动架构（EDA – Event Driven Architecture）&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313162956535.png" alt="image-20220313162956535">&lt;/p>
&lt;h3 id="3幂等性idempotency">（3）幂等性（Idempotency）&lt;/h3>
&lt;p>编程中的“幂等性”是指任意多次执行所产生的影响，与一次执行的影响相同。一个拥有幂等性设计的接口，保证无论一次或多次来调用接口，都能够得到相同的结果。接口的幂等性设计在某些场景下是必需的，例如用户下单的场景。&lt;/p>
&lt;p>我们知道，服务间的调用可能会有三个状态，一个是成功（Success），一个是失败（Failed），一个是超时（Timeout）。前两者都是明确的状态，而超时则是完全不知道是什么状态。比如，超时原因是网络传输丢包的问题，可能是请求时就没有请求到，也有可能是请求到了，返回结果时没有正常返回等等情况。于是我们完全不知道下游系统是否收到了请求，而收到了请求是否处理了，成功 / 失败的状态在返回时是否遇到了网络问题。总之，请求方完全不知道是怎么回事。&lt;/p>
&lt;p>比如说，对于用户下单的场景的超时重试我们考虑以下问题：&lt;/p>
&lt;ul>
&lt;li>是否会导致最终创建了两条一样的订单？&lt;/li>
&lt;li>是否会扣除两遍库存？&lt;/li>
&lt;li>是否会重复扣除用户的钱？&lt;/li>
&lt;/ul>
&lt;p>因为系统超时，而调用户方重试一下，会给我们的系统带来不一致的副作用。&lt;/p>
&lt;p>在这种情况下，一般有两种处理方式。&lt;/p>
&lt;p>一种是需要下游系统提供相应的查询接口。上游系统在 timeout 后去查询一下。如果查到了，就表明已经做了，成功了就不用做了，失败了就走失败流程。&lt;/p>
&lt;p>另一种是通过幂等性的方式。也就是说，把这个查询操作交给下游系统，我上游系统只管重试，下游系统保证一次和多次的请求结果是一样的。&lt;/p>
&lt;p>对于第一种方式，需要对方提供一个查询接口来做配合。而第二种方式则需要下游的系统提供支持幂等性的交易接口。&lt;/p>
&lt;h4 id="全局id">全局ID&lt;/h4>
&lt;p>要做到幂等性的交易接口，需要有一个唯一的标识，来标志交易是同一笔交易。而这个交易 ID 由谁来分配是一件比较头疼的事。因为这个标识要能做到全局唯一。&lt;/p>
&lt;p>这里介绍一下雪花片算法，这是一个 Twitter 的开源项目 Snowflake。它是一个分布式 ID 的生成算法。其核心思想是，产生一个 long 型的 ID，其中：&lt;/p>
&lt;ul>
&lt;li>41bits 作为毫秒数。大概可以用 69.7 年。&lt;/li>
&lt;li>10bits 作为机器编号（5bits 是数据中心，5bits 的机器 ID），支持 1024 个实例。&lt;/li>
&lt;li>12bits 作为毫秒内的序列号。一毫秒可以生成 4096 个序号。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313163012791.png" alt="image-20220313163012791">&lt;/p>
&lt;p>当然，雪花片算法提供的只是一个思想，根据实际的具体情况我们可以适当调整每一部分的比例，比如在接处警的系统中，我们采用了改造过的雪花片算法——保证总长度在53位，并且加上区号的限制，以此来保证全国的接处警系统都能生成唯一的ID。&lt;/p>
&lt;h4 id="设计幂等性接口">设计幂等性接口&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;code>HTTP GET&lt;/code> 方法用于获取资源，不应有副作用，所以是幂等的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP HEAD&lt;/code> 和 GET 本质是一样的，区别在于 HEAD 不含有呈现数据，而仅仅是 HTTP 头信息，不应用有副作用，也是幂等的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP OPTIONS&lt;/code> 主要用于获取当前 URL 所支持的方法，所以也是幂等的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP DELETE&lt;/code>方法用于删除资源，有副作用，但它应该满足幂等性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP POST&lt;/code> 方法用于创建资源，所对应的 URI 并非创建的资源本身，而是去执行创建动作的操作者，有副作用，&lt;strong>不满足幂等性&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP PUT&lt;/code> 方法用于创建或更新操作，所对应的 URI 是要创建或更新的资源本身，有副作用，它应该满足幂等性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以，对于 POST 的方式，很可能会出现多次提交的问题，就好比，我们在论坛中发贴时，有时候因为网络有问题，可能会对同一篇贴子出现多次提交的情况。对此的一般的幂等性的设计如下：&lt;/p>
&lt;ol>
&lt;li>首先，在表单中需要隐藏一个 token，这个 token 可以是前端生成的一个唯一的 ID。用于防止用户多次点击了表单提交按钮，而导致后端收到了多次请求，却不能分辨是否是重复的提交。这个 token 是表单的唯一标识。（这种情况其实是通过前端生成 ID 把 POST 变成了 PUT。）&lt;/li>
&lt;li>然后，当用户点击提交后，后端会把用户提交的数据和这个 token 保存在数据库中。如果有重复提交，那么数据库中的 token 会做排它限制，从而做到幂等性。&lt;/li>
&lt;li>当然，更为稳妥的做法是，后端成功后向前端返回 302 跳转，把用户的前端页跳转到 GET 请求，把刚刚 POST 的数据给展示出来。如果是 Web 上的最好还把之前的表单设置成过期，这样用户不能通过浏览器后退按钮来重新提交。这个模式又叫做 &lt;strong>PRG 模式&lt;/strong>（Post/Redirect/Get）。&lt;/li>
&lt;/ol>
&lt;h3 id="4超时重试retry">（4）超时重试（Retry）&lt;/h3>
&lt;p>当我们把单体应用服务化，尤其是微服务化，本来在一个进程内的函数调用就成了远程调用，这样就会涉及到网络上的问题。&lt;/p>
&lt;p>网络上有很多的各式各样的组件，如 DNS 服务、网卡、交换机、路由器、负载均衡等设备，这些设备都不一定是稳定的。在数据传输的整个过程中，只要任何一个环节出了问题，最后都会影响系统的稳定性。&lt;/p>
&lt;p>所以我们需要一个重试的机制。&lt;/p>
&lt;p>但是，我们需要明白的是，“重试”的语义是我们认为这个故障是暂时的，而不是永久的，所以，我们会去重试。&lt;/p>
&lt;p>在设计重试时，我们需要定义出什么情况下需要重试，例如，调用超时、被调用端返回了某种可以重试的错误（如繁忙中、流控中、维护中、资源不足等）。&lt;/p>
&lt;p>而对于一些别的错误，则最好不要重试，比如：业务级的错误（如没有权限、或是非法数据等错误），技术上的错误（如：HTTP 的 503 等，这种原因可能是触发了代码的 bug，重试下去没有意义）。&lt;/p>
&lt;h4 id="重试的策略">重试的策略&lt;/h4>
&lt;p>关于重试的设计，一般来说，都需要有个&lt;strong>重试的最大值&lt;/strong>，经过一段时间不断的重试后，就没有必要再重试了，应该报故障了。&lt;/p>
&lt;p>在重试过程中，每一次重试失败时都应该休息一会儿再重试，这样可以避免因为重试过快而导致网络上的负担加重。在重试的设计中，我们一般都会引入，Exponential Backoff 的策略，也就是所谓的 &amp;quot; &lt;strong>指数级退避&lt;/strong> &amp;quot;。在这种情况下，每一次重试所需要的休息时间都会成倍增加。这种机制主要是用来让被调用方能够有更多的时间来从容处理我们的请求。&lt;/p>
&lt;p>下面是一些伪代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doOperationAndWaitForResult&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do some asynchronous operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">asyncOperation&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">retries&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">retry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">do&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Get the result of the asynchronous operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Results&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getAsyncOperationResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SUCCESS&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NOT_READY&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TOO_BUSY&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NO_RESOURCE&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">Results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SERVER_ERROR&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">retry&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">waitTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">min&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getWaitTimeExp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">retries&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">MAX_WAIT_INTERVAL&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Wait for the next Retry.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">waitTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">retry&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">retries&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">MAX_RETRIES&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然，我们可以在项目中直接使用Spring的重试策略，可以直接通过注解（Annotation）的方式使用。下面给出一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@EnableRetry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">MyService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Retryable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">maxAttempts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">backoff&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nd">@Backoff&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">500L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">multiplier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">5&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">retryService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">sql&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然了，这里的重试机制和退避机制提供了很多，细节就不展开了，具体可以查看&lt;a href="https://github.com/spring-projects/spring-retry">相应的文档&lt;/a>。&lt;/p>
&lt;h3 id="5熔断机制circuit-breaker">（5）熔断机制（Circuit Breaker）&lt;/h3>
&lt;p>熔断机制这个词来源于我们电闸上的“保险丝”，当电压有问题时（比如短路），自动跳闸，此时电路就会断开，我们的电器就会受到保护。不然，会导致电器被烧坏，如果人没在家或是人在熟睡中，还会导致火灾。所以，在电路世界通常都会有这样的自我保护装置。&lt;/p>
&lt;p>同样，在我们的分布式系统设计中，也应该有这样的方式。前面说过重试机制，如果错误太多，或是在短时间内得不到修复，那么我们重试也没有意义了，此时应该开启我们的熔断操作，尤其是后端太忙的时候，使用熔断设计可以保护后端不会过载。&lt;/p>
&lt;p>假设一个这样的场景：A 服务的 X 功能依赖 B 服务的某个接口，当 B 服务的接口响应很慢的时候，A 服务的 X 功能响应肯定也会被拖慢，进一步导致 A 服务的线程都被卡在 X 功能处理上，此时 A 服务的其他功能都会被卡住或者响应非常慢。这时就需要熔断机制了，即：A 服务不再请求 B 服务的这个接口，A 服务内部只要发现是请求 B 服务的这个接口就立即返回错误，从而避免 A 服务整个被拖慢甚至拖死。&lt;/p>
&lt;p>这时候我们首先会想到，如果我们可以设计几条规则并且在系统中自动执行就好了，比如说：&lt;/p>
&lt;ul>
&lt;li>1 分钟内 30% 的请求响应时间超过 1 秒就熔断&lt;/li>
&lt;li>如果该请求连续5次调用失败，那么在接下来的20分钟内，所有调用该请求的服务都直接返回异常&lt;/li>
&lt;li>...&lt;/li>
&lt;/ul>
&lt;p>这里我们也会引出几个问题：&lt;/p>
&lt;ul>
&lt;li>问题1：什么样的情况，可以理解为&lt;code>服务提供方&lt;/code>出现了问题？&lt;/li>
&lt;li>问题2：触发熔断会怎么样？&lt;/li>
&lt;li>问题3：熔断打开以后，如何关闭？&lt;/li>
&lt;/ul>
&lt;p>下面我们来看一下熔断机制的实现方法——熔断状态机。&lt;/p>
&lt;h4 id="熔断状态机">熔断状态机&lt;/h4>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313163041303.png" alt="image-20220313163041303">&lt;/p>
&lt;p>首先在熔断器内部维护者一个调用失败的计数器，如果调用服务方的接口失败，则使失败次数加 1。&lt;/p>
&lt;p>然后在熔断器内部有3种状态，分别是：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>熔断器关闭（&lt;code>Closed&lt;/code> ）：客户端正常访问服务提供方&lt;/p>
&lt;/li>
&lt;li>
&lt;p>熔断器打开（ &lt;code>Open&lt;/code>）：阻断客户端对服务提供方的访问&lt;/p>
&lt;/li>
&lt;li>
&lt;p>熔断器半开（ &lt;code>Half Open&lt;/code>）：熔断器开始重新判断是否需要继续熔断&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>结合实际情况，我们来看下这些状态之间的转换情况：&lt;/p>
&lt;p>&lt;strong>①关闭 -&amp;gt; 断开&lt;/strong>&lt;/p>
&lt;p>当服务提供方出现异常时自动断开，这里的异常可以指：&lt;/p>
&lt;ol>
&lt;li>连续发生threshold个错误，立即熔断；&lt;/li>
&lt;li>单位时间请求数达到minSamples个，错误率达到rate，即熔断；&lt;/li>
&lt;li>单位时间发生threshold个错误，立即熔断。&lt;/li>
&lt;/ol>
&lt;p>这里的错误完全是由业务系统来定义，可能是:&lt;/p>
&lt;ol>
&lt;li>后端接口的响应严重超时；&lt;/li>
&lt;li>后端服务返回异常的错误(如HTTP协议 5xx)；&lt;/li>
&lt;li>RPC返回有异常的错误码。&lt;/li>
&lt;/ol>
&lt;p>当熔断器处于&lt;code>Open&lt;/code>状态，&lt;code>客户端&lt;/code>对&lt;code>服务提供方&lt;/code>的访问被阻断了。我们该如何响应客户端的请求？通常而言，可以有这么几种做法：&lt;/p>
&lt;ol>
&lt;li>直接返回给客户端失败信息；&lt;/li>
&lt;li>将返回降级后的结果，比如针对读请求，可以返回固定值，或者cache中的历史数据。&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>② 断开 -&amp;gt; 半断开&lt;/strong>&lt;/p>
&lt;p>在熔断一段时间后，&lt;code>服务提供方&lt;/code>的服务可能已经恢复了。那么怎么感知到&lt;code>服务提供方&lt;/code>的服务已经恢复了呢？一种通用的的做法是使用定时器，每当定时器的设定的时间到达，熔断器的状态从自动从&lt;code>Open&lt;/code> 切换到 &lt;code>Half Open&lt;/code>。&lt;/p>
&lt;p>&lt;strong>③半断开 -&amp;gt; 关闭/半断开 -&amp;gt; 断开&lt;/strong>&lt;/p>
&lt;p>在&lt;code>Half Open&lt;/code>状态，熔断器重新探测（计算）&lt;code>服务提供方&lt;/code>的健康情况进行检测。&lt;/p>
&lt;p>如果&lt;code>服务提供方&lt;/code>的服务已经恢复，则熔断器切换到&lt;code>Closed&lt;/code>状态，否则切换到&lt;code>Open&lt;/code>。&lt;/p>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://vearne.cc/archives/39172">从状态机看熔断器 – 萌叔 (vearne.cc)&lt;/a>&lt;/p>
&lt;h3 id="6限流设计throttle">（6）限流设计（Throttle）&lt;/h3>
&lt;p>我们在一些系统中都可以看到像限流这样的设计，比如，我们的数据库访问的连接池，还有我们的线程池，还有 Nginx 下的用于限制瞬时并发连接数的 limit_conn 模块，限制每秒平均速率的 limit_req 模块，还有限制 MQ 的生产速，等等。&lt;/p>
&lt;h4 id="限流的分类">限流的分类&lt;/h4>
&lt;p>限流一般都是系统内实现的，常见的限流方式可以分为两类：&lt;strong>基于请求限流和基于资源限流&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>基于请求限流。&lt;/strong>&lt;/p>
&lt;p>基于请求限流指从外部访问的请求角度考虑限流，常见的方式有：限制总量、限制时间量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>基于资源限流。&lt;/strong>&lt;/p>
&lt;p>基于资源限流是从系统内部考虑的，即：找到系统内部影响性能的关键资源，对其使用上限进行限制。常见的内部资源有：连接数、文件句柄、线程数、请求队列等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="触发限流后的策略">触发限流后的策略&lt;/h4>
&lt;p>限流的目的是通过对并发访问进行限速，相关的策略一般是，一旦达到限制的速率，那么就会触发相应的限流行为。一般来说，触发的限流行为如下。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>拒绝服务。&lt;/strong>&lt;/p>
&lt;p>把多出来的请求拒绝掉。一般来说，好的限流系统在受到流量暴增时，会统计当前哪个客户端来的请求最多，直接拒掉这个客户端，这种行为可以把一些不正常的或者是带有恶意的高并发访问挡在门外。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>服务降级。&lt;/strong>&lt;/p>
&lt;p>关闭或是把后端服务做降级处理。这样可以让服务有足够的资源来处理更多的请求。降级有很多方式，一种是把一些不重要的服务给停掉，把 CPU、内存或是数据的资源让给更重要的功能；一种是不再返回全量数据，只返回部分数据。因为全量数据需要做 SQL Join 操作，部分的数据则不需要，所以可以让 SQL 执行更快，还有最快的一种是直接返回预设的缓存，以牺牲一致性的方式来获得更大的性能吞吐。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特权请求。&lt;/strong>&lt;/p>
&lt;p>所谓特权请求的意思是，资源不够了，我只能把有限的资源分给重要的用户，比如：分给权利更高的 VIP 用户。在多租户系统下，限流的时候应该保大客户的，所以大客户有特权可以优先处理，而其它的非特权用户就得让路了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>延时处理。&lt;/strong>&lt;/p>
&lt;p>在这种情况下，一般会有一个队列来缓冲大量的请求，这个队列如果满了，那么就只能拒绝用户了，如果这个队列中的任务超时了，也要返回系统繁忙的错误了。使用缓冲队列只是为了减缓压力，一般用于应对短暂的峰刺请求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>弹性伸缩。&lt;/strong>&lt;/p>
&lt;p>动用自动化运维的方式对相应的服务做自动化的伸缩。这个需要一个应用性能的监控系统，能够感知到目前最繁忙的 TOP 5 的服务是哪几个。然后去伸缩它们，还需要一个自动化的发布、部署和服务注册的运维系统，而且还要快，越快越好。否则，系统会被压死掉了。当然，如果是数据库的压力过大，弹性伸缩应用是没什么用的，这个时候还是应该限流。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="限流的实现方式">限流的实现方式&lt;/h4>
&lt;p>那么如何实现限流呢？通常业界有下面几种方法来实现限流：&lt;/p>
&lt;ul>
&lt;li>计数器（Counter）&lt;/li>
&lt;li>队列算法（Queue）&lt;/li>
&lt;li>漏斗算法（Leaky Bucket）&lt;/li>
&lt;li>令牌桶算法（Token Bucket）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://note.dolyw.com/distributed/02-Distributed-Limit.html#_1-%E8%AE%A1%E6%95%B0%E5%99%A8-%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3">高并发下的限流分析&lt;/a>&lt;/p>
&lt;h3 id="7服务降级degradation">（7）服务降级（Degradation）&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>熔断和降级是两个比较容易混淆的概念，因为单纯从名字上看好像都有禁止某个功能的意思，但其实内在含义是不同的，原因在于降级的目的是应对系统自身的故障，而熔断的目的是应对依赖的外部系统故障的情况。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>所谓的降级设计，本质就是为了解决资源不足和访问量过大的问题。当资源和访问量出现矛盾的时候，在有限的资源下，为了能够扛住大量的请求，我们就需要对系统进行降级操作。也就是说，暂时牺牲掉一些东西，以保障整个系统的平稳运行。例如，论坛可以降级为只能看帖子，不能发帖子；也可以降级为只能看帖子和评论，不能发评论；而 App 的日志上传接口，可以完全停掉一段时间，这段时间内 App 都不能上传日志。&lt;/p>
&lt;p>降级的核心思想就是&lt;strong>丢车保帅&lt;/strong>，优先保证核心业务。例如，对于论坛来说，90% 的流量是看帖子，那我们就优先保证看帖的功能；对于一个 App 来说，日志上传接口只是一个辅助的功能，故障时完全可以停掉。&lt;/p>
&lt;p>为了降级我们一般会优先牺牲掉的东西有：&lt;/p>
&lt;ul>
&lt;li>数据的强一致性，比如简化流程、同步改成异步、数据命中使用缓存等&lt;/li>
&lt;li>停止次要功能&lt;/li>
&lt;li>简化功能&lt;/li>
&lt;/ul>
&lt;p>而常见的实现降级的方式有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>系统后门降级&lt;/strong>&lt;/p>
&lt;p>简单来说，就是系统预留了后门用于降级操作。例如，系统提供一个降级 URL，当访问这个 URL 时，就相当于执行降级指令，具体的降级指令通过 URL 的参数传入即可。这种方案有一定的安全隐患，所以也会在 URL 中加入密码这类安全措施。&lt;/p>
&lt;p>系统后门降级的方式实现成本低，但主要缺点是如果服务器数量多，需要一台一台去操作，效率比较低，这在故障处理争分夺秒的场景下是比较浪费时间的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>独立降级系统&lt;/strong>&lt;/p>
&lt;p>为了解决系统后门降级方式的缺点，将降级操作独立到一个单独的系统中，可以实现复杂的权限管理、批量操作等功能。其基本架构如下：&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313163104940.png" alt="image-20220313163104940" style="zoom: 25%;" />
&lt;/li>
&lt;/ul>
&lt;h3 id="8排队">（8）排队&lt;/h3>
&lt;p>排队实际上是限流的一个变种，限流是直接拒绝用户，排队是让用户等待一段时间，全世界最有名的排队当属 12306 网站排队了。排队虽然没有直接拒绝用户，但用户等了很长时间后进入系统，体验并不一定比限流好。&lt;/p>
&lt;p>由于排队需要临时缓存大量的业务请求，单个系统内部无法缓存这么多数据，一般情况下，排队需要用独立的系统去实现，例如使用 Kafka 这类消息队列来缓存用户请求。&lt;/p>
&lt;p>下面是 1 号店的“双 11”秒杀排队系统架构：&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313163140536.png" alt="image-20220313163140536" style="zoom:25%;" />
&lt;p>其基本实现摘录如下：&lt;/p>
&lt;blockquote>
&lt;p>【排队模块】负责接收用户的抢购请求，将请求以先入先出的方式保存下来。每一个参加秒杀活动的商品保存一个队列，队列的大小可以根据参与秒杀的商品数量（或加点余量）自行定义。&lt;/p>
&lt;p>【调度模块】负责排队模块到服务模块的动态调度，不断检查服务模块，一旦处理能力有空闲，就从排队队列头上把用户访问请求调入服务模块，并负责向服务模块分发请求。这里调度模块扮演一个中介的角色，但不只是传递请求而已，它还担负着调节系统处理能力的重任。我们可以根据服务模块的实际处理能力，动态调节向排队系统拉取请求的速度。&lt;/p>
&lt;p>【服务模块】负责调用真正业务来处理服务，并返回处理结果，调用排队模块的接口回写业务处理结果。&lt;/p>
&lt;/blockquote>
&lt;h3 id="服务高可用小结">服务高可用小结&lt;/h3>
&lt;p>首先，我们的服务不能是单点，所以，我们需要在架构中冗余服务，也就是说有多个服务的副本。这需要使用到的具体技术有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>负载均衡 + 服务健康检查–可以使用像 Nginx 或 HAProxy 这样的技术；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务发现 + 动态路由 + 服务健康检查，比如 Consul 或 ZooKeeper；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化运维，Kubernetes 服务调度、伸缩和故障迁移。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>然后，我们需要隔离我们的业务，要隔离我们的服务我们就需要对服务进行解耦和拆分，这需要使用到以前的相关技术。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>bulkheads 模式：业务分片 、用户分片、数据库拆分。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自包含系统：所谓自包含的系统是从单体到微服务的中间状态，其把一组密切相关的微服务给拆分出来，只需要做到没有外部依赖就行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异步通讯：服务发现、事件驱动、消息队列、业务工作流。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化运维：需要一个服务调用链和性能监控的监控系统。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>然后，接下来，我们就要进行和能让整个架构接受失败的相关处理设计，也就是所谓的&lt;strong>容错设计&lt;/strong>。这会用到下面的这些技术。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>错误方面：调用重试 + 熔断 + 服务的幂等性设计。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一致性方面：强一致性使用两阶段提交、最终一致性使用异步通讯方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流控方面：使用限流 + 降级技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化运维方面：网关流量调度，服务监控。&lt;/p>
&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用03：高可用系统设计之「应用高可用」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-application/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-application/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-10-10T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">应用高可用 应用层主要处理网站应用的业务逻辑，一个显着的特点是应用的 无状态（State……</summary><content type="html">&lt;h2 id="应用高可用">应用高可用&lt;/h2>
&lt;p>应用层主要处理网站应用的业务逻辑，一个显着的特点是应用的 &lt;strong>无状态（Stateless ）&lt;/strong> 性。&lt;/p>
&lt;p>所谓的 &lt;strong>无状态&lt;/strong> 的应用是指应用服务器不保存业务的上下文信息，而仅根据每次请求提交的数据进行相应的业务逻辑处理，多个服务实例之间完全对等，请求提交到任意服务器，处理结果都是完全一样的。也就是说，处理一次请求所需的全部信息，要么都包含在这个请求里，要么可以从外部获取到（比如说数据库），服务器本身不存储任何信息。&lt;/p>
&lt;p>有状态服务（stateful service）则相反，它会在自身保存一些数据，先后的请求是有关联的。一个常见的例子，在商城里购买一件商品，需要经过放入购物车、确认订单、付款等多个步骤。由于HTTP协议本身是无状态的，所以为了实现有状态服务，就需要通过一些额外的方案。比如最常见的session，将用户挑选的商品（购物车），保存到session中，当付款的时候，再从购物车里取出商品信息。&lt;/p>
&lt;p>&lt;strong>如何将一个服务变成无状态的？：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>将共享存储作为降级预案来运用&lt;/strong>，比如，不太重要的数据可以放到 Redis 中，重要的数据可以放到 MySQL 中，或是像 ZooKeeper/Etcd 这样的高可用的强一致性的存储中，或是分布式文件系统中。&lt;/li>
&lt;li>&lt;strong>状态信息前置，丰富入参&lt;/strong>，将处理需要的数据尽可能都通过上游的客户端放到入参中传过来，比如我们统一权限采用的jwt-token就是采用这种方式。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://liaojiacan.me/2019/05/27/%E3%80%90%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E3%80%91%E7%90%86%E8%A7%A3%E6%9C%89%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1%E5%92%8C%E6%97%A0%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1/index.html">【高可用架构】理解有状态服务和无状态服务 | Jiacan's Blog (liaojiacan.me)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.iteye.com/blog/kyfxbl-1831869">无状态服务（stateless service）&lt;/a>&lt;/p>
&lt;p>由于无状态应用，各实例之间不用考虑数据一致性问题，所以其高可用方案相对简单。主要手段是：&lt;/p>
&lt;ul>
&lt;li>负载均衡&lt;/li>
&lt;li>分布式 Session&lt;/li>
&lt;/ul>
&lt;h3 id="1负载均衡">（1）负载均衡&lt;/h3>
&lt;p>负载均衡，顾名思义，主要使用在业务量和数据量较高的情况下，当单台服务器不足以承担所有的负载压力时，通过负载均衡手段，将流量和数据分摊到一个集群组成的多台服务器上，以提高整体的负载处理能力。&lt;/p>
&lt;p>&lt;strong>无状态应用的失效转移可以利用负载均衡来实现&lt;/strong>。&lt;/p>
&lt;p>无状态的应用实现高可用架构十分简单，由于服务器不保存请求状态，那么所有服务器完全对等，在任意节点执行同样的请求，结果总是一致的。这种情况下，最简单的高可用方案就是使用负载均衡。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313162241918.png" alt="image-20220313162241918">&lt;/p>
&lt;h3 id="2分布式session">（2）分布式Session&lt;/h3>
&lt;p>应用服务器的高可用架构设计主要基于服务无状态这一特性。事实上，业务总是有状态的，如购物车记录用户的购买信息；用户的登录状态；最新发布的消息等等。&lt;/p>
&lt;p>在分布式场景下，一个用户的 Session 如果只存储在一个服务器上，那么当负载均衡器把用户的下一个请求转发到另一个服务器上，该服务器没有用户的 Session，就可能导致用户需要重新进行登录等操作。&lt;/p>
&lt;p>为了解决分布式 Session 问题，常见的解决方案有：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/wajika/p/6645581.html">粘性 session&lt;/a>&lt;/li>
&lt;li>应用服务器间的 session 复制共享&lt;/li>
&lt;li>基于缓存的 session 共享&lt;/li>
&lt;/ul>
&lt;p>【推荐阅读】&lt;/p>
&lt;p>&lt;a href="https://github.com/dunwu/blog/blob/master/source/_posts/theory/distributed-session.md">分布式会话基本原理&lt;/a>&lt;/p>
&lt;h3 id="cdn加速">CDN加速&lt;/h3>
&lt;p>如何选择最优路径，把每个角落的请求快速的传递到机房，这就是CDN的功能。&lt;/p>
&lt;h3 id="html页面静态化">HTML页面静态化&lt;/h3>
&lt;p>静态页面部署在NGNIX中，收到用户请求，Ngnix不需要访问Webapp即可响应用户，减少应用渲染页面的时间，同时也降低了应用的压力。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用02：高可用系统设计之「架构高可用」</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-architecture/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-architecture/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-10-09T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">如何设计一个高可用系统 上一节我们已经介绍了什么是高可用以及高可用相关的一些概念，接下……</summary><content type="html">&lt;h2 id="如何设计一个高可用系统">如何设计一个高可用系统&lt;/h2>
&lt;p>上一节我们已经介绍了什么是高可用以及高可用相关的一些概念，接下来我们分几个章节来介绍：&lt;strong>如何设计一个高可用系统？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313160723990.png" alt="image-20220313160723990">&lt;/p>
&lt;p>&lt;strong>大型系统的分层架构及物理服务器的分布式部署使得位于不同层次的服务器具有不同的可用性特点。关闭服务或服务器宕机时产生的影响也不相同，高可用的解决方案也差异甚大&lt;/strong>。大致可以分为：&lt;/p>
&lt;ul>
&lt;li>高可用的架构 - 主要方式是：主备、主从、双主、集群、分区&lt;/li>
&lt;li>高可用的应用 - 主要手段是：负载均衡&lt;/li>
&lt;li>高可用的服务 - 主要手段是：分级管理、超时重试、异步调用、限流、降解、断路、幂等性设计&lt;/li>
&lt;li>高可用的数据 - 主要手段是：数据备份和失效转移&lt;/li>
&lt;/ul>
&lt;h2 id="架构高可用">架构高可用&lt;/h2>
&lt;p>常见的机构模式有：双机（主备、主从、主主等）、集群、分区等。&lt;/p>
&lt;h3 id="1主备复制">（1）主备复制&lt;/h3>
&lt;p>主备复制是最常见也是最简单的一种存储高可用方案，几乎所有的存储系统都提供了主备复制的功能，例如 MySQL、Redis、MongoDB 等。&lt;strong>主备模式&lt;/strong>中，两台服务不再是平等关系。主服务承担所有的读写请求，备服务只有在主服务不可用时才取而代之。主备服务之间虽然也存在两个方向的数据同步，但跟双主模式不同，它们不会同时发生。正常情况下只存在主向备同步数据。主不可用的时间段内，数据会写到备服务。当主恢复后，才需要由备向主同步数据。在此期间，会双写数据到主备节点，防止主同时再向备同步数据。主备架构比较容易实现，缺点是备服务在绝大部分时间是一种资源浪费。一般数据库系统在部署时会考虑主备架构。&lt;/p>
&lt;p>主备复制要点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>存在&lt;strong>一主多备&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主机负责读&amp;amp;写，并定期复制数据给备机。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一旦主机宕机，可以通过人工手段，将其中一个备节点作为主节点。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313160803044.png" alt="image-20220313160803044">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>优点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>主备复制架构中，客户端可以不感知备机的存在。即使灾难恢复后，原来的备机被人工修改为主机后，对于客户端来说，只是认为主机的地址换了而已，无须知道是原来的备机升级为主机。&lt;/li>
&lt;li>主备复制架构中，主机和备机之间，只需要进行数据复制即可，无须进行状态判断和主备切换这类复杂的操作。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>主备复制架构中，故障后需要人工干预，无法自动恢复。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>适用场景&lt;/strong>&lt;/p>
&lt;p>综合主备复制架构的优缺点，内部的后台管理系统使用主备复制架构的情况会比较多，例如学生管理系统、员工管理系统、假期管理系统等，因为这类系统的数据变更频率低，即使在某些场景下丢失数据，也可以通过人工的方式补全。&lt;/p>
&lt;h3 id="2主从复制">（2）主从复制&lt;/h3>
&lt;p>主从复制和主备复制只有一字之差，“从”意思是“随从、仆从”，“备”的意思是备份。我们可以理解为仆从是要帮主人干活的，这里的干活就是承担“读”的操作。也就是说，主机负责读写操作，从机只负责读操作，不负责写操作。&lt;/p>
&lt;p>&lt;strong>主从模式&lt;/strong>其实不是主要解决高可用问题的，更多的是为了实现读写分离，来解决高并发问题。实际场景中通常不是一主一从，而是一主多从架构，因为大部分应用都是的读多写少。主节点处理写请求，从节点处理读请求。由于存在多从，读服务的可用性远高于写服务。另外，写服务会存在单点故障。这个问题可以通过集群动态选主来解决：当主节点不可用时，集群自动选出一台新的主节点。基于zookeeper，动态选主很容易实现。不过动态选主在MySQL集群架构中不会使用，原因是主从同步数据必须在部署时配置好，切换了主节点还是需要运维人工介入修改配置并重启服务。&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313160959711.png" alt="image-20220313160959711" style="zoom: 80%;" />
&lt;p>&lt;strong>优缺点分析&lt;/strong>&lt;/p>
&lt;p>主从复制与主备复制相比，优点有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>主从复制在主机故障时，读操作相关的业务可以继续运行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主从复制架构的从机提供读操作，发挥了硬件的性能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>缺点有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>主从复制架构中，客户端需要感知主从关系，并将不同的操作发给不同的机器进行处理，复杂度比主备复制要高。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主从复制架构中，从机提供读业务，如果主从复制延迟比较大，业务会因为数据不一致出现问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>故障时需要人工干预.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>综合主从复制的优缺点，一般情况下，写少读多的业务使用主从复制的存储架构比较多。例如，论坛、BBS、新闻网站这类业务，此类业务的读操作数量是写操作数量的 10 倍甚至 100 倍以上。&lt;/p>
&lt;h3 id="3双机切换">（3）双机切换&lt;/h3>
&lt;p>以上介绍的主备复制和主从复制都存在两个比较致命的问题，那就是并非100%高可用。主要体现在：&lt;/p>
&lt;ul>
&lt;li>主机故障后，无法进行写操作。&lt;/li>
&lt;li>如果主机无法恢复，需要人工指定新的主机角色。&lt;/li>
&lt;/ul>
&lt;p>双机切换就是为了解决这两个问题而产生的，包括主备切换和主从切换两种方案。简单来说，这两个方案就是在原有方案的基础上增加“切换”功能，即系统自动决定主机角色，并完成角色切换。&lt;/p>
&lt;p>常见的主备切换架构有三种形式：互连式、中介式和模拟式。具体细节感兴趣可以参考这篇文章——&lt;a href="https://xiaojun90.github.io/blog/architecture/1018.html">高可用存储架构：双机架构&lt;/a>。&lt;/p>
&lt;h3 id="4双主模式">（4）双主模式&lt;/h3>
&lt;p>&lt;strong>双主模式&lt;/strong>中，两台服务是平等关系，同时对外提供读写服务，客户端任选一台即可。双主模式是可用性最好的，但是这种架构的一致性处理比较困难，需要两台服务进行双向数据同步。一旦它们之间的通信断开，就形成了网络分区，这种分区会带来&lt;a href="https://cloud.tencent.com/developer/article/1027323">脑裂&lt;/a>（brain-split）问题，并且系统对此无解，必须人工介入。所以在架构设计时极少选择双主模式。&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313161033607.jpg" alt="image-20220313161033607" style="zoom: 25%;" />
&lt;h3 id="5数据集群">（5）数据集群&lt;/h3>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313161130766.png" alt="image-20220313161130766" style="zoom:50%;" />
&lt;p>主备、主从、主主架构本质上都有一个隐含的假设：主机能够存储所有数据，但主机本身的存储和处理能力肯定是有极限的。早在 2013 年，Facebook 就有 2500 亿张上传照片，当时这些照片的容量就已经达到了 250 PB 字节（250 × 1024TB），平均一天上传的图片有 3 亿 5000 万张。如此大量的数据，单台服务器肯定是无法存储和处理的，我们必须使用多台服务器来存储数据，这就是数据集群架构。&lt;/p>
&lt;p>简单来说，集群就是多台机器组合在一起形成一个统一的系统，这里的“多台”，数量上至少是 3 台；相比而言，主备、主从都是 2 台机器。根据集群中机器承担的不同角色来划分，集群可以分为两类：数据集中集群、数据分散集群。&lt;/p>
&lt;h4 id="数据集中集群">①数据集中集群&lt;/h4>
&lt;p>数据集中集群与主备、主从这类架构相似，我们也可以称数据集中集群为 1 主多备或者 1 主多从。无论是 1 主 1 从、1 主 1 备，还是 1 主多备、1 主多从，数据都只能往主机中写，而读操作可以参考主备、主从架构进行灵活多变。虽然架构上是类似的，但由于集群里面的服务器数量更多，导致复杂度整体更高一些，具体体现在：&lt;/p>
&lt;ul>
&lt;li>主机如何将数据复制给备机&lt;/li>
&lt;li>备机如何检测主机状态&lt;/li>
&lt;li>主机故障后，如何决定新的主机&lt;/li>
&lt;/ul>
&lt;h4 id="数据分散集群">②数据分散集群&lt;/h4>
&lt;p>数据分散集群指多个服务器组成一个集群，每台服务器都会负责存储一部分数据；同时，为了提升硬件利用率，每台服务器又会备份一部分数据。&lt;/p>
&lt;p>数据分散集群的复杂点在于如何将数据分配到不同的服务器上，算法需要考虑这些设计点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>均衡性&lt;/strong>&lt;/p>
&lt;p>算法需要保证服务器上的数据分区基本是均衡的，不能存在某台服务器上的分区数量是另外一台服务器的几倍的情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>容错性&lt;/strong>&lt;/p>
&lt;p>当出现部分服务器故障时，算法需要将原来分配给故障服务器的数据分区分配给其他服务器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可伸缩性&lt;/strong>&lt;/p>
&lt;p>当集群容量不够，扩充新的服务器后，算法能够自动将部分数据分区迁移到新服务器，并保证扩容后所有服务器的均衡性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>数据分散集群和数据集中集群的不同点在于，&lt;strong>数据分散集群中的每台服务器都可以处理读写请求&lt;/strong>，因此不存在数据集中集群中负责写的主机那样的角色。但在数据分散集群中，必须有一个角色来负责执行数据分配算法，这个角色可以是独立的一台服务器【例如Hadoop的Namenode】，也可以是集群自己选举出的一台服务器【例如ElasticSearch的master node】。&lt;/p>
&lt;p>如果是集群服务器选举出来一台机器承担数据分区分配的职责，则这台服务器一般也会叫作主机，但我们需要知道这里的“主机”和数据集中集群中的“主机”，其职责是有差异的。&lt;/p>
&lt;h4 id="总结">③总结&lt;/h4>
&lt;p>数据集中集群架构中，客户端只能将数据写到主机；数据分散集群架构中，客户端可以向任意服务器中读写数据。正是因为这个关键的差异，决定了两种集群的应用场景不同。一般来说，数据集中集群适合数据量不大，集群机器数量不多的场景。例如，ZooKeeper 集群，一般推荐 5 台机器左右，数据量是单台服务器就能够支撑；而数据分散集群，由于其良好的可伸缩性，适合业务数据量巨大、集群机器数量庞大的业务场景。例如，Hadoop 集群、HBase 集群，大规模的集群可以达到上百台甚至上千台服务器。&lt;/p>
&lt;p>&lt;strong>【延伸阅读】&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/130332285">分布式一致性算法——共识性算法&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/130332285">分布式一致性算法-Paxos、Raft、ZAB、Gossip&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/2bceacd60b8a">Zookeeper——一致性协议:Zab协议 - 简书 (jianshu.com)&lt;/a>&lt;/p>
&lt;h3 id="6数据分区">（6）数据分区&lt;/h3>
&lt;p>前面我们讨论的存储高可用架构都是基于硬件故障的场景去考虑和设计的，主要考虑当部分硬件可能损坏的情况下系统应该如何处理，但对于一些影响非常大的灾难或者事故来说，有可能所有的硬件全部故障。例如，新奥尔良水灾、美加大停电、洛杉矶大地震等这些极端灾害或者事故，可能会导致一个城市甚至一个地区的所有基础设施瘫痪，这种情况下基于硬件故障而设计的高可用架构不再适用，我们需要基于地理级别的故障来设计高可用架构，这就是数据分区架构产生的背景。&lt;/p>
&lt;p>数据分区指将数据按照一定的规则进行分区，不同分区分布在不同的地理位置上，每个分区存储一部分数据，通过这种方式来规避地理级别的故障所造成的巨大影响。&lt;/p>
&lt;p>设计一个良好的数据分区架构，需要从&lt;strong>数据量的大小、具体的区域、分区的规则和复制的规则&lt;/strong>来具体考虑。&lt;/p>
&lt;p>其中最重要的就是数据复制的规则，在某些异常或者灾难情况下，虽然部分数据受影响，但整体数据并没有全部被影响，本身就相当于一个高可用方案了。但仅仅做到这点还不够，因为每个分区本身的数据量虽然只是整体数据的一部分，但还是很大，这部分数据如果损坏或者丢失，损失同样难以接受。&lt;strong>因此即使是分区架构，同样需要考虑复制方案。&lt;/strong>&lt;/p>
&lt;p>常见的复制方法有集中式、互备式和独立式三种。&lt;/p>
&lt;p>&lt;strong>集中式&lt;/strong>：所有数据存在一个总备份中心，设计简单，但是成本较高，需要建设一个独立的备份中心。&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313161156097.png" alt="image-20220313161156097" style="zoom:25%;" />
&lt;p>&lt;strong>互备式&lt;/strong>：每个分区备份另外一个分区的数据，设计复杂，并且扩展麻烦，优点是成本低，因为每台机器都承载两个身份。&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313161206002.png" alt="image-20220313161206002" style="zoom:25%;" />
&lt;p>&lt;strong>独立式&lt;/strong>：每个分区自己有独立的备份中心【非本分区的】，优点是设计简单，各个分区互不影响，但是成本极高。&lt;/p>
&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313161215359.png" alt="image-20220313161215359" style="zoom:25%;" /></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">高可用01：什么是高可用系统？</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/high-availability-concept/"/><id>https://kiwi4814.github.io/posts/2021/high-availability-concept/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-10-08T15:42:40+00:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">高可用系列目录 高可用01：什么是高可用系统？ 高可用02：高可用系统设计之「架构高可用……</summary><content type="html">&lt;p>&lt;a href="https://kiwi4814.com/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/">高可用系列目录&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-concept/">&lt;font color="orange">高可用01：什么是高可用系统？&lt;/font>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-architecture/">高可用02：高可用系统设计之「架构高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-application/">高可用03：高可用系统设计之「应用高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-server/">高可用04：高可用系统设计之「服务高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-storage/">高可用05：高可用系统设计之「存储高可用」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kiwi4814.com/posts/2021/high-availability-aids/">高可用06：高可用系统设计之「其他辅助手段」&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本系列为本人在公司内部分享的高可用介绍，大部分内容于网上搜阅资料收集而成，参阅了极客时间的左耳听风系列以及零散的文章，主要目的并不是详细的介绍高可用，更多的是为了提供一个框架，整体上熟悉高可用是什么以及搭建高可用系统时需要注意的事项，做到熟悉框架、整体有数。&lt;/p>
&lt;h2 id="什么是高可用">什么是高可用？&lt;/h2>
&lt;p>要想了解高可用这个概念，我们首先需要知道：什么是高可用？在介绍它之前，我们首先来看两个息息相关的概念。&lt;/p>
&lt;h3 id="分布式一致性">分布式一致性&lt;/h3>
&lt;p>用户，在使用不同的系统或者不同的场景的时候，对于应用所着重的功能点是有不同的期望值的。&lt;/p>
&lt;p>举个例子，当我们登录12306买票的时候，我们肯定不希望买到的票和别人买到的票是重复的，对于我们来说是天经地义的，但是对于购票系统来说，就有严格的一致性要求，也就是说购票系统的数据无论在天南海北的哪个售票窗口每时每刻必须都保证是准确无误的。&lt;/p>
&lt;p>再说银行的转账系统，当我们转账或者从别处转入一笔钱的时候，如果金额较大，一般不会即时到账，而我们最希望的也是这笔钱能够到账而不是即时到账。那么对于银行的系统来说，最终要保证的是绝对的数据安全，即时在数据一致性上出现延时。&lt;/p>
&lt;p>再比如说，我们逛京东，看到商品库存量充足，点击购买，但是其实下单的时候才会去核查系统真实的库存量，也就是说我们看到的库存量其实并不是时时刻刻都是正确的，但这个对我们其实并没有造成太大的损失。&lt;/p>
&lt;p>对于分布式系统，要解决的一个重要问题就是数据的复制。&lt;strong>在对一个副本数据进行更新的时候，必须确保也能够更新其他的副本，否则不同副本之间的数据将不一致&lt;/strong>，这就是数据的一致性。&lt;/p>
&lt;p>那么如何解决这个问题？一种思路是&lt;strong>既然是由于延时动作引起的问题，那我可以将写入的动作阻塞，直到数据复制完成后，才完成写入动作&lt;/strong>。 没错，这似乎能解决问题，而且有一些系统的架构也确实直接使用了这个思路。但这个思路在解决一致性问题的同时，又带来了新的问题：写入的性能。如果你的应用场景有非常多的写请求，那么使用这个思路之后，后续的写请求都将会阻塞在前一个请求的写操作上，导致系统整体性能急剧下降。&lt;/p>
&lt;p>总体来说，&lt;strong>我们无法找到一种能够满足分布式系统所有系统属性的分布式一致性解决方案&lt;/strong>。因此，&lt;strong>如何既保证数据的一致性，同时又不影响系统运行的性能，是每一个分布式系统都需要重点考虑和权衡的&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>强一致性&lt;/p>
&lt;p>这种一致性级别是最符合用户直觉的，它要求&lt;strong>系统写入什么，读出来的也会是什么(数据时时一致)&lt;/strong>，用户体验好，但实现起来往往对系统的性能影响大&lt;/p>
&lt;/li>
&lt;li>
&lt;p>弱一致性&lt;/p>
&lt;p>这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不久承诺多久之后数据能够达到一致，但&lt;strong>会尽可能地保证到某个时间级别(比如秒级别)后，数据能够达到一致状态&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最终一致性&lt;/p>
&lt;p>最终一致性是弱一致性的一个特例，&lt;strong>系统会保证在一定时间内，能够达到一个数据一致的状态&lt;/strong>。这里之所以将最终一致性单独提出来，是因为它是弱一致性中非常推崇的一种一致性模型，也是业界在大型分布式系统的数据一致性上比较推崇的模型&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="cap和base理论">CAP和BASE理论&lt;/h3>
&lt;p>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer's theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在 2000 年的 ACM PODC 上提出的一个猜想。2002 年，麻省理工学院的赛斯·吉尔伯特（Seth Gilbert）和南希·林奇（Nancy Lynch）发表了布鲁尔猜想的证明，使之成为分布式计算领域公认的一个定理。&lt;/p>
&lt;p>简单来说，CAP理论可以概括为：在一个分布式系统（指互相连接并共享数据的节点的集合）中，当涉及读写操作时，只能保证**&lt;code>一致性（Consistence）&lt;/code>&lt;strong>、&lt;/strong>&lt;code>可用性（Availability）&lt;/code>&lt;strong>、&lt;/strong>&lt;code>分区容错性（Partition Tolerance）&lt;/code>**三者中的两个，另外一个必须被牺牲。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/image-20220313154456757.png" alt="image-20220313154456757">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:left">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>CA&lt;/strong>&lt;/td>
&lt;td style="text-align:left">放弃分区容错性**，**加强一致性和可用性，其实就是传统的单机数据库的选择&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>AP&lt;/strong>&lt;/td>
&lt;td style="text-align:left">放弃一致性(这里说的一致性是强一致性)**，**追求分区容错性和可用性，允许读取所有节点的数据，但是数据可能不一致，这是很多分布式系统设计时的选择，例如很多 NoSQL 系统就是如此&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>CP&lt;/strong>&lt;/td>
&lt;td style="text-align:left">放弃可用性，追求一致性和分区容错性，不能访问未同步完成的节点，失去部分可用性，基本不会选择，网络问题会直接让整个系统不可用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>需要明确的一点是，对于一个分布式系统而言，分区容错性是一个最基本的要求。因为既然是一个分布式系统，那么分布式系统中的组件必然需要被部署到不同的节点，否则也就无所谓分布式系统了，因此必然出现子网络。而对于分布式系统而言，网络问题又是一个必定会出现的异常情况，因此分区容错性也就成为了一个分布式系统必然需要面对和解决的问题。&lt;strong>因此系统架构师往往需要把精力花在如何根据业务特点在C(一致性)和A(可用性)之间寻求平衡&lt;/strong>。&lt;/p>
&lt;p>在说BASE理论之前，我想大家都很熟悉的一个属性，也是面试题必背的问题，那就是ACID，传统关系型数据库系统的事务都有 ACID 属性，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。&lt;/p>
&lt;p>事务的 ACID 属性保证了数据库的一致性，比如银行系统中，转账就是一个事务，从原账户扣除金额，以及向目标账户添加金额，这两个数据库操作的总和构成一个完整的逻辑过程，是不可拆分的原子操作，从而保证了整个系统中的总金额没有变化。然而，这对于我们的分布式系统来说，尤其是微服务来说，这样的方式是很难满足高性能要求的。我们刚刚介绍的CAP 理论——在分布式的服务架构中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition Tolerance），在现实中不能都满足，最多只能满足其中两个。&lt;/p>
&lt;p>所以，为了提高性能，出现了 ACID 的一个变种—— BASE。&lt;/p>
&lt;ul>
&lt;li>**Basic Availability：基本可用。**这意味着，系统可以出现暂时不可用的状态，而后面会快速恢复。&lt;/li>
&lt;li>**Soft-state：软状态。**它是我们前面的“有状态”和“无状态”的服务的一种中间状态。也就是说，为了提高性能，我们可以让服务暂时保存一些状态或数据，这些状态和数据不是强一致性的。&lt;/li>
&lt;li>&lt;strong>Eventual Consistency：最终一致性&lt;/strong>，系统在一个短暂的时间段内是不一致的，但最终整个系统看到的数据是一致的。&lt;/li>
&lt;/ul>
&lt;p>BASE 理论是对 CAP 中&lt;strong>一致性&lt;/strong>和&lt;strong>可用性&lt;/strong>权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的。BASE 理论的核心思想是：&lt;strong>即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性&lt;/strong>。&lt;strong>它完全不同于 ACID 的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID 特性和 BASE 理论往往又会结合在一起，这就是所谓的酸碱平衡。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dunwu/blog/blob/master/source/_posts/theory/distributed-base-theory.md">分布式基础原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98">Wiki - 拜占庭将军问题&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/av78588312/">李永乐老师的拜占庭将军问题视频讲解&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ruanyifeng.com/blog/2018/07/cap.html">CAP 定理的含义 - 阮一峰&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.im/post/5d720e86f265da03cc08de74">神一样的 CAP 理论被应用在何方&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leetcode-cn.com/circle/article/IM4z2f/">分布式环境下，如何保证数据一致性？&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="高可用的定义">高可用的定义&lt;/h3>
&lt;p>我们先看维基百科对于高可用的定义：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>High availability&lt;/strong> (&lt;strong>HA&lt;/strong>) is a characteristic of a system which aims to ensure an agreed level of operational performance, usually &lt;a href="https://en.wikipedia.org/wiki/Uptime">uptime&lt;/a>, for a higher than normal period.&lt;/p>
&lt;/blockquote>
&lt;p>翻译过来大概是：高可用性 (HA) 是系统的一个特征，旨在确保在高于正常时间的时间内达到商定的操作性能水平，通常是正常运行时间。&lt;/p>
&lt;h3 id="高可用的量化方法nines">高可用的量化方法——”Nines“&lt;/h3>
&lt;p>系统不可用也被称作系统故障，&lt;strong>业界通常用多个 9 来衡量系统的可用性&lt;/strong>。如 QQ 的可用性为 4 个 9，即 99.99% 可用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">网站不可用时间 = 故障修复时间点 - 故障发现时间点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">网站年度可用性指标 = (1 - 网站不可用时间/年度总时间) * 100%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">系统可用性%&lt;/th>
&lt;th style="text-align:left">宕机时间/年&lt;/th>
&lt;th style="text-align:left">宕机时间/月&lt;/th>
&lt;th style="text-align:left">宕机时间/周&lt;/th>
&lt;th style="text-align:left">宕机时间/天&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">90% (1个9)&lt;/td>
&lt;td style="text-align:left">36.5 天&lt;/td>
&lt;td style="text-align:left">72 小时&lt;/td>
&lt;td style="text-align:left">16.8 小时&lt;/td>
&lt;td style="text-align:left">2.4 小时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">95% (1.5个9)&lt;/td>
&lt;td style="text-align:left">18.26天&lt;/td>
&lt;td style="text-align:left">36.53 小时&lt;/td>
&lt;td style="text-align:left">8.4 小时&lt;/td>
&lt;td style="text-align:left">1.2 小时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">99% (2个9)&lt;/td>
&lt;td style="text-align:left">3.65 天&lt;/td>
&lt;td style="text-align:left">7.20 小时&lt;/td>
&lt;td style="text-align:left">1.68 小时&lt;/td>
&lt;td style="text-align:left">14.4 分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">99.9% (3个9)&lt;/td>
&lt;td style="text-align:left">8.76 小时&lt;/td>
&lt;td style="text-align:left">43.8 分&lt;/td>
&lt;td style="text-align:left">10.1 分钟&lt;/td>
&lt;td style="text-align:left">1.44 分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">99.99% (4个9)&lt;/td>
&lt;td style="text-align:left">52.56 分&lt;/td>
&lt;td style="text-align:left">4.38 分&lt;/td>
&lt;td style="text-align:left">1.01 分钟&lt;/td>
&lt;td style="text-align:left">8.66 秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">99.999% (5个9)&lt;/td>
&lt;td style="text-align:left">5.26 分&lt;/td>
&lt;td style="text-align:left">25.9 秒&lt;/td>
&lt;td style="text-align:left">6.05 秒&lt;/td>
&lt;td style="text-align:left">0.87 秒&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="高可用的核心原则">高可用的核心原则&lt;/h3>
&lt;ol>
&lt;li>消除单点故障。意思就是说在系统的设计中对软硬件增加冗余，即使组件发生故障，也并不意味着整个系统发生故障。&lt;/li>
&lt;li>可靠的交叉点（CrossOver）。 在冗余系统中，交叉点本身往往会成为单点故障。 这是一些不容易冗余的结点，比如域名解析，负载均衡器等。&lt;/li>
&lt;li>对故障的检测和恢复。检测故障以及用备份的结点接管故障点。这也就是failover。&lt;/li>
&lt;/ol>
&lt;p>那么，我们要想设计一个高可用系统，需要注意些什么呢？要想回答这个问题，我们可以先反向考虑一下，导致系统不可用的原因有哪些呢？&lt;/p>
&lt;h3 id="导致系统不可用的原因分析">导致系统不可用的原因分析&lt;/h3>
&lt;p>导致系统不可用的原因有两类，有计划的宕机和无计划的宕机。其中，无计划宕机有：&lt;/p>
&lt;ul>
&lt;li>系统级的故障 – 包括主机、操作系统、中间件、数据库、网络、电源以及外围设备&lt;/li>
&lt;li>数据和中介的故障 – 包括人员误操作、硬盘故障、数据乱了&lt;/li>
&lt;li>还有：自然灾害、人为破坏、以及供电问题。&lt;/li>
&lt;/ul>
&lt;p>有计划的宕机原因有：&lt;/p>
&lt;ul>
&lt;li>日常任务：备份，容量规划，用户和安全管理，后台批处理应用&lt;/li>
&lt;li>运维相关：数据库维护、应用维护、中间件维护、操作系统维护、网络维护&lt;/li>
&lt;li>升级相关：数据库、应用、中间件、操作系统、网络、包括硬件升级&lt;/li>
&lt;/ul>
&lt;p>我们再给它们归个类。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>网络问题&lt;/strong>。网络链接出现问题，网络带宽出现拥塞……&lt;/li>
&lt;li>&lt;strong>性能问题&lt;/strong>。数据库慢 SQL、Java Full GC、硬盘 IO 过大、CPU 飙高、内存不足……&lt;/li>
&lt;li>&lt;strong>安全问题&lt;/strong>。被网络攻击，如 DDoS 等。&lt;/li>
&lt;li>&lt;strong>运维问题&lt;/strong>。系统总是在被更新和修改，架构也在不断地被调整，监控问题……&lt;/li>
&lt;li>&lt;strong>管理问题&lt;/strong>。没有梳理出关键服务以及服务的依赖关系，运行信息没有和控制系统同步……&lt;/li>
&lt;li>&lt;strong>硬件问题&lt;/strong>。硬盘损坏、网卡出问题、交换机出问题、机房掉电、挖掘机问题……&lt;/li>
&lt;/ol>
&lt;p>细数以上种种问题，我们会发现，高可用除了单纯的技术设计方案以外，跟外界因素也是息息相关的，甚至有些根本无法避免。而&lt;strong>高可用的系统架构设计目标就是要保证当出现硬件故障时，服务依然可用，数据依然能够保存并被访问&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>所以实现高可用的系统架构的主要手段是数据和服务的冗余备份及失效转移&lt;/strong>，一旦某些服务器宕机，就将服务切换到其他可用的服务器上；如果磁盘损坏，则从备份的磁盘读取数据。&lt;/p>
&lt;p>&lt;strong>【推荐阅读】&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://xie.infoq.cn/article/132b10ce236094d4b360715eb">导致系统不可用的原因有哪些？保障系统稳定高可用的方案有哪些？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://coolshell.cn/articles/17459.html">关于高可用的系统 | 酷壳&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>【文章节选】真正决定高可用系统的本质原因&lt;/strong>&lt;/p>
&lt;p>从上面这些会影响高可用的SLA的因素，你看到了什么？如果你还是只看到了技术方面或是软件设计的东西，那么你只看到了冰山一角。我们再仔细想一想，&lt;strong>那个5个9的SLA在一年内只能是5分钟的不可用时间，5分钟啊，如果按一年只出1次故障，你也得在五分钟内恢复故障，让我们想想，这意味着什么？&lt;/strong>&lt;/p>
&lt;p>&lt;strong>如果你没有一套科学的牛逼的软件工程的管理，没有牛逼先进的自动化的运维工具，没有技术能力很牛逼的工程师团队，怎么可能出现高可用的系统啊&lt;/strong>。&lt;/p>
&lt;p>是的，&lt;strong>要干出高可用的系统，这TMD就是一套严谨科学的工程管理&lt;/strong>，其中包括但不限于了：&lt;/p>
&lt;ul>
&lt;li>软件的设计、编码、测试、上线和软件配置管理的水平&lt;/li>
&lt;li>工程师的人员技能水平&lt;/li>
&lt;li>运维的管理和技术水平&lt;/li>
&lt;li>数据中心的运营管理水平&lt;/li>
&lt;li>依赖于第三方服务的管理水平&lt;/li>
&lt;/ul>
&lt;p>深层次的东西则是——对工程这门科学的尊重：&lt;/p>
&lt;ul>
&lt;li>对待技术的态度&lt;/li>
&lt;li>一个公司的工程文化&lt;/li>
&lt;li>领导者对工程的尊重&lt;/li>
&lt;/ul>
&lt;/blockquote></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/><category scheme="https://kiwi4814.github.io/tags/2021/10/%E9%AB%98%E5%8F%AF%E7%94%A8/" term="高可用" label="高可用"/></entry><entry><title type="text">单元测试之三：参数化测试</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/unittest3/"/><id>https://kiwi4814.github.io/posts/2021/unittest3/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-09-08T22:40:15+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、参数化测试 有时候对于同一个单元测试，我们并不希望只测试一组参数，而是期望对传入的……</summary><content type="html">&lt;h2 id="一参数化测试">一、参数化测试&lt;/h2>
&lt;p>有时候对于同一个单元测试，我们并不希望只测试一组参数，而是期望对传入的不同参数返回不同的结果。参数化测试允许开发人员使用不同的值反复运行同一个测试。&lt;/p>
&lt;h2 id="二在系统中集成参数化测试">二、在系统中集成参数化测试&lt;/h2>
&lt;p>参数化测试主要有如下步骤实现：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>用 @RunWith(Parameterized.class) 来注释 test 类；&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现 @Parameters注解的公共静态方法，返回值是一个数组对象，作为测试的参数集合；&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建一个公共的构造函数，它接受和一行测试数据相等同的东西；&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为每一列测试数据创建一个实例变量；&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用实例变量作为测试数据的来源来创建你的测试用例。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>首先，我们在上节中使用Mockito时Test类的注解已经变成了**&lt;code>MockitoJUnitRunner&lt;/code>**，为了能兼容Mockito的使用，我们需要手动初始化Mockito，代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlarmInfoServiceImplDESTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@InjectMocks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlarmInfoServiceImpl&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Before&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initMocks&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MockitoAnnotations&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initMocks&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testMethod&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在此基础上，我们实现集成了Parameterized.class的单元测试类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Parameterized&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlarmInfoServiceImplParameterizedTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@InjectMocks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlarmInfoServiceImpl&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Before&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initMocks&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MockitoAnnotations&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initMocks&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">cellPhone&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">AlarmInfoServiceImplParameterizedTest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cellPhone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cellPhone&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Parameterized.Parameters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;{index}: des({0}_{1})&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&amp;gt;&lt;/span> &lt;span class="nf">data&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[][]{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589436&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582A&amp;#34;&lt;/span>&lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589437&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582B&amp;#34;&lt;/span>&lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589438&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582C&amp;#34;&lt;/span>&lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589439&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582D&amp;#34;&lt;/span>&lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589440&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582E&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">AESTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReflectionTestUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;H5SlatKey&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;htGyqmtq2IdlA7Y2&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReflectionTestUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;h5MessagePrefix&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;【deptName】您的报警信息已经收到，点击查看}&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">encrypt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">encrypt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BaseH5DecodeModel&lt;/span> &lt;span class="n">decrypt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decrypt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">encrypt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAlarmCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCellPhone&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">encrypt&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPath&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="三使用junitparams">三、使用JUnitParams&lt;/h2>
&lt;p>但是，使用上面的方法实现起来未免太麻烦，这意味着一个类中只能写一个单元测试，而通常情况下对于同一个方法，我们可能有很多的单元测试用例，要传递不同的参数，全部应用参数化测试的时候工作量太大。为此，我们引入&lt;code>JUnitParams&lt;/code>来解决这个问题。&lt;/p>
&lt;p>官方文档对于&lt;code>JUnitParams&lt;/code>的介绍只有一句话：&lt;/p>
&lt;blockquote>
&lt;p>Parameterised tests that don't suck.&lt;/p>
&lt;/blockquote>
&lt;p>直译的话就是让你的单元测试不会很差劲。这个工具主要针对JUnit4，因为Junit5已经对参数化测试做了优化，功能更加强大和便捷。&lt;/p>
&lt;p>JUnitParams和默认的Parameterized.class的区别之处在于：&lt;/p>
&lt;ul>
&lt;li>参数定义在测试方法参数中，而不是类的字段&lt;/li>
&lt;li>不需要构造函数来设置参数&lt;/li>
&lt;li>可以在一个类中使用非参数化方法进行参数化测试&lt;/li>
&lt;li>参数可以写在csv文件或者单独的类中提供&lt;/li>
&lt;li>参数提供程序类可以具有尽可能多的参数提供方法，以便分组不同的案例&lt;/li>
&lt;li>可以有一个提供参数的测试方法&lt;/li>
&lt;li>您可以在IDE中看到实际参数值(在JUnit的Parametrised中，它只有连续数量的参数)&lt;/li>
&lt;/ul>
&lt;p>这里列出一些常见的写法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>通过注解来实现&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JUnitParamsRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlarmInfoServiceImplJUnitParamsTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@InjectMocks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlarmInfoServiceImpl&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Before&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initMocks&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MockitoAnnotations&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initMocks&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Parameters&lt;/span>&lt;span class="o">({&lt;/span>&lt;span class="s">&amp;#34;13764589436|202102231536A&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;13764589437|202102231536A&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">AESTest2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReflectionTestUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;H5SlatKey&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;htGyqmtq2IdlA7Y2&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReflectionTestUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;h5MessagePrefix&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;【deptName】您的报警信息已经收到，点击查看}&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">encrypt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">encrypt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BaseH5DecodeModel&lt;/span> &lt;span class="n">decrypt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decrypt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">encrypt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAlarmCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCellPhone&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">encrypt&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPath&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>通过方法来实现&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JUnitParamsRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlarmInfoServiceImplJUnitParamsTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@InjectMocks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlarmInfoServiceImpl&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Before&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initMocks&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MockitoAnnotations&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initMocks&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&amp;gt;&lt;/span> &lt;span class="nf">data&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[][]{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589436&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582A&amp;#34;&lt;/span>&lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589437&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582B&amp;#34;&lt;/span>&lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589438&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582C&amp;#34;&lt;/span>&lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589439&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582D&amp;#34;&lt;/span>&lt;span class="o">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;13764589440&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202102164582E&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Parameters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">method&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">AESTest2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReflectionTestUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;H5SlatKey&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;htGyqmtq2IdlA7Y2&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReflectionTestUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;h5MessagePrefix&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;【deptName】您的报警信息已经收到，点击查看}&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">encrypt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">encrypt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BaseH5DecodeModel&lt;/span> &lt;span class="n">decrypt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decrypt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">encrypt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAlarmCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCellPhone&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">encrypt&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPath&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>通过csv文件实现&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JUnitParamsRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlarmInfoServiceImplJUnitParamsTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@InjectMocks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlarmInfoServiceImpl&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Before&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initMocks&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MockitoAnnotations&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initMocks&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@FileParameters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;classpath:test.csv&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">AESTest1&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReflectionTestUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;H5SlatKey&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;htGyqmtq2IdlA7Y2&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReflectionTestUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;h5MessagePrefix&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;【deptName】您的报警信息已经收到，点击查看}&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">encrypt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">encrypt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BaseH5DecodeModel&lt;/span> &lt;span class="n">decrypt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alarmInfoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decrypt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">encrypt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAlarmCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellPhone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCellPhone&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">encrypt&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPath&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;p>&lt;a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304065789132833">https://www.liaoxuefeng.com/wiki/1252599548343744/1304065789132833&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/">Writing Parameterized Tests With JUnit 4 (testwithspring.com)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.baeldung.com/junit-params">Introduction to JUnitParams | Baeldung&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/" term="单元测试" label="单元测试"/><category scheme="https://kiwi4814.github.io/tags/2021/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/" term="单元测试" label="单元测试"/></entry><entry><title type="text">单元测试之二：代码用例</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/unittest2/"/><id>https://kiwi4814.github.io/posts/2021/unittest2/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-09-05T22:40:15+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、引入 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 从*dependency:tree*中我们可以看到： ![……</summary><content type="html">&lt;h2 id="一引入">一、引入&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-test&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从*&lt;code>dependency:tree&lt;/code>*中我们可以看到：&lt;/p>
&lt;p>![image-20210527095848554](../../../../slipbox/ReadingNotes/极客时间学习/数据结构与算法之美/Users/heqifeng/Library/Application Support/typora-user-images/image-20210527095848554.png)&lt;/p>
&lt;p>里面默认依赖了我们会可能会用到包：&lt;/p>
&lt;ul>
&lt;li>&lt;code>JUnit&lt;/code>，标准的单元测试Java应用程序；&lt;/li>
&lt;li>&lt;code>Spring Test &amp;amp; Spring Boot Test&lt;/code>，对Spring Boot应用程序的单元测试提供支持；&lt;/li>
&lt;li>&lt;code>Mockito&lt;/code>, Java mocking框架，用于模拟任何Spring管理的Bean，比如在单元测试中模拟一个第三方系统Service接口返回的数据，而不会去真正调用第三方系统；&lt;/li>
&lt;li>&lt;code>AssertJ&lt;/code>，一个流畅的assertion库，同时也提供了更多的期望值与测试返回值的比较方式；&lt;/li>
&lt;li>&lt;code>Hamcrest&lt;/code>，库的匹配对象（也称为约束或谓词）；&lt;/li>
&lt;li>&lt;code>JsonPath&lt;/code>，提供类似XPath那样的符号来获取JSON数据片段；&lt;/li>
&lt;li>&lt;code>JSONassert&lt;/code>，对JSON对象或者JSON字符串断言的库。&lt;/li>
&lt;/ul>
&lt;p>此外，在后续的使用过程中，为了在单元测试中实现各种各样的功能，我们还将引入一下jar包：&lt;/p>
&lt;p>&lt;strong>1. MyBatis-Test，用于在单元测试中测试持久层&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.mybatis.spring.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>mybatis-spring-boot-starter-test&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.3.5&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>2. 用于JSON数据的断言&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.jayway.jsonpath&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>json-path-assert&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>${jsonPath.assert.version}&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>3. powermock，用于mock静态方法、枚举、构造器等&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.powermock&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>powermock-module-junit4&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>${powermock.version}&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.powermock&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>powermock-api-mockito&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>${powermock.version}&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>4. JUnitParams，用于参数化测试的辅助&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>pl.pragmatists&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>JUnitParams&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.1.1&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="二知识准备">二、知识准备&lt;/h2>
&lt;h3 id="1-junit基本注解">1. &lt;code>Junit&lt;/code>基本注解&lt;/h3>
&lt;p>&lt;code>Junit4&lt;/code>单元测试主流程中的主要注解有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>@BeforeClass&lt;/code>&lt;/li>
&lt;li>&lt;code>@Before&lt;/code>&lt;/li>
&lt;li>&lt;code>@Test&lt;/code>&lt;/li>
&lt;li>&lt;code>@After&lt;/code>&lt;/li>
&lt;li>&lt;code>@AfterClass&lt;/code>&lt;/li>
&lt;li>&lt;code>@Ignore&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其中， &lt;code>@BeforeClass&lt;/code>和&lt;code>@AfterClass&lt;/code>在每个类加载的开始和结束时运行，必须为静态方法；而&lt;code>@Before&lt;/code>和&lt;code>@After&lt;/code>则在每个测试方法开始之前和结束之后运行。执行次序是&lt;code>@BeforeClass&lt;/code> -&amp;gt; &lt;code>@Before&lt;/code> -&amp;gt; &lt;code>@Test&lt;/code> -&amp;gt; &lt;code>@After&lt;/code> -&amp;gt; &lt;code>@Before&lt;/code> -&amp;gt; &lt;code>@Test&lt;/code> -&amp;gt; &lt;code>@After&lt;/code> -&amp;gt; &lt;code>@AfterClass&lt;/code>。&lt;code>@Ignore&lt;/code>会被忽略。&lt;/p>
&lt;h3 id="2-assert断言工具">2. &lt;code>Assert&lt;/code>断言工具&lt;/h3>
&lt;p>&lt;code>Junit4&lt;/code>提供了一个Assert类，Assert类中定义了很多静态方法来进行断言。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>assertEquals(&amp;quot;message&amp;quot;,A,B)&lt;/code>，判断A对象和B对象是否相等，这个判断在比较两个对象时调用了equals()方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>assertSame(&amp;quot;message&amp;quot;,A,B)&lt;/code>，判断A对象与B对象是否相同，使用的是==操作符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>assertTrue(&amp;quot;message&amp;quot;,A)&lt;/code>，判断A条件是否为真。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>assertFalse(&amp;quot;message&amp;quot;,A)&lt;/code>，判断A条件是否不为真。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>assertNotNull(&amp;quot;message&amp;quot;,A)&lt;/code>，判断A对象是否不为null。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>assertArrayEquals(&amp;quot;message&amp;quot;,A,B)&lt;/code>，判断A数组与B数组是否相等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-mockmvc">3. &lt;code>MockMvc&lt;/code>&lt;/h3>
&lt;p>MockMvc，从字面上来看指的是模拟的MVC，即其可以模拟一个MVC环境，向Controller发送请求然后得到响应。&lt;/p>
&lt;p>利用MockMvc我们可以模拟get、post、文件上传、session和cookie等，并且对返回结果进行处理。这里贴出一些常用的代码段：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模拟get请求
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/jqxx/get?jqbh={jqbh}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;jqbh&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模拟post请求
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">post&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/jqxx/put/{jqbh}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202105212106A&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模拟文件上传：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fileUpload&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/fileupload&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">file&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;file&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;文件内容&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBytes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 设置返回格式为JSON：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/user/{id}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">accept&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模拟HTTP请求头：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/user/{id}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">header&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;values&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模拟发送一个message参数，值为hello
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/hello&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">param&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模拟提交一个checkbox值，name为hobby，值为sleep和eat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/saveHobby&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">param&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;hobby&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;eat&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模拟Session和Cookie：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/index&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">sessionAttr&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/index&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">cookie&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Cookie&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 设置请求的Content-Type：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/index&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">contentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 期望成功调用，即HTTP Status为200：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/user/{id}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcResultMatchers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">status&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isOk&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 期望返回内容是application/json：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/user/{id}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcResultMatchers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">content&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">contentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 检查返回JSON数据中某个值的内容：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcRequestBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/user/{id}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockMvcResultMatchers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jsonPath&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;$.username&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mrbird&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-mockito">4. &lt;code>Mockito&lt;/code>&lt;/h3>
&lt;p>官方文档：&lt;a href="https://javadoc.io/static/org.mockito/mockito-core/2.28.2/org/mockito/Mockito.html">Mockito (Mockito 2.28.2 API) (javadoc.io)&lt;/a>&lt;/p>
&lt;p>Mockito 是一个强大的用于 Java 开发的模拟测试框架, 通过 Mockito 我们可以创建和配置 Mock 对象, 进而简化有外部依赖的类的测试。目前在 Java 中主流的 mock 测试工具有 Mockito、JMock、EasyMock..等，而 SpringBoot 目前內建的是 Mockito 框架。使用 Mockito 的大致流程如下：&lt;/p>
&lt;ul>
&lt;li>创建外部依赖的 Mock 对象，然后将此 Mock 对象注入到测试类中。&lt;/li>
&lt;li>执行测试代码。&lt;/li>
&lt;li>校验测试代码是否执行正确。&lt;/li>
&lt;/ul>
&lt;h4 id="1injectmocks">（1）@InjectMocks&lt;/h4>
&lt;p>&lt;strong>创建一个实例，简单的说是这个Mock可以调用真实代码的方法，其余用@Mock（或@Spy）注解创建的mock将被注入到用该实例中。&lt;/strong>&lt;/p>
&lt;h4 id="2mock">（2）@Mock&lt;/h4>
&lt;p>&lt;strong>对函数的调用均执行mock（即虚假函数），不执行真正部分。&lt;/strong>&lt;/p>
&lt;h4 id="3spy">（3）@Spy&lt;/h4>
&lt;p>&lt;strong>对函数的调用进行监视，优先执行打桩的代码，否则执行真实的代码&lt;/strong>&lt;/p>
&lt;h2 id="三单元测试">三、单元测试&lt;/h2>
&lt;h3 id="1-使用mockito测试服务层代码">1. 使用Mockito测试服务层代码&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockitoJUnitRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlarmInfoTestServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@InjectMocks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlarmInfoTestServiceImpl&lt;/span> &lt;span class="n">alarmInfoTestService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Mock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">RbacCurrentUserService&lt;/span> &lt;span class="n">currentUserService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Mock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">ErsZxxxExtMapper&lt;/span> &lt;span class="n">ersZxxxExtMapper&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AuthUser&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AuthUser&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;poc-hqf&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;000000&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">when&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentUserService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findCurrentAuthUser&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">thenReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">when&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ersZxxxExtMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">selectAllFjhmAndzxzt&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">thenReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ZxFjZtDTO&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">zxFjZtDTOS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alarmInfoTestService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">saveTest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;111&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">zxFjZtDTOS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-使用mybatistest测试持久层代码">2. 使用MyBatisTest测试持久层代码&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@ContextConfiguration&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">classes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">ErsZxxxExtMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestMapperTest&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">BaseMapperConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Resource&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">ErsZxxxExtMapper&lt;/span> &lt;span class="n">ersZxxxExtMapper&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">selectZxxxList&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ZxFjZtDTO&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ersZxxxExtMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">selectAllFjhmAndzxzt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;==========Mapper Test Result==========&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">(),&lt;/span>&lt;span class="n">25&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@MybatisTest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@AutoConfigureTestDatabase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">replace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AutoConfigureTestDatabase&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Replace&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NONE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@ActiveProfiles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;dev&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@MapperScan&lt;/span>&lt;span class="o">({&lt;/span>&lt;span class="s">&amp;#34;com.kedacom.ers.**.mapper&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BaseMapperConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-测试controller">3. 测试Controller&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockitoJUnitRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@WebMvcTest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">secure&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//@ContextConfiguration(classes = {AlarmInfoTestController.class})
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlarmInfoControllerTest2&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MockMvc&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Mock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">RbacCurrentUserService&lt;/span> &lt;span class="n">currentUserService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@InjectMocks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlarmInfoTestController&lt;/span> &lt;span class="n">alarmInfoTestController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 初始化默认的mockMvc行为
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Before&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setup&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mockMvc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">standaloneSetup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">alarmInfoTestController&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">alwaysDo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">alwaysExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">contentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">alwaysExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isOk&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AuthUser&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AuthUser&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;poc-hqf&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;000000&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">given&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentUserService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findCurrentAuthUser&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">willReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/jqxx/save2&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">accept&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">param&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;deptCode&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;111&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">contentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isOk&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andReturn&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getContentAsString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用mockMvc时针对controller不同的参数类型如何入参：&lt;/p>
&lt;h4 id="requestparam">@RequestParam&lt;/h4>
&lt;p>测试类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/jqxx&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlarmInfoTestController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/list&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseMessage&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getJqxxList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@RequestParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;jqbh&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">jqbh&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nd">@RequestParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;deptCode&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">deptCode&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;this is a test=={}=={}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">jqbh&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">deptCode&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ResponseMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Succeed&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方法1:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getJqxxList&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/jqxx/list&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">param&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jqbh&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202105161215A&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">param&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;deptCode&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;5e10e7d4c651428a86977f5fe0947204&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">contentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isOk&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jsonPath&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;$.result&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Succeed1&amp;#34;&lt;/span>&lt;span class="o">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andReturn&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getContentAsString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方法2:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getJqxxList&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/jqxx/list?jqbh={jqbh}&amp;amp;deptCode={deptCode},&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202105161215A&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;5e10e7d4c651428a86977f5fe0947204&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">contentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isOk&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jsonPath&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;$.result&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Succeed1&amp;#34;&lt;/span>&lt;span class="o">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andReturn&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getContentAsString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方法3:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getJqxxList&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MultiValueMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">params&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedMultiValueMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jqbh&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202105161215A&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;deptCode&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;5e10e7d4c651428a86977f5fe0947204&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/jqxx/list&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">params&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">contentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isOk&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jsonPath&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;$.result&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Succeed1&amp;#34;&lt;/span>&lt;span class="o">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andReturn&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getContentAsString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="pathvariable">@PathVariable&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getJqxxList2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/jqxx/get/{jqbh}?deptCode={deptCode},&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;202105161215A&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;5e10e7d4c651428a86977f5fe0947204&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">contentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isOk&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jsonPath&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;$.result&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Succeed1&amp;#34;&lt;/span>&lt;span class="o">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andReturn&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getContentAsString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="requestbody">@RequestBody&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>使用JSON的方式传递&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">public&lt;/span> &lt;span class="err">void&lt;/span> &lt;span class="err">getJqxxList&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">()&lt;/span> &lt;span class="err">throws&lt;/span> &lt;span class="err">Exception&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">String&lt;/span> &lt;span class="err">jsonStr&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="nt">&amp;#34;{\&amp;#34;jqbh\&amp;#34;:\&amp;#34;202105161215A\&amp;#34;,\&amp;#34;departmentCode\&amp;#34;:\&amp;#34;5e10e7d4c651428a86977f5fe0947204\&amp;#34;}&amp;#34;&lt;/span>&lt;span class="err">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">String&lt;/span> &lt;span class="err">result&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">mockMvc.perform(get(&lt;/span>&lt;span class="s2">&amp;#34;/jqxx/list&amp;#34;&lt;/span>&lt;span class="err">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.content(jsonStr.getBytes(StandardCharsets.UTF_&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="err">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.contentType(MediaType.APPLICATION_JSON_UTF&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="err">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.andExpect(status().isOk())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.andExpect(jsonPath(&lt;/span>&lt;span class="s2">&amp;#34;$.result&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">is(&lt;/span>&lt;span class="nt">&amp;#34;Succeed1&amp;#34;&lt;/span>&lt;span class="err">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.andReturn().getResponse().getContentAsString();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">public&lt;/span> &lt;span class="err">void&lt;/span> &lt;span class="err">getJqxxList&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">()&lt;/span> &lt;span class="err">throws&lt;/span> &lt;span class="err">Exception&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">ErsJqxxConditonQuery&lt;/span> &lt;span class="err">query&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">new&lt;/span> &lt;span class="err">ErsJqxxConditonQuery();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">query.setJqbh(&lt;/span>&lt;span class="nt">&amp;#34;202105161215A&amp;#34;&lt;/span>&lt;span class="err">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">query.setDepartmentCode(&lt;/span>&lt;span class="s2">&amp;#34;5e10e7d4c651428a86977f5fe0947204&amp;#34;&lt;/span>&lt;span class="err">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">String&lt;/span> &lt;span class="err">userJson&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">JSONUtil.toJsonStr(query);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">String&lt;/span> &lt;span class="err">result&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">mockMvc.perform(get(&lt;/span>&lt;span class="s2">&amp;#34;/jqxx/list&amp;#34;&lt;/span>&lt;span class="err">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.content(userJson.getBytes(StandardCharsets.UTF_&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="err">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.accept(MediaType.APPLICATION_JSON_UTF&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="err">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.contentType(MediaType.APPLICATION_JSON_UTF&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="err">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.andExpect(status().isOk())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.andExpect(jsonPath(&lt;/span>&lt;span class="s2">&amp;#34;$.result&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">is(&lt;/span>&lt;span class="nt">&amp;#34;Succeed1&amp;#34;&lt;/span>&lt;span class="err">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">.andReturn().getResponse().getContentAsString();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="4-综合测试">4. 综合测试&lt;/h3>
&lt;p>&lt;strong>有时候，我们并不想单纯的测试controller或者service，我们只想把一些复杂的或者中间件服务的代码进行Mock，其余的均模拟真实的环境进行测试，也就是从controller到service到mapper进行全方位的测试。这时候我们需要使用Spring-Boot-Test提供的MockBean和SpyBean注解来实现。&lt;/strong>&lt;/p>
&lt;h4 id="mock与mockbean的区别">@Mock与@MockBean的区别&lt;/h4>
&lt;p>@Mock是Mockito提供的注解，用于快速的模拟所需要的bean。&lt;/p>
&lt;p>@MockBean的作用是允许在Spring ApplicationContext中添加Mockito模拟。它的含义是如果上下文中存在与声明的类兼容的 bean，则用 mock 替换它。否则它会将 mock 作为 bean 添加到上下文中。&lt;/p>
&lt;h4 id="mock和spy的区别">@Mock和@Spy的区别&lt;/h4>
&lt;p>对于未指定mock的方法，spy默认会调用真实的方法，有返回值的返回真实的返回值，而mock默认不执行，有返回值的，默认返回null。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>spy和mock生成的对象不受spring管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>spy调用真实方法时，其它bean是无法注入的，要使用注入，要使用SpyBean&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SpyBean和MockBean生成的对象受spring管理，相当于自动替换对应类型bean的注入，比如@Autowired等注入&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="代码用例">代码用例&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@WebMvcTest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">secure&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//@ContextConfiguration(classes = {AlarmInfoTestController.class})
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nd">@AutoConfigureTestDatabase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">replace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AutoConfigureTestDatabase&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Replace&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NONE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@ActiveProfiles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;dev&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@MapperScan&lt;/span>&lt;span class="o">({&lt;/span>&lt;span class="s">&amp;#34;com.kedacom.ers.**.mapper&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@AutoConfigureMybatis&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AlarmInfoControllerTest3&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MockMvc&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@MockBean&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">RbacCurrentUserService&lt;/span> &lt;span class="n">currentUserService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@SpyBean&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">AlarmInfoTestServiceImpl&lt;/span> &lt;span class="n">alarmInfoTestService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AuthUser&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AuthUser&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;poc-hqf&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;000000&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">when&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">currentUserService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findCurrentAuthUser&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">thenReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/jqxx/save3&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">accept&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">param&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;deptCode&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;111&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">contentType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MediaType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">APPLICATION_JSON_UTF8&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andExpect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isOk&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">andReturn&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getContentAsString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="5-powermock介绍">5. PowerMock介绍&lt;/h3>
&lt;p>PowerMock可以和Mockito配合使⽤，版本之间的对应关系如下：&lt;/p>
&lt;p>&lt;img src="../../../../slipbox/ReadingNotes/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/Users/heqifeng/Pictures/PowerMock-Mockito.png" alt="PowerMock-Mockito">&lt;/p>
&lt;p>由于PowerMock的机制是反射，所以除了⼀些特殊的地⽅需要使⽤到PowerMock的，其余测试仍然推荐使⽤ Mockito。具体如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Mock Final类&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testMockFinalMethod&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span> &lt;span class="n">student&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PowerMockito&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mock&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">mockFinalMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;mockFinalMethod&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">when&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getFinalMethod&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">thenReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mockFinalMethod&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertThat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getFinalMethod&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mockFinalMethod&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Mock 私有⽅法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mock 静态⽅法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mock 构造器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testMockConstructMethod&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span> &lt;span class="n">student1000&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PowerMockito&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">whenNew&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">withArguments&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">thenReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">student1000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span> &lt;span class="n">student10&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertThat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">student10&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAge&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Mock 枚举Enum&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testMockEnum&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PersonType&lt;/span> &lt;span class="n">personType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PowerMockito&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mock&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PersonType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Whitebox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setInternalState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PersonType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;N&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">personType&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">when&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">personType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getType&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">thenReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mockN&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertThat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PersonType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">N&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getType&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mockN&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertThat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PersonType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">S&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getType&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">is&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;student&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>代码⽤例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PowerMockRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@PrepareForTest&lt;/span>&lt;span class="o">({&lt;/span>&lt;span class="n">MockMvcServiceImpl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">StaticUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ShardCacheRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IPUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PowerMockServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@InjectMocks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MockMvcServiceImpl&lt;/span> &lt;span class="n">mockMvcService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Mock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">RbacCurrentUserService&lt;/span> &lt;span class="n">currentUserService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Mock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">ErsZxxxExtMapper&lt;/span> &lt;span class="n">ersZxxxExtMapper&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 如果不需要mock静态方法，直接使用即可
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">powermock_serviceUseStatic_givenNumber&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">when&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mockMvcService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">codeWithStatic&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">anyString&lt;/span>&lt;span class="o">())).&lt;/span>&lt;span class="na">thenReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">when&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ersZxxxExtMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">selectDeviceIdByUserId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">anyString&lt;/span>&lt;span class="o">())).&lt;/span>&lt;span class="na">thenReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;1030&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">ip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mockMvcService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">codeWithStatic&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;testTest&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//Assert.assertEquals(&amp;#34;192.168.42.68&amp;#34;, ip);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * mock静态方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">powermock_staticPublic_givenNumber&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PowerMockito&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">spy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StaticUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">test&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;111&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PowerMockito&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">when&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StaticUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;getPublicInfo&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">publicInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StaticUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPublicInfo&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">publicInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * mock私有方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">powermock_staticPrivate_givenNumber&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PowerMockito&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">spy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StaticUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">test&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;111&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PowerMockito&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">when&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StaticUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;getPrivateInfo&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">publicInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StaticUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPrivateInfoUsePublic&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">publicInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;p>&lt;a href="https://docs.spring.io/spring-framework/docs/4.3.18.RELEASE/spring-framework-reference/html/integration-testing.html#spring-mvc-test-server">Spring-Documentation - 15.6.1 Server-Side Tests&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.spring.io/spring-framework/docs/4.3.18.RELEASE/javadoc-api/index.html?org/springframework/web/socket/sockjs/transport/TransportType.html">MockMvc (Spring Framework 4.3.18.RELEASE API)&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-test-autoconfigure/index.html">mybatis-spring-boot-test-autoconfigure – Introduction&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.baeldung.com/spring-tests">Optimizing Spring Integration Tests | Baeldung&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.baeldung.com/integration-testing-in-spring">Integration Testing in Spring | Baeldung&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.baeldung.com/spring-boot-testing#integration-testing-with-datajpatest">Testing in Spring Boot | Baeldung&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/json-path/JsonPath">json-path/JsonPath: Java JsonPath implementation (github.com)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/hehonghui/mockito-doc-zh#0">hehonghui/mockito-doc-zh: Mockito框架中文文档 (github.com)&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/" term="单元测试" label="单元测试"/><category scheme="https://kiwi4814.github.io/tags/2021/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/" term="单元测试" label="单元测试"/></entry><entry><title type="text">单元测试之一：初识单元测试</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2021/unittest1/"/><id>https://kiwi4814.github.io/posts/2021/unittest1/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2021-09-03T22:40:15+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">单元测试是编写测试代码，用来检测特定的、明确的、细颗粒的功能。单元测试并不一定保证程……</summary><content type="html">&lt;p>单元测试是编写测试代码，用来检测特定的、明确的、细颗粒的功能。单元测试并不一定保证程序功能是正确的，更不保证整体业务是准备的。单元测试不仅仅用来保证当前代码的正确性，更重要的是用来保证代码&lt;strong>修复&lt;/strong>、&lt;strong>改进&lt;/strong>或&lt;strong>重构&lt;/strong>之后的正确性。&lt;/p>
&lt;p>与之相应的，有集成测试（ Integration Testing）——集成测试是在单元测试的基础上，将所有模块按照概要设计要求组装成为子系统或系统，验证组装后功能以及模块间接口是否正确的测试工作。集成测试也叫组装测试、联合测试、子系统测试或部件测试。最简单的集成测试的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@SpringBootTest&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SpringBootTest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">WebEnvironment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MOCK&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">classes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Application&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@AutoConfigureMockMvc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@TestPropertySource&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">locations&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;classpath:application-integrationtest.properties&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EmployeeRestControllerIntegrationTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MockMvc&lt;/span> &lt;span class="n">mvc&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">EmployeeRepository&lt;/span> &lt;span class="n">repository&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// write test cases here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意的是，整个容器加载完成后才会执行集成测试。而在实际开发过程中，我们往往只需要验证自己所负责的功能模块，也就是需要快速的启动和验证，所以只需要注入相关依赖并执行即可。&lt;/p>
&lt;h2 id="一单元测试的基本方法">一、单元测试的基本方法&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>接口功能测试：用来保证接口功能的正确性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据结构测试：用来保证接口中的数据结构是正确的，比如变量有无初始值、变量是否溢出等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>边界条件测试&lt;/p>
&lt;ol>
&lt;li>&lt;strong>变量没有赋值&lt;/strong>（即为NULL）&lt;/li>
&lt;li>变量是数值（或字符)
&lt;ol>
&lt;li>&lt;strong>主要边界&lt;/strong>：最小值，最大值，无穷大（对于DOUBLE等）&lt;/li>
&lt;li>&lt;strong>溢出边界&lt;/strong>（期望异常或拒绝服务）：最小值-1，最大值+1&lt;/li>
&lt;li>&lt;strong>临近边界&lt;/strong>：最小值+1，最大值-1&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>变量是字符串：空字符串、可能引发异常的字符串&lt;/li>
&lt;li>变量是集合：空集合、集合的边界&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>所有独立执行通路测试：&lt;strong>代码覆盖率&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>语句覆盖：保证每一个语句都执行到了&lt;/li>
&lt;li>判定覆盖（分支覆盖）：保证每一个分支都执行到&lt;/li>
&lt;li>条件覆盖：保证每一个条件都覆盖到true和false（即if、while中的条件语句）&lt;/li>
&lt;li>路径覆盖：保证每一个路径都覆盖到&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>错误处理通路测试：保证每一个异常都经过测试&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关于mock&lt;/p>
&lt;p>（1）Mock可以用来解除测试对象对外部服务的依赖（比如数据库，第三方接口等），使得测试用例可以独立运行。不管是传统的单体应用，还是现在流行的微服务，这点都特别重要，因为任何外部依赖的存在都会极大的限制测试用例的可迁移性和稳定性。&lt;/p>
&lt;p>（2）Mock的第二个好处是替换外部服务调用，提升测试用例的运行速度。任何外部服务调用至少是跨进程级别的消耗，甚至是跨系统、跨网络的消耗，而Mock可以把消耗降低到进程内。比如原来一次秒级的网络请求，通过Mock可以降至毫秒级，整整3个数量级的差别。&lt;/p>
&lt;p>（3）Mock的第三个好处是提升测试效率。这里说的测试效率有两层含义。第一层含义是单位时间运行的测试用例数，这是运行速度提升带来的直接好处。而第二层含义是一个测试人员单位时间创建的测试用例数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="二原则摘自阿里巴巴开发规范可参考">二、原则（摘自阿里巴巴开发规范，可参考）&lt;/h2>
&lt;ol>
&lt;li>【强制】好的单元测试必须遵守 AIR 原则。 说明：单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。
&lt;ul>
&lt;li>A：Automatic（自动化）&lt;/li>
&lt;li>I：Independent（独立性）&lt;/li>
&lt;li>R：Repeatable（可重复）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的， 执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。 &lt;strong>单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。&lt;/strong>&lt;/li>
&lt;li>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之 间决不能互相调用，也不能依赖执行的先后次序。 反例：method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。&lt;/li>
&lt;li>【强制】单元测试是可以重复执行的，不能受到外界环境的影响。 说明：单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部 环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。 正例：为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring 这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。&lt;/li>
&lt;li>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类 级别，一般是方法级别。 说明：只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑， 那是集成测试的领域。&lt;/li>
&lt;li>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。 说明：新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。&lt;/li>
&lt;li>【强制】&lt;strong>单元测试代码必须写在如下工程目录：src/test/java，不允许写在业务代码目录下。&lt;/strong> 说明：源码编译时会跳过此目录，而单元测试框架默认是扫描此目录。&lt;/li>
&lt;li>【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率 都要达到 100% 说明：在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该进行单元 测试。&lt;/li>
&lt;li>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。
&lt;ul>
&lt;li>B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。&lt;/li>
&lt;li>C：Correct，正确的输入，并得到预期的结果。&lt;/li>
&lt;li>D：Design，与设计文档相结合，来编写单元测试。&lt;/li>
&lt;li>E：Error，强制错误信息输入（如：非法数据、异常流程、业务允许外等），并得到预期的结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的， 或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。 反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数 据并不符合业务插入规则，导致测试结果异常。&lt;/li>
&lt;li>【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者 对单元测试产生的数据有明确的前后缀标识。 正例：在企业智能事业部的内部单元测试中，使用 ENTERPRISE_INTELLIGENCE _UNIT_TEST_的前缀来 标识单元测试相关代码。&lt;/li>
&lt;li>【推荐】对于不可测的代码在适当的时机做必要的重构，使代码变得可测，避免为了达到测 试要求而书写不规范测试代码。&lt;/li>
&lt;li>【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好 覆盖所有测试用例。&lt;/li>
&lt;li>【推荐】单元测试作为一种质量保障手段，在项目提测前完成单元测试，不建议项目发布后 补充单元测试用例。&lt;/li>
&lt;li>【参考】为了更方便地进行单元测试，业务代码应避免以下情况： 构造方法中做的事情过多。
&lt;ul>
&lt;li>存在过多的全局变量和静态方法。&lt;/li>
&lt;li>存在过多的外部依赖。&lt;/li>
&lt;li>存在过多的条件语句。 说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>【参考】不要对单元测试存在如下误解：
&lt;ul>
&lt;li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。&lt;/li>
&lt;li>单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。&lt;/li>
&lt;li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。&lt;/li>
&lt;li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="三规范">三、规范&lt;/h2>
&lt;h4 id="1-单元测试代码的位置">1. 单元测试代码的位置&lt;/h4>
&lt;p>单元测试的代码统一放在**&lt;code>ers-web/src/test&lt;/code>**目录下，并且目录结构与要测试的测试类保持一致。例如对&lt;code>com.kedacom.ers.police.alarm.controller.AlarmInfoController&lt;/code>进行单元测试时，相应的单元测试类也应该放在test下相应的位置。&lt;/p>
&lt;h4 id="2-单元测试类的命名规范">2. 单元测试类的命名规范&lt;/h4>
&lt;p>&lt;strong>被测试的类名+方法名（业务名）+ Test&lt;/strong>，例如&lt;code>AlarmInfoControllerJqxxTest&lt;/code>表示这是对&lt;code>AlarmInfoController&lt;/code>这个类中关于警情信息相关业务的测试用例。&lt;/p>
&lt;h4 id="3-测试用例的命名定义规范">3. 测试用例的命名定义规范&lt;/h4>
&lt;p>&lt;strong>方法名_输入_期望的输出&lt;/strong>&lt;/p>
&lt;p>比如：dataList_nullParams_ExceptionThrown&lt;/p>
&lt;p>&lt;a href="https://dzone.com/articles/7-popular-unit-test-naming">7 Popular Unit Test Naming Conventions - DZone Agile&lt;/a>&lt;/p>
&lt;h4 id="4变量的命名规范">4.变量的命名规范&lt;/h4>
&lt;p>保持跟开发规范一致&lt;/p>
&lt;h4 id="5常量的命名规范">5.常量的命名规范&lt;/h4>
&lt;p>保持跟开发规范一致&lt;/p>
&lt;h4 id="6-单元测试的组成">6. 单元测试的组成&lt;/h4>
&lt;ol>
&lt;li>**准备(Arrange)**队形，创建对象，打桩（mock），进行必要的设置；&lt;/li>
&lt;li>**操作(Act)**对象；&lt;/li>
&lt;li>**断言(Assert)**某件事情是预期的。&lt;/li>
&lt;/ol></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/series/2021/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/" term="单元测试" label="单元测试"/><category scheme="https://kiwi4814.github.io/tags/2021/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/" term="单元测试" label="单元测试"/></entry><entry><title type="text">MySQL优化之索引（index）</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/mysql-index/"/><id>https://kiwi4814.github.io/posts/2020/mysql-index/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2020-09-01T20:42:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、定义 索引是一种数据结构，存储表中特定列的值并进行排序，方便查询这个特定列，就好比……</summary><content type="html">&lt;h1 id="一定义">一、定义&lt;/h1>
&lt;p>索引是一种数据结构，存储表中特定列的值并进行排序，方便查询这个特定列，就好比一本书的目录，可以更快的根据目录查找所需的内容。&lt;/p>
&lt;h2 id="索引的优点">索引的优点&lt;/h2>
&lt;ol>
&lt;li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。&lt;/li>
&lt;li>可以大大加快数据的检索速度，避免进行全表的数据扫描，大大减少遍历匹配的行数，这也是创建索引的最主要的原因。&lt;/li>
&lt;li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。&lt;/li>
&lt;li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。&lt;/li>
&lt;li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。&lt;/li>
&lt;/ol>
&lt;h2 id="索引的缺点">索引的缺点&lt;/h2>
&lt;ol>
&lt;li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。&lt;/li>
&lt;li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。&lt;/li>
&lt;li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。&lt;/li>
&lt;/ol>
&lt;h2 id="在哪些列建立索引">在哪些列建立索引&lt;/h2>
&lt;ol>
&lt;li>在经常需要搜索的列上，可以加快搜索的速度；&lt;/li>
&lt;li>在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；&lt;/li>
&lt;li>在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；&lt;/li>
&lt;li>在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；&lt;/li>
&lt;li>在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；&lt;/li>
&lt;li>在经常使用在&lt;code>WHERE&lt;/code>子句中的列上面创建索引，加快条件的判断速度。&lt;/li>
&lt;/ol>
&lt;h2 id="不在哪些列建索引">不在哪些列建索引？&lt;/h2>
&lt;ol>
&lt;li>对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。&lt;/li>
&lt;li>对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。&lt;/li>
&lt;li>对于那些定义为&lt;code>text&lt;/code>, &lt;code>image&lt;/code>和&lt;code>bit&lt;/code>数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。&lt;/li>
&lt;li>当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。&lt;/li>
&lt;/ol>
&lt;h1 id="二索引的数据结构">二、索引的数据结构&lt;/h1>
&lt;p>常见的索引的数据结构有：&lt;code>B+Tree&lt;/code>、&lt;code>Hash索引&lt;/code>、&lt;code>FullText索引&lt;/code>、&lt;code>R-Tree索引&lt;/code>。&lt;/p>
&lt;h3 id="hash-索引">Hash 索引&lt;/h3>
&lt;p>&lt;strong>1. 概述：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>MySQL 中，只有Memory存储引擎支持Hash索引，是Memory表的默认索引类型。hash 索引把数据的索引以 hash 值形式组织起来，因此检索效率非常高，可以一次定位，不像B-/+Tree索引需要进行从根节点到叶节点的多次 IO 操作。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>2. Hash 索引的缺点：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>① Hash 索引仅仅能满足等值的查询，不能满足范围查询。因为数据在经过 Hash 算法后，其大小关系就可能发生变化。 ② Hash 索引不能被排序。同样是因为数据经过 Hash 算法后，大小关系就可能发生变化，排序是没有意义的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>③ Hash 索引不能避免表数据的扫描。因为发生 Hash 碰撞时，仅仅比较 Hash 值是不够的，需要比较实际的值以判定是否符合要求。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>④ Hash 索引在发生大量 Hash 值相同的情况时性能不一定比 B-Tree 索引高。因为碰撞情况会导致多次的表数据的扫描，造成整体性能的低下，可以通过采用合适的 Hash 算法一定程度解决这个问题。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>⑤ Hash 索引不能使用部分索引键查询。因为当使用组合索引情况时，是把多个数据库列数据合并后再计算 Hash 值，所以对单独列数据计算 Hash 值是没有意义的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="fulltext-索引">FullText 索引&lt;/h3>
&lt;p>&lt;strong>1. 概述：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>全文索引，目前 MySQL 中只有MyISAM存储引擎支持，并且只有char、varchar、text 类型支持。它用于替代效率较低的like 模糊匹配操作，而且可以通过多字段组合的全文索引一次性全模糊匹配多个字段。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>2. 存储结构：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>同样使用B-Tree存放索引数据，但使用的是特定的算法，将字段数据分割后再进行索引（一般每 4 个字节一次分割），索引文件存储的是分割前的索引字符串集合，与分割后的索引信息，对应 Btree 结构的节点存储的是分割后的词信息以及它在分割前的索引字符串集合中的位置。&lt;/p>
&lt;/blockquote>
&lt;h3 id="b-tree-索引">B-/+Tree 索引&lt;/h3>
&lt;ul>
&lt;li>B+Tree 是 mysql 使用最频繁的一个索引数据结构，是 Innodb 和 Myisam 存储引擎模式的索引类型。相对 Hash 索引，B+树在查找单条记录的速度比不上 Hash 索引，但是更适合排序等操作。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>1. B+Tree 索引的优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>带顺序访问指针的 B+Tree：B+Tree 所有索引数据都在叶子结点上，并且增加了顺序访问指针,每个叶子节点都有指向相邻叶子节点的指针。这样做是为了提高区间查询效率，例如查询 key 为从 18 到 49 的所有数据记录，当找到 18 后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。&lt;/li>
&lt;li>大大减少磁盘 I/O 读取次数。&lt;/li>
&lt;/ul>
&lt;h1 id="三mysql索引的实现">三、MySQL索引的实现&lt;/h1>
&lt;p>在 MySQL 中，索引属于存储引擎级别的概念，不同存储引擎对索引的实现方式是不同的，本部分主要讨论 MyISAM 和 InnoDB 两个存储引擎的索引实现方式。&lt;/p>
&lt;h3 id="myisam-索引的实现">MyISAM 索引的实现&lt;/h3>
&lt;p>&lt;strong>1. 主键索引&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>MyISAM 引擎使用 B+Tree 作为索引结构，叶节点的 data 域存放的是数据记录的地址。下图是 MyISAM 索引的原理图：&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/3.png" alt="">&lt;/p>
&lt;ul>
&lt;li>这里设表一共有三列，假设我们以 Col1 为主键，则上图是一个 MyISAM 表的主索引（Primary key）示意。可以看出 MyISAM 的索引文件仅仅保存数据记录的地址。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. 辅助索引&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求 key 是唯一的，而辅助索引的 key 可以重复。如果我们在 Col2 上建立一个辅助索引，则此索引的结构如下图所示：&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/4.png" alt="">&lt;/p>
&lt;ul>
&lt;li>同样也是一颗 B+Tree，data 域保存数据记录的地址。因此，MyISAM 中索引检索的算法为首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址，读取相应数据记录。&lt;/li>
&lt;li>MyISAM 的索引方式也叫做“非聚集”的，之所以这么称呼是为了与 InnoDB 的聚集索引区分。&lt;/li>
&lt;/ul>
&lt;h3 id="innodb-索引的实现">InnoDB 索引的实现&lt;/h3>
&lt;ul>
&lt;li>虽然 InnoDB 也使用 B+Tree 作为索引结构，但具体实现方式却不相同。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>1. 主键索引&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>与 MyISAM 第一个重大区别是 InnoDB 的数据文件本身就是索引文件。从上文知道，MyISAM 索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在 InnoDB 中，表数据文件本身就是按 B+Tree 组织的一个索引结构，这棵树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/2.png" alt="https://gitee.com/chenjiabing666/Blog-file/raw/master/%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/2.png">&lt;/p>
&lt;p>上图是 InnoDB 主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为 InnoDB 的数据文件本身要按主键聚集，所以 InnoDB 要求表必须有主键（MyISAM 可以没有），如果没有显式指定，则 MySQL 系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则 MySQL 自动为 InnoDB 表生成一个隐含字段作为主键，这个字段长度为 6 个字节，类型为长整形。&lt;/p>
&lt;p>&lt;strong>2. 辅助索引&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>第二个与 MyISAM 索引的不同是 InnoDB 的辅助索引 data 域存储相应记录主键的值而不是地址。换句话说，InnoDB 的所有辅助索引都引用主键作为 data 域。例如，下图为定义在 Col3 上的一个辅助索引：&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/1.png" alt="https://gitee.com/chenjiabing666/Blog-file/raw/master/%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/1.png">&lt;/p>
&lt;ul>
&lt;li>这里以英文字符的 ASCII 码作为比较准则。聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。&lt;/li>
&lt;li>&lt;strong>InnoDB 表是基于聚簇索引建立的&lt;/strong>。因此 InnoDB 的索引能提供一种非常快速的主键查找性能。不过，它的辅助索引也会包含主键列，所以，如果主键使用过长的字段，将会导致其他辅助索变得更大。如果想在表上定义 、很多索引，则争取尽量把主键定义得小一些。InnoDB 不会压缩索引。&lt;/li>
&lt;/ul></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/09/mysql/" term="MySQL" label="MySQL"/></entry><entry><title type="text">如何在MySQL中设计一个树形存储结构？</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/mysql-tree/"/><id>https://kiwi4814.github.io/posts/2020/mysql-tree/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2020-09-01T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">我们经常需要在数据库中去维护一个树形结构，通常普遍的做法有以下几种： Adjacency List 每一条记录存……</summary><content type="html">&lt;p>我们经常需要在数据库中去维护一个树形结构，通常普遍的做法有以下几种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>&lt;strong>Adjacency List&lt;/strong>&lt;/em>&lt;/p>
&lt;p>每一条记录存在一个&lt;code>parent_id&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Path Enumerations&lt;/strong>&lt;/em>&lt;/p>
&lt;p>每一条记录存整个&lt;code>tree path&lt;/code>经过的&lt;code>node&lt;/code>枚举&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Nested Sets&lt;/strong>&lt;/em>&lt;/p>
&lt;p>每一条记录存 &lt;code>nleft&lt;/code> 和 &lt;code>nright&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Closure Table&lt;/strong>&lt;/em>&lt;/p>
&lt;p>额外维护一个表，所有的t&lt;code>ree path&lt;/code>作为记录进行保存。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.notion.so/322ad02521884b51bade610e1b42ee98">各类方法的操作代价&lt;/a>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/09/mysql/" term="MySQL" label="MySQL"/></entry><entry><title type="text">CentOS 7离线安装MySQL 5.7</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/mysql-install/"/><id>https://kiwi4814.github.io/posts/2020/mysql-install/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2020-08-30T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">操作系统：CentOs 7.7 MySQL版本：MySQL-5.7.25-x86_64 安装步……</summary><content type="html">&lt;h1 id="heading">&lt;/h1>
&lt;h4 id="操作系统centos-77">&lt;strong>操作系统：CentOs 7.7&lt;/strong>&lt;/h4>
&lt;h4 id="mysql版本mysql-5725-x86_64">&lt;strong>MySQL版本：MySQL-5.7.25-x86_64&lt;/strong>&lt;/h4>
&lt;h4 id="安装步骤">&lt;strong>安装步骤：&lt;/strong>&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>查找并卸载&lt;code>mariadb&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查找当前系统下是否有mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ rpm -qa &lt;span class="p">|&lt;/span> grep mariadb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 卸载&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mariadb-libs-5.5.64-1.el7.x86_64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ rpm -e --nodeps mariadb-libs-5.5.64-1.el7.x86_64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>卸载原有的&lt;code>mysql&lt;/code>相关&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查找当前系统是否有mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ rpm -qa &lt;span class="p">|&lt;/span> grep mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ rm /etc/my.cnf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查找是否存在mysql用户组和用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ cat /etc/group &lt;span class="p">|&lt;/span> grep mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ cat /etc/passwd &lt;span class="p">|&lt;/span> grep mysql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建&lt;code>mysql&lt;/code>用户和组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建用户组&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ groupadd mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ useradd -g mysql mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改用户密码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ passwd mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Changing password &lt;span class="k">for&lt;/span> user mysql.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">New password:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Retype new password:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">passwd: all authentication tokens updated successfully.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>将&lt;code>mysql&lt;/code>离线安装文件上传到服务器上&lt;/p>
&lt;p>（1）&lt;a href="https://downloads.mysql.com/archives/community/">下载地址&lt;/a>&lt;/p>
&lt;p>（2）上传到服务器的&lt;code>/usr/local/&lt;/code>目录下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">scp /localurl/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz root@host:/usr/local/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>解压并建立软链接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意：5的操作均在此目录下进行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /usr/local/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 解压&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver local&lt;span class="o">]&lt;/span>$ tar -zxvf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建软链接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver local&lt;span class="o">]&lt;/span>$ ln -s mysql-5.7.25-linux-glibc2.12-x86_64 mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 赋予mysql用户权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver local&lt;span class="o">]&lt;/span>$ chown -R mysql:mysql mysql/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建相关文件，赋予&lt;code>mysql&lt;/code>用户权限&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 分别创建data tmp log文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 此目录可自行指定，不过要和mysql配置文件中相一致&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ mkdir -p /home/datadriver/mysql/&lt;span class="o">{&lt;/span>data,tmp,log&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 赋权&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /home/datadriver/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver datadriver&lt;span class="o">]&lt;/span>$ chown -R mysql:mysql mysql/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建并修改配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 这里选择将配置文件放在/etc下面，也可以放在mysql根目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /etc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建并编辑my.cnf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver etc&lt;span class="o">]&lt;/span>$ vi my.cnf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里给出一份配置文件作为参考：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[mysql]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">default-character-set&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">utf8mb4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[mysqld]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- Basic ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">server_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">3306&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">basedir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/usr/local/mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">datadir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/usr/local/mysql/data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">socket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/tmp/mysql.sock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">skip-host-cache&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">skip_name_resolve&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">lower_case_table_names&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">character-set-server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">utf8mb4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">collation-server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">utf8mb4_general_ci&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">init_connect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#39;SET NAMES utf8mb4&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">default-storage-engine&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">INNODB&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">group_concat_max_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">102400&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#skip-external-locking&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#skip-networking&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- Connection/File/Table ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">max_connections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">max_connect_errors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">20000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#wait_timeout = 31536000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#interactive_timeout = 31536000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">wait_timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">3600&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">interactive_timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">3600&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">lock_wait_timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">1800&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">max_allowed_packet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">1024M&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- Thread Pool ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#thread_handling = pool-of-threads&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#thread_pool_oversubscribe = 5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">thread_cache_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#extra_max_connections = 10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#extra_port = 33333&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- log ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">expire_logs_days&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">log-bin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">mysql-bin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">binlog_format&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">ROW&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ---------------- Others ----------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">sql_mode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装&lt;code>mysql&lt;/code>（要先安装依赖）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装相关依赖，否则会报错，此处不再演示离线安装方式，需要的自行查阅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ yum install libaio*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 进入到mysql /bin 目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /usr/local/myysql/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 初始化mysql，指定用户为mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 此处如果日志中配置了log_error，则控制台不会打印数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver bin&lt;span class="o">]&lt;/span>$ ./mysqld --initialize --user&lt;span class="o">=&lt;/span>mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver bin&lt;span class="o">]&lt;/span>$ cat ../log/error.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.666390Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option &lt;span class="o">(&lt;/span>see documentation &lt;span class="k">for&lt;/span> more details&lt;span class="o">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.813204Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> InnoDB: New log files created, &lt;span class="nv">LSN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">45790&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.848783Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> InnoDB: Creating foreign key constraint system tables.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.908557Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> No existing UUID has been found, so we assume that this is the first &lt;span class="nb">time&lt;/span> that this server has been started. Generating a new UUID: 5fe4d020-d161-11ea-9224-0894ef98b412.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.909451Z &lt;span class="m">0&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> Gtid table is not ready to be used. Table &lt;span class="s1">&amp;#39;mysql.gtid_executed&amp;#39;&lt;/span> cannot be opened.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:33.911251Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Note&lt;span class="o">]&lt;/span> A temporary password is generated &lt;span class="k">for&lt;/span> root@localhost: -h+#XfgW:4h2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357662Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;user&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;root@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357715Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;user&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;mysql.session@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357739Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;user&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;mysql.sys@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357778Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;db&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;performance_schema mysql.session@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357793Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;db&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;sys mysql.sys@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357820Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;proxies_priv&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;@ root@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357877Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;tables_priv&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;user mysql.session@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-07-29T06:04:34.357898Z &lt;span class="m">1&lt;/span> &lt;span class="o">[&lt;/span>Warning&lt;span class="o">]&lt;/span> &lt;span class="s1">&amp;#39;tables_priv&amp;#39;&lt;/span> entry &lt;span class="s1">&amp;#39;sys_config mysql.sys@localhost&amp;#39;&lt;/span> ignored in --skip-name-resolve mode.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置开机启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 进入应用根目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /usr/local/mysql/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 复制启动脚本到资源目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver mysql&lt;span class="o">]&lt;/span>$ cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 增加mysqld服务控制脚本执行权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver mysql&lt;span class="o">]&lt;/span>$ chmod +x /etc/rc.d/init.d/mysqld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将mysqld服务加入到系统服务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver mysql&lt;span class="o">]&lt;/span>$ chkconfig --add mysqld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 检查mysqld服务是否已经生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver mysql&lt;span class="o">]&lt;/span>$ chkconfig --list mysqld
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>切换至&lt;code>mysql&lt;/code>用户，设置环境变量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 切换至mysql用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ su - mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改配置文件，增加i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ vi .bash_profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 刷新配置文件使其立即生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># export PATH=$PATH:/home/datadriver/mysql/mysql5.7.25/bin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">source&lt;/span> .bash_profile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动服务&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 仍然在mysql用户下，启动mysql（启动用start）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ service mysqld restart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 重启的时候报警告&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Shutting down MySQL..&lt;span class="o">[&lt;/span> OK &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm: cannot remove &lt;span class="s1">&amp;#39;/var/lock/subsys/mysql&amp;#39;&lt;/span>: Permission denied
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting MySQL.&lt;span class="o">[&lt;/span> OK &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 切回root用户，赋权即即可&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ su - root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> /var/lock/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@datadriver lock&lt;span class="o">]&lt;/span>$ chown -R mysql:mysql subsys/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 切回mysql重启，成功。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mysql@datadriver ~&lt;span class="o">]&lt;/span>$ service mysqld restart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Shutting down MySQL..&lt;span class="o">[&lt;/span> OK &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting MySQL.&lt;span class="o">[&lt;/span> OK &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改&lt;code>mysql&lt;/code>默认密码并设置远程连接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- 修改密码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IDENTIFIED&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">localhost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">flush&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">privileges&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- 远程连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">flush&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">privileges&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol></content><category scheme="https://kiwi4814.github.io/categories/2021/12/%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%B7%A5%E5%85%B7/" term="软件与工具" label="软件与工具"/><category scheme="https://kiwi4814.github.io/series/2020/08/linux%E8%BF%90%E7%BB%B4/" term="Linux运维" label="Linux运维"/><category scheme="https://kiwi4814.github.io/tags/2020/08/linux/" term="Linux" label="Linux"/><category scheme="https://kiwi4814.github.io/tags/2021/12/%E8%BD%AF%E4%BB%B6/" term="软件" label="软件"/><category scheme="https://kiwi4814.github.io/tags/2020/09/mysql/" term="MySQL" label="MySQL"/></entry><entry><title type="text">JUC框架简介</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/juc-summary/"/><id>https://kiwi4814.github.io/posts/2020/juc-summary/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2020-06-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、Lock框架和Tools类 类结构总览 接口：Condition Condition为……</summary><content type="html">&lt;h1 id="一lock框架和tools类">一、Lock框架和Tools类&lt;/h1>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/java-thread-x-juc-overview-lock.png" alt="">&lt;/p>
&lt;p>类结构总览&lt;/p>
&lt;h2 id="接口condition">接口：Condition&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>Condition&lt;/code>为接口类型，它将 Object 监视器方法(wait、notify 和 notifyAll)分解成截然不同的对象，以便通过将这些对象与任意 Lock 实现组合使用，为每个对象提供多个等待 set (wait-set)。其中，Lock 替代了 synchronized 方法和语句的使用，Condition 替代了 Object 监视器方法的使用。可以通过await(),signal()来休眠/唤醒线程。&lt;/p>
&lt;/blockquote>
&lt;h2 id="接口lock">接口：Lock&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>Lock&lt;/code>为接口类型，Lock实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的Condition对象。&lt;/p>
&lt;/blockquote>
&lt;h2 id="接口-readwritelock">接口: ReadWriteLock&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>ReadWriteLock&lt;/code>为接口类型， 维护了一对相关的锁，一个用于只读操作，另一个用于写入操作。只要没有 writer，读取锁可以由多个 reader 线程同时保持。写入锁是独占的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="抽象类-abstractownablesynchonizer">抽象类: AbstractOwnableSynchonizer&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>AbstractOwnableSynchonizer&lt;/code>为抽象类，可以由线程以独占方式拥有的同步器。此类为创建锁和相关同步器(伴随着所有权的概念)提供了基础。AbstractOwnableSynchronizer 类本身不管理或使用此信息。但是，子类和工具可以使用适当维护的值帮助控制和监视访问以及提供诊断。&lt;/p>
&lt;/blockquote>
&lt;h2 id="核心抽象类int-abstractqueuedsynchonizer">核心抽象类(int): AbstractQueuedSynchonizer&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>AbstractQueuedSynchonizer&lt;/code>为抽象类，其为实现依赖于先进先出 (FIFO) 等待队列的阻塞锁和相关同步器(信号量、事件，等等)提供一个框架。此类的设计目标是成为依靠单个原子 int 值来表示状态的大多数同步器的一个有用基础。&lt;/p>
&lt;/blockquote>
&lt;h2 id="锁常用类-locksupport">&lt;strong>锁常用类: LockSupport&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>LockSupport为常用类，用来创建锁和其他同步类的基本线程阻塞原语。LockSupport的功能和&amp;quot;Thread中的 Thread.suspend()和Thread.resume()有点类似&amp;quot;，LockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程。但是park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死锁”问题。&lt;/p>
&lt;/blockquote>
&lt;h2 id="锁常用类-reentrantlock">&lt;strong>锁常用类: ReentrantLock&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>ReentrantLock为常用类，它是一个可重入的互斥锁 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。&lt;/p>
&lt;/blockquote>
&lt;h2 id="锁常用类-reentrantreadwritelock">&lt;strong>锁常用类: ReentrantReadWriteLock&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>ReentrantReadWriteLock是读写锁接口ReadWriteLock的实现类，它包括Lock子类ReadLock和WriteLock。ReadLock是共享锁，WriteLock是独占锁。&lt;/p>
&lt;/blockquote>
&lt;h2 id="锁常用类-stampedlock">&lt;strong>锁常用类: StampedLock&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>它是java8在java.util.concurrent.locks新增的一个API。StampedLock控制锁有三种模式(写，读，乐观读)，一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-countdownlatch">&lt;strong>工具常用类: CountDownLatch&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>CountDownLatch为常用类，它是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-cyclicbarrier">&lt;strong>工具常用类: CyclicBarrier&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>CyclicBarrier为常用类，其是一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-phaser">&lt;strong>工具常用类: Phaser&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-semaphore">&lt;strong>工具常用类: Semaphore&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>Semaphore为常用类，其是一个计数信号量，从概念上讲，信号量维护了一个许可集。如有必要，在许可可用前会阻塞每一个 acquire()，然后再获取该许可。每个 release() 添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，Semaphore 只对可用许可的号码进行计数，并采取相应的行动。通常用于限制可以访问某些资源(物理或逻辑的)的线程数目。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具常用类-exchanger">&lt;strong>工具常用类: Exchanger&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。这两个线程通过exchange()方法交换数据，当一个线程先执行exchange()方法后，它会一直等待第二个线程也执行exchange()方法，当这两个线程到达同步点时，这两个线程就可以交换数据了。&lt;/p>
&lt;/blockquote>
&lt;h1 id="二collections-并发集合">二、Collections: 并发集合&lt;/h1>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/java-thread-x-juc-overview-2.png" alt="类结构关系">&lt;/p>
&lt;p>类结构关系&lt;/p>
&lt;h2 id="queue-arrayblockingqueue">Queue: ArrayBlockingQueue&lt;/h2>
&lt;blockquote>
&lt;p>一个由数组支持的有界阻塞队列。此队列按 **&lt;code>FIFO(先进先出)&lt;/code>**原则对元素进行排序。队列的头部 是在队列中存在时间最长的元素。队列的尾部 是在队列中存在时间最短的元素。新元素插入到队列的尾部，队列获取操作则是从队列头部开始获得元素。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-linkedblockingqueue">Queue: LinkedBlockingQueue&lt;/h2>
&lt;blockquote>
&lt;p>一个基于已链接节点的、范围任意的 blocking queue。此队列按 &lt;code>**FIFO(先进先出)**&lt;/code>排序元素。队列的头部 是在队列中时间最长的元素。队列的尾部 是在队列中时间最短的元素。新元素插入到队列的尾部，并且队列获取操作会获得位于队列头部的元素。链接队列的吞吐量通常要高于基于数组的队列，但是在大多数并发应用程序中，其可预知的性能要低。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-linkedblockingdeque">Queue: LinkedBlockingDeque&lt;/h2>
&lt;blockquote>
&lt;p>一个基于已链接节点的、任选范围的阻塞双端队列。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-concurrentlinkedqueue">Queue: ConcurrentLinkedQueue&lt;/h2>
&lt;blockquote>
&lt;p>一个基于链接节点的无界线程安全队列。此队列按照 FIFO(先进先出)原则对元素进行排序。队列的头部 是队列中时间最长的元素。队列的尾部 是队列中时间最短的元素。新的元素插入到队列的尾部，队列获取操作从队列头部获得元素。当多个线程共享访问一个公共 collection 时，ConcurrentLinkedQueue 是一个恰当的选择。此队列不允许使用 null 元素。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-concurrentlinkeddeque">Queue: ConcurrentLinkedDeque&lt;/h2>
&lt;blockquote>
&lt;p>是双向链表实现的无界队列，该队列同时支持FIFO和FILO两种操作方式。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-delayqueue">Queue: DelayQueue&lt;/h2>
&lt;blockquote>
&lt;p>延时无界阻塞队列，使用Lock机制实现并发访问。队列里只允许放可以“延期”的元素，队列中的head是最先“到期”的元素。如果队里中没有元素到“到期”，那么就算队列中有元素也不能获取到。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-priorityblockingqueue">Queue: PriorityBlockingQueue&lt;/h2>
&lt;blockquote>
&lt;p>无界优先级阻塞队列，使用Lock机制实现并发访问。priorityQueue的线程安全版，不允许存放null值，依赖于comparable的排序，不允许存放不可比较的对象类型。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-synchronousqueue">Queue: SynchronousQueue&lt;/h2>
&lt;blockquote>
&lt;p>没有容量的同步队列，通过CAS实现并发访问，支持FIFO和FILO。&lt;/p>
&lt;/blockquote>
&lt;h2 id="queue-linkedtransferqueue">Queue: LinkedTransferQueue&lt;/h2>
&lt;blockquote>
&lt;p>JDK 7新增，单向链表实现的无界阻塞队列，通过CAS实现并发访问，队列元素使用 FIFO(先进先出)方式。LinkedTransferQueue可以说是ConcurrentLinkedQueue、SynchronousQueue(公平模式)和LinkedBlockingQueue的超集, 它不仅仅综合了这几个类的功能，同时也提供了更高效的实现。&lt;/p>
&lt;/blockquote>
&lt;h2 id="list-copyonwritearraylist">List: CopyOnWriteArrayList&lt;/h2>
&lt;blockquote>
&lt;p>ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的复制来实现的。这一般需要很大的开销，但是当遍历操作的数量大大超过可变操作的数量时，这种方法可能比其他替代方法更 有效。在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时，它也很有用。&lt;/p>
&lt;/blockquote>
&lt;h2 id="set-copyonwritearrayset">Set: CopyOnWriteArraySet&lt;/h2>
&lt;blockquote>
&lt;p>对其所有操作使用内部CopyOnWriteArrayList的Set。即将所有操作转发至CopyOnWriteArayList来进行操作，能够保证线程安全。在add时，会调用addIfAbsent，由于每次add时都要进行数组遍历，因此性能会略低于CopyOnWriteArrayList。&lt;/p>
&lt;/blockquote>
&lt;h2 id="set-concurrentskiplistset">Set: ConcurrentSkipListSet&lt;/h2>
&lt;blockquote>
&lt;p>一个基于ConcurrentSkipListMap 的可缩放并发 NavigableSet 实现。set 的元素可以根据它们的自然顺序进行排序，也可以根据创建 set 时所提供的 Comparator 进行排序，具体取决于使用的构造方法。&lt;/p>
&lt;/blockquote>
&lt;h2 id="map-concurrenthashmap">Map: ConcurrentHashMap&lt;/h2>
&lt;blockquote>
&lt;p>是线程安全HashMap的。ConcurrentHashMap在JDK 7之前是通过Lock和segment(分段锁)实现，JDK 8 之后改为CAS+synchronized来保证并发安全。&lt;/p>
&lt;/blockquote>
&lt;h2 id="map-concurrentskiplistmap">Map: ConcurrentSkipListMap&lt;/h2>
&lt;blockquote>
&lt;p>线程安全的有序的哈希表(相当于线程安全的TreeMap);映射可以根据键的自然顺序进行排序，也可以根据创建映射时所提供的 Comparator 进行排序，具体取决于使用的构造方法。&lt;/p>
&lt;/blockquote>
&lt;h1 id="三atomic-原子类">三、Atomic: 原子类&lt;/h1>
&lt;p>其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成，才由JVM从等待队列中选择一个另一个线程进入，这只是一种逻辑上的理解。实际上是借助硬件的相关指令来实现的，不会阻塞线程(或者说只是在硬件级别上阻塞了)。&lt;/p>
&lt;h2 id="基础类型atomicbooleanatomicintegeratomiclong">基础类型：AtomicBoolean，AtomicInteger，AtomicLong&lt;/h2>
&lt;blockquote>
&lt;p>AtomicBoolean，AtomicInteger，AtomicLong是类似的，分别针对bool，interger，long的原子类。&lt;/p>
&lt;/blockquote>
&lt;h2 id="数组atomicintegerarrayatomiclongarraybooleanarray">数组：AtomicIntegerArray，AtomicLongArray，BooleanArray&lt;/h2>
&lt;blockquote>
&lt;p>AtomicIntegerArray，AtomicLongArray，AtomicBooleanArray是数组原子类。&lt;/p>
&lt;/blockquote>
&lt;h2 id="引用atomicreferenceatomicmarkedreferenceatomicstampedreference">引用：AtomicReference，AtomicMarkedReference，AtomicStampedReference&lt;/h2>
&lt;blockquote>
&lt;p>AtomicReference，AtomicMarkedReference，AtomicStampedReference是引用相关的原子类。&lt;/p>
&lt;/blockquote>
&lt;h2 id="fieldupdateratomiclongfieldupdateratomicintegerfieldupdateratomicreferencefieldupdater">FieldUpdater：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater&lt;/h2>
&lt;blockquote>
&lt;p>AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater是FieldUpdater原子类。&lt;/p>
&lt;/blockquote>
&lt;h1 id="四executors-线程池">四、Executors: 线程池&lt;/h1>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/Untitled.png" alt="类结构关系">&lt;/p>
&lt;p>类结构关系&lt;/p>
&lt;h2 id="接口-executor">接口: Executor&lt;/h2>
&lt;p>Executor接口提供一种将任务提交与每个任务将如何运行的机制(包括线程使用的细节、调度等)分离开来的方法。通常使用 Executor 而不是显式地创建线程。&lt;/p>
&lt;h2 id="executorservice">ExecutorService&lt;/h2>
&lt;blockquote>
&lt;p>ExecutorService继承自Executor接口，ExecutorService提供了管理终止的方法，以及可为跟踪一个或多个异步任务执行状况而生成 Future 的方法。 可以关闭 ExecutorService，这将导致其停止接受新任务。关闭后，执行程序将最后终止，这时没有任务在执行，也没有任务在等待执行，并且无法提交新任务。&lt;/p>
&lt;/blockquote>
&lt;h2 id="scheduledexecutorservice">ScheduledExecutorService&lt;/h2>
&lt;blockquote>
&lt;p>ScheduledExecutorService继承自ExecutorService接口，可安排在给定的延迟后运行或定期执行的命令。&lt;/p>
&lt;/blockquote>
&lt;h2 id="abstractexecutorservice">AbstractExecutorService&lt;/h2>
&lt;blockquote>
&lt;p>AbstractExecutorService继承自ExecutorService接口，其提供 ExecutorService 执行方法的默认实现。此类使用 newTaskFor 返回的 RunnableFuture 实现 submit、invokeAny 和 invokeAll 方法，默认情况下，RunnableFuture 是此包中提供的 FutureTask 类。&lt;/p>
&lt;/blockquote>
&lt;h2 id="futuretask">FutureTask&lt;/h2>
&lt;blockquote>
&lt;p>FutureTask 为 Future 提供了基础实现，如获取任务执行结果(get)和取消任务(cancel)等。如果任务尚未完成，获取任务执行结果时将会阻塞。一旦执行结束，任务就不能被重启或取消(除非使用runAndReset执行计算)。FutureTask 常用来封装 Callable 和 Runnable，也可以作为一个任务提交到线程池中执行。除了作为一个独立的类之外，此类也提供了一些功能性函数供我们创建自定义 task 类使用。FutureTask 的线程安全由CAS来保证。&lt;/p>
&lt;/blockquote>
&lt;h2 id="核心-threadpoolexecutor">核心: ThreadPoolExecutor&lt;/h2>
&lt;blockquote>
&lt;p>ThreadPoolExecutor实现了AbstractExecutorService接口，也是一个 ExecutorService，它使用可能的几个池线程之一执行每个提交的任务，通常使用 Executors 工厂方法配置。 线程池可以解决两个不同问题: 由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源(包括执行任务集时使用的线程)的方法。每个 ThreadPoolExecutor 还维护着一些基本的统计数据，如完成的任务数。&lt;/p>
&lt;/blockquote>
&lt;h2 id="核心-scheduledthreadexecutor">核心: ScheduledThreadExecutor&lt;/h2>
&lt;blockquote>
&lt;p>ScheduledThreadPoolExecutor实现ScheduledExecutorService接口，可安排在给定的延迟后运行命令，或者定期执行命令。需要多个辅助线程时，或者要求 ThreadPoolExecutor 具有额外的灵活性或功能时，此类要优于 Timer。&lt;/p>
&lt;/blockquote>
&lt;h2 id="核心-forkjoin框架">核心: Fork/Join框架&lt;/h2>
&lt;blockquote>
&lt;p>ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。&lt;/p>
&lt;/blockquote>
&lt;h2 id="工具类-executors">工具类: Executors&lt;/h2>
&lt;blockquote>
&lt;p>Executors是一个工具类，用其可以创建ExecutorService、ScheduledExecutorService、ThreadFactory、Callable等对象。它的使用融入到了ThreadPoolExecutor, ScheduledThreadExecutor和ForkJoinPool中。&lt;/p>
&lt;/blockquote></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/></entry><entry><title type="text">Java中的位运算</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/bit-operation/"/><id>https://kiwi4814.github.io/posts/2020/bit-operation/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2020-05-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">在阅读JDK源码的过程中，我们经常会看到类似&amp;gt;&amp;gt; &amp;lt;&amp;lt; &amp;gt;&amp;gt;&amp;gt; | 这样的运算符，这在……</summary><content type="html">&lt;p>在阅读JDK源码的过程中，我们经常会看到类似&lt;code>&amp;gt;&amp;gt;&lt;/code> &lt;code>&amp;lt;&amp;lt;&lt;/code> &lt;code>&amp;gt;&amp;gt;&amp;gt;&lt;/code> &lt;code>|&lt;/code> 这样的运算符，这在Java里面叫位运算符。&lt;/p>
&lt;p>我们知道计算机是以二进制来表示数据的，也就是0和1。我们先简单介绍一下二进制是如何表示数据的。&lt;/p>
&lt;h2 id="原码反码补码和移码">原码、反码、补码和移码&lt;/h2>
&lt;h3 id="1原码">（1）原码&lt;/h3>
&lt;p>在原码表示中，机器数的最高一位是符号位，0代表正号，1代表负号，余下各位是数的绝对值。&lt;/p>
&lt;p>数值0的原码表示方法有两种：
$[+0]_原$ = 0000 0000 ，
$[-0]_原$ = 1000 0000。&lt;/p>
&lt;p>&lt;strong>8位二进制数的取值范围是：[-127 , 127]&lt;/strong>&lt;/p>
&lt;h3 id="2反码">（2）反码&lt;/h3>
&lt;p>在反码表示中，机器数的最高一位是符号位，0代表正号，1代表负号。&lt;/p>
&lt;p>正数的反码与原码相同；&lt;/p>
&lt;p>负数的反码则是其绝对值按位求反。&lt;/p>
&lt;p>数值0的反码表示方法有两种：
$[-0]_反$ = 0000 0000 ，
$[-0]_反$ = 1111 1111。&lt;/p>
&lt;h3 id="3补码">（3）补码&lt;/h3>
&lt;p>在补码表示中，机器数的最高一位是符号位，0代表正号，1代表负号。&lt;/p>
&lt;p>正数的补码与原码相同；&lt;/p>
&lt;p>负数的补码则是其反码的末尾加1。&lt;/p>
&lt;p>数值0的补码有唯一的表现形式，即
$[-0]_补$ =
$[-0]_补$ = 0000 0000。&lt;/p>
&lt;h3 id="4移码">（4）移码&lt;/h3>
&lt;p>移码表示法是在数上增加一个偏移量来定义的，常用于表示浮点数中的阶码。对于定点整数，移。如果知道了一个数的补码，则将补码的最高位取反，即得到该数的移码。&lt;/p>
&lt;aside>
💡 ***小结***
正数：原码 = 反码 = 补码
负数：反码 = 原码绝对值按位求反
补码 = 反码末尾+1
移码 = 补码最高位（符号位）取反
&lt;/aside>
&lt;h1 id="位运算符">位运算符&lt;/h1>
&lt;p>Java提供的位运算符有：左移( &lt;code>&amp;lt;&amp;lt;&lt;/code> )、右移( &lt;code>&amp;gt;&amp;gt;&lt;/code> ) 、无符号右移( &lt;code>&amp;gt;&amp;gt;&amp;gt;&lt;/code> ) 、位与( &lt;code>&amp;amp;&lt;/code> ) 、位或( &lt;code>|&lt;/code> )、位非( &lt;code>~&lt;/code> )、位异或( &lt;code>^&lt;/code> )，除了位非( &lt;code>~&lt;/code> )是一元操作符外，其它的都是二元操作符。&lt;/p>
&lt;h2 id="1-左移--">1. 左移( &amp;lt;&amp;lt; )&lt;/h2>
&lt;p>a &amp;lt;&amp;lt; b 表示将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向左方向移动 b 位，符号位不变，低位空出来的位补数值 0。&lt;/p>
&lt;p>&lt;em>&lt;strong>&lt;code>a &amp;lt;&amp;lt; b = a * (2 ^ b)&lt;/code>&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="2-右移--">2. 右移( &amp;gt;&amp;gt; )&lt;/h2>
&lt;p>&lt;strong>a &amp;gt;&amp;gt; b&lt;/strong> 表示将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向右方向移动 b 位，符号位不变，高位空出来的位补数值 0。&lt;/p>
&lt;p>&lt;code>***a &amp;gt;&amp;gt; b = a / ( 2 ^ b )***&lt;/code>&lt;/p>
&lt;h2 id="3-无符号右移--">3. 无符号右移( &amp;gt;&amp;gt;&amp;gt; )&lt;/h2>
&lt;p>无符号右移运算符&amp;gt;&amp;gt;&amp;gt;和右移运算符&amp;gt;&amp;gt;是一样的，只不过右移时左边是补上符号位，而无符号右移运算符是补上0，也就是说，对于正数移位来说等同于：&amp;gt;&amp;gt;，负数通过此移位运算符能移位成正数。以-733183670&amp;gt;&amp;gt;&amp;gt;8为例来画一下图&lt;/p>
&lt;h2 id="4-位与--">4. 位与( &amp;amp; )&lt;/h2>
&lt;p>与运算时，进行运算的两个数，从最低位到最高位，一一对应。如果某 bit 的两个数值对应的值都是 1，则结果值相应的 bit 就是 1，否则为 0.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">1&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5-位或--">5. 位或( | )&lt;/h2>
&lt;p>与运算时，进行运算的两个数，从最低位到最高位，一一对应。如果某 bit 的两个数值对应的值只要 1 个为 1，则结果值相应的 bit 就是 1，否则为 0。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">0&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">0&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">1&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="6-位异或--">6. 位异或( ^ )&lt;/h2>
&lt;p>两个操作数进行异或时，对于同一位上，如果数值相同则为 0，数值不同则为 1。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">1&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">1&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">0&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="7-位非--">7. 位非( ~ )&lt;/h2>
&lt;p>对操作数的每一位进行操作，1 变成 0，0 变成 1。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/></entry><entry><title type="text">Java线程池ThreadPoolExecutor</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/threadpoolexecutor/"/><id>https://kiwi4814.github.io/posts/2020/threadpoolexecutor/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2020-04-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、相关概念 **核心线程（CorePool）：**线程池最终执行任务的角色肯定还是线……</summary><content type="html">&lt;h1 id="一相关概念">一、相关概念&lt;/h1>
&lt;p>**核心线程（CorePool）：**线程池最终执行任务的角色肯定还是线程，同时我们也会限制线程的数量，所以我们可以这样理解核心线程，有新任务提交时，首先检查核心线程数，如果核心线程都在工作，而且数量也已经达到最大核心线程数，则不会继续新建核心线程，而会将任务放入等待队列。&lt;/p>
&lt;p>**等待队列（WorkQueue）：**等待队列用于存储当核心线程都在忙时，继续新增的任务，核心线程在执行完当前任务后，也会去等待队列拉取任务继续执行，这个队列一般是一个线程安全的阻塞队列，它的容量也可以由开发者根据业务来定制。&lt;/p>
&lt;p>&lt;strong>非核心线程&lt;/strong>：当等待队列满了，如果当前线程数没有超过最大线程数，则会新建线程执行任务，那么核心线程和非核心线程到底有什么区别呢？本质上它们没什么区别。&lt;/p>
&lt;p>**线程活动保持时间（keepAliveTime）：**线程空闲下来之后，保持存活的持续时间，超过这个时间还没有任务执行，该工作线程结束。&lt;/p>
&lt;p>**饱和策略（RejectedExcutionHandler）：**当等待队列已满，线程数也达到最大线程数时，线程池会根据饱和策略来执行后续操作，默认的策略是抛弃要加入的任务。&lt;/p>
&lt;p>&lt;strong>线程池的状态：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>RUNNING：运行状态，值是最小的，刚创建的线程池就是此状态&lt;/li>
&lt;li>SHUTDOWN：停工状态，不再接受新任务，已经接收的会继续执行&lt;/li>
&lt;li>STOP：停止状态，不再接收新任务，已经接收正在执行的也会中断&lt;/li>
&lt;li>清空状态：所有任务都停止了，工作的线程也全部都结束了&lt;/li>
&lt;li>TERMINATED：终止状态，线程池已销毁&lt;/li>
&lt;/ul>
&lt;h1 id="二源码分析">二、源码分析&lt;/h1>
&lt;ol>
&lt;li>&lt;strong>线程池的线程是如何做到复用的。&lt;/strong> 线程池中的线程在循环中尝试取任务执行，这一步会被阻塞，如果设置了allowCoreThreadTimeOut为true，则线程池中的所有线程都会在keepAliveTime时间超时后还未取到任务而退出。或者线程池已经STOP，那么所有线程都会被中断，然后退出。&lt;/li>
&lt;li>&lt;strong>线程池是如何做到高效并发的。&lt;/strong> 看整个线程池的工作流程，有以下几个需要特别关注的并发点. ①: 线程池状态和工作线程数量的变更。这个由一个AtomicInteger变量 ctl来解决原子性问题。 ②: 向工作Worker容器workers中添加新的Worker的时候。这个线程池本身已经加锁了。 ③: 工作线程Worker从等待队列中取任务的时候。这个由工作队列本身来保证线程安全，比如LinkedBlockingQueue等。&lt;/li>
&lt;/ol>
&lt;h1 id="三executors的使用">三、Executors的使用&lt;/h1>
&lt;p>JDK已经给我们提供了很方便的线程池工厂类Executors, 方便我们快速创建线程池，可能在阅读源码之前，我们在面对具体的业务场景时，到底该选择哪种线程池配置是有疑问的，我们来看一下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ExecutorService&lt;/span> &lt;span class="nf">newFixedThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">nThreads&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">nThreads&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nThreads&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">0L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedBlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>newFixedThreadPool, 可以看到我们需要传入一个线程数量的参数nThreads，这样线程池的核心线程数和最大线程数都会设成nThreads, 而它的等待队列是一个LinkedBlockingQueue，它的容量限制是Integer.MAX_VALUE, 可以认为是没有边界的。核心线程keepAlive时间0，allowCoreThreadTimeOut默认false。所以这个方法创建的线程池适合能估算出需要多少核心线程数量的场景。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ExecutorService&lt;/span> &lt;span class="nf">newSingleThreadExecutor&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FinalizableDelegatedExecutorService&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">0L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedBlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>newSingleThreadExecutor, 有且只有一个线程在工作，适合任务顺序执行，缺点但是不能充分利用CPU多核性能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ExecutorService&lt;/span> &lt;span class="nf">newCachedThreadPool&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">60L&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">SynchronousQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>newCachedThreadPool, 核心线程数0，最大线程数Integer.MAX_VALUE, 线程keepAlive时间60s，用的队列是SynchronousQueue，这种队列本身不会存任务，只做转发，所以newCachedThreadPool适合执行大量的，轻量级任务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ScheduledExecutorService&lt;/span> &lt;span class="nf">newScheduledThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">corePoolSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">corePoolSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">NANOSECONDS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="n">DelayedWorkQueue&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>newScheduledThreadPool, 执行周期性任务，类似定时器。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/></entry><entry><title type="text">神奇的i=i++</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/i-plus-plus/"/><id>https://kiwi4814.github.io/posts/2020/i-plus-plus/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2020-03-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">先来看一段代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void main(String[] args) { int i = 5; int a = i++; System.out.println(&amp;#34;a=&amp;#34; + a); System.out.println(i); int……</summary><content type="html">&lt;p>先来看一段代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;b=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;c=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="err">】&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;d=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码的输出结果可能很多人都能看出来，如下所示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">d&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">k&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中的计算逻辑也很清晰，&lt;code>i++&lt;/code>是先赋值后计算，而&lt;code>++i&lt;/code>是先计算后赋值。&lt;/p>
&lt;p>那么换一种写法呢，可能很多小伙伴都会猜错。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码按照之前的逻辑来看，输出结果应该为6，5，4，5。但是执行程序后的输出结果为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了搞清楚这中间的逻辑，我们不妨使用&lt;code>javap -c&lt;/code>编译一下源代码看看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译后的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span>&lt;span class="o">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Code&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iconst_5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">istore_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iload_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iinc&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">istore_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">getstatic&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iload_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">11&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">invokevirtual&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="c1">// Method java/io/PrintStream.println:(I)V
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">14&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这其中用到的指令集的含义如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>*iconst*&lt;/code>&lt;/strong> ：将单字节的int常量值(-128~127)推送至栈顶&lt;/li>
&lt;li>&lt;em>&lt;strong>&lt;code>istore&lt;/code>&lt;/strong>&lt;/em> ：将栈顶int型数值存入指定本地变量&lt;/li>
&lt;li>&lt;em>&lt;strong>&lt;code>iload&lt;/code>&lt;/strong>&lt;/em> ：将指定的int型本地变量推送至栈顶&lt;/li>
&lt;li>&lt;code>***iinc***&lt;/code>：该指令用于对本地(局部)变量进行自增减操作。该指令第一参数为本地变量的编号，第二个参数为自增减的数量&lt;/li>
&lt;li>&lt;em>&lt;strong>&lt;code>getstatic&lt;/code>&lt;/strong>&lt;/em> ：获取指定类的静态域，并将其值压入栈顶&lt;/li>
&lt;/ul>
&lt;p>所以这段代码的指令集的含义为：&lt;/p>
&lt;ol>
&lt;li>&lt;code>iconst_5&lt;/code> 表示将一个值为5的int值推送到栈顶&lt;/li>
&lt;li>&lt;code>istore_1&lt;/code> 把栈顶的int值5赋给第二个本地变量&lt;code>i&lt;/code>（第1个本地变量应该是this）&lt;/li>
&lt;li>&lt;code>iload_1&lt;/code> 表示把第二个本地变量&lt;code>i&lt;/code>的值推入栈顶，此时栈顶仍然为5&lt;/li>
&lt;li>&lt;code>iinc 1, 1&lt;/code> 表示将第二个本地变量的值加1，也就是执行了&lt;code>i++&lt;/code>，此时的&lt;code>i&lt;/code>值为6了已经&lt;/li>
&lt;li>&lt;code>istore_1&lt;/code> 再次将栈顶int值（仍然为5）赋给第二个本地变量&lt;code>i&lt;/code>&lt;/li>
&lt;li>&lt;code>getstatic&lt;/code> 后面为输出的代码&lt;/li>
&lt;/ol>
&lt;p>因此最终打印出来的结果是5。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/></entry><entry><title type="text">控制反转、依赖反转和依赖注入</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/ioc-di/"/><id>https://kiwi4814.github.io/posts/2020/ioc-di/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2020-02-27T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">开始之前，我们先思考一下以下这几个问题： ⭐ 1 . “依赖反转”这个概念指的是“谁跟谁”的……</summary><content type="html">&lt;p>开始之前，我们先思考一下以下这几个问题：&lt;/p>
&lt;aside>
⭐ 1 . “依赖反转”这个概念指的是“谁跟谁”的“什么依赖”被反转了？“反转”两个字该如何理解？
&lt;/aside>
&lt;aside>
⭐ 2 . 我们还经常听到另外两个概念：“控制反转”和“依赖注入”。这两个概念跟“依赖反转”有什么区别和联系呢？它们说的是同一个事情吗？
&lt;/aside>
&lt;aside>
⭐ 3 . 如果你熟悉 Java 语言，那 Spring 框架中的 IOC 跟这些概念又有什么关系呢？
&lt;/aside>
&lt;p>带着以上这几个问题，我们来逐一学习一下其中的区别：&lt;/p>
&lt;h1 id="控制反转ioc">控制反转（IOC）&lt;/h1>
&lt;p>IOC的英文翻译是“Inversion Of Controller”，此处需要注意的是这里的IOC和Spring框架的IOC还是有一定的区别的。&lt;/p>
&lt;p>我们先通过一个例子看一下，什么是控制反转。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">doTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//这部分逻辑可以放到框架中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">doTest&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test succeed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test failed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面的代码中，所有的流程都由程序员来控制。如果我们抽象出一个下面这样的框架，我们再来看，如何利用框架来实现同样的功能，具体的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestCase&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">doTest&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test succeed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test failed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">doTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">JunitApplication&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TestCase&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">testCases&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TestCase&lt;/span> &lt;span class="n">testCase&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">testCases&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">testCase&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">TestCase&lt;/span> &lt;span class="n">testCase&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">testCases&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">testCase&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>把这个简化版本的测试框架引入到工程中之后，我们只需要在框架预留的扩展点，也就是 TestCase 类中的 doTest() 抽象函数中，填充具体的测试代码就可以实现之前的功能了，完全不需要写负责执行流程的 main() 函数了。 具体的代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserServiceTest&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">TestCase&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">doTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 注册操作还可以通过配置的方式来实现，不需要程序员显示调用register()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">JunitApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">UserServiceTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>刚刚举的这个例子，就是典型的通过框架来实现“控制反转”的例子。框架提供了一个可扩展的代码骨架，用来组装对象、管理整个执行流程。程序员利用框架进行开发的时候，只需要往预留的扩展点上，添加跟自己业务相关的代码，就可以利用框架来驱动整个程序流程的执行。&lt;/p>
&lt;p>这里的“控制”指的是对程序执行流程的控制，而“反转”指的是在没有使用框架之前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的执行流程可以通过框架来控制。流程的控制权从程序员“反转”到了框架。&lt;/p>
&lt;p>实际上，实现控制反转的方法有很多，除了刚才例子中所示的类似于模板设计模式的方法之外，还有马上要讲到的依赖注入等方法，所以，控制反转并不是一种具体的实现技巧，而是一个比较笼统的设计思想，一般用来指导框架层面的设计。&lt;/p>
&lt;h1 id="依赖注入di">依赖注入(DI)&lt;/h1>
&lt;p>依赖注入跟控制反转恰恰相反，它是一种具体的编码技巧。依赖注入的英文翻译是“&lt;code>Dependency Injection&lt;/code>”，缩写为DI。&lt;/p>
&lt;p>那到底什么是依赖注入呢？我们用一句话来概括就是：不通过 new() 的方式在类内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或注入）给类使用。&lt;/p>
&lt;p>我们还是通过一个例子来解释一下。在这个例子中，Notification 类负责消息推送，依赖 MessageSender 类实现推送商品促销、验证码等消息给用户。我们分别用依赖注入和非依赖注入两种方式来实现一下。具体的实现代码如下所示：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>非依赖注入的方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 非依赖注入实现方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Notification&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Notification&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//此处有点像hardcode
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MessageSender&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略校验逻辑等...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 程序员使用时需要new对象，来发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">TestCode&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">notification&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cellphone&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>依赖注入的实现方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 依赖注入的实现方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NotificationDI&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 通过构造函数将messageSender传递进来
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">NotificationDI&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...省略校验逻辑等...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 使用NotificationDI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">TestCodeDI&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MessageSender&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NotificationDI&lt;/span> &lt;span class="n">NotificationDI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NotificationDI&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">messageSender&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NotificationDI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cellphone&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>通过依赖注入的方式来将依赖的类对象传递进来，这样就提高了代码的扩展性，我们可以灵活地替换依赖的类。这一点在我们之前讲“开闭原则”的时候也提到过。当然，上面代码还有继续优化的空间，我们还可以把 MessageSender 定义成接口，基于接口而非实现编程。改造后的代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Notification&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">messageSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">messageSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">interface&lt;/span> &lt;span class="nc">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 短信发送类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">SmsSender&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 站内信发送类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">InboxSender&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">cellphone&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">TestCode&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//使用Notification
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">messageSender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SmsSender&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">messageSender&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际上，你只需要掌握刚刚举的这个例子，就等于完全掌握了依赖注入。尽管依赖注入非常简单，但却非常有用，在后面的章节中，我们会讲到，它是编写可测试性代码最有效的手段。&lt;/p>
&lt;h1 id="依赖注入框架di-framework">依赖注入框架（DI Framework）&lt;/h1>
&lt;p>弄懂了什么是“依赖注入”，我们再来看一下，什么是“依赖注入框架”。我们还是借用刚刚的例子来解释。&lt;/p>
&lt;p>在采用依赖注入实现的 Notification 类中，虽然我们不需要用类似 hard code 的方式，在类内部通过 new 来创建 MessageSender 对象，但是，这个创建对象、组装（或注入）对象的工作仅仅是被移动到了更上层代码而已，还是需要我们程序员自己来实现。具体代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Demo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MessageSender&lt;/span> &lt;span class="n">sender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SmsSender&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//创建对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Notification&lt;/span> &lt;span class="n">notification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Notification&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sender&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//依赖注入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">notification&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;13918942177&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;短信验证码：2346&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在实际的软件开发中，一些项目可能会涉及几十、上百、甚至几百个类，类对象的创建和依赖注入会变得非常复杂。如果这部分工作都是靠程序员自己写代码来完成，容易出错且开发成本也比较高。而对象创建和依赖注入的工作，本身跟具体的业务无关，我们完全可以抽象成框架来自动完成。&lt;/p>
&lt;p>你可能已经猜到，这个框架就是“依赖注入框架”。我们只需要通过依赖注入框架提供的扩展点，简单配置一下所有需要创建的类对象、类与类之间的依赖关系，就可以实现由框架来自动创建对象、管理对象的生命周期、依赖注入等原本需要程序员来做的事情。&lt;/p>
&lt;p>实际上，现成的依赖注入框架有很多，比如 Google Guice、Java Spring、Pico Container、Butterfly Container 等。不过，如果你熟悉 Java Spring 框架，你可能会说，Spring 框架自己声称是&lt;strong>控制反转容器（Inversion Of Control Container）&lt;/strong>。&lt;/p>
&lt;p>实际上，这两种说法都没错。只是控制反转容器这种表述是一种非常宽泛的描述，DI 依赖注入框架的表述更具体、更有针对性。因为我们前面讲到实现控制反转的方式有很多，除了依赖注入，还有模板模式等，而 Spring 框架的控制反转主要是通过依赖注入来实现的。不过这点区分并不是很明显，也不是很重要，你稍微了解一下就可以了。&lt;/p>
&lt;h1 id="依赖反转原则">依赖反转原则&lt;/h1>
&lt;p>前面讲了控制反转、依赖注入、依赖注入框架，现在，我们来讲一讲今天的主角：依赖反转原则。依赖反转原则的英文翻译是 &lt;code>Dependency Inversion Principle&lt;/code>，缩写为 DIP。中文翻译有时候也叫依赖倒置原则。&lt;/p>
&lt;p>为了追本溯源，我先给出这条原则最原汁原味的英文描述：&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>High-level modules shouldn’t depend on low-level modules. Both modules should depend on abstractions. In addition, abstractions shouldn’t depend on details. Details depend on abstractions.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>我们将它翻译成中文，大概意思就是：高层模块（high-level modules）不要依赖低层模块（low-level）。高层模块和低层模块应该通过抽象（abstractions）来互相依赖。除此之外，抽象（abstractions）不要依赖具体实现细节（details），具体实现细节（details）依赖抽象（abstractions）。&lt;/p>
&lt;p>所谓高层模块和低层模块的划分，简单来说就是，在调用链上，调用者属于高层，被调用者属于低层。在平时的业务代码开发中，高层模块依赖底层模块是没有任何问题的。实际上，这条原则主要还是用来指导框架层面的设计，跟前面讲到的控制反转类似。我们拿 Tomcat 这个 Servlet 容器作为例子来解释一下。&lt;/p>
&lt;p>Tomcat 是运行 Java Web 应用程序的容器。我们编写的 Web 应用程序代码只需要部署在 Tomcat 容器下，便可以被 Tomcat 容器调用执行。按照之前的划分原则，Tomcat 就是高层模块，我们编写的 Web 应用程序代码就是低层模块。Tomcat 和应用程序代码之间并没有直接的依赖关系，两者都依赖同一个“抽象”，也就是 Servlet 规范。Servlet 规范不依赖具体的 Tomcat 容器和应用程序的实现细节，而 Tomcat 容器和应用程序依赖 Servlet 规范。&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/><category scheme="https://kiwi4814.github.io/tags/2020/02/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/" term="软件设计" label="软件设计"/></entry><entry><title type="text">Java数组All elements are null异常</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2020/all-elements-are-null/"/><id>https://kiwi4814.github.io/posts/2020/all-elements-are-null/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2020-01-03T22:10:15+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">使用Mybatis查询数据库时，如果返回值是null并且以List接收时，会出现一条……</summary><content type="html">&lt;p>使用Mybatis查询数据库时，如果返回值是null并且以List&lt;String>接收时，会出现一条空的记录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">shldllArrays&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ersJqxxExtMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">selectShldllByJqbh&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jqbhs&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时候如果使用&lt;code>CollectionUtils.isNotEmpty(shldllArrays)&lt;/code>去判断是无法判断这种情况的，从而导致后面可能会报错。在断点中可以发现，这个数组虽然size为1，但是提示：All elements are null。&lt;/p>
&lt;p>解决办法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 移除所有的null元素，为了防止出现空指针异常【查询返回String会返回一个空null】
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">shldllArrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">removeAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singleton&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/><category scheme="https://kiwi4814.github.io/tags/2020/01/%E9%94%99%E9%A2%98%E9%9B%86/" term="错题集" label="错题集"/></entry><entry><title type="text">介绍几种分号的不同写法</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/semicolon/"/><id>https://kiwi4814.github.io/posts/2019/semicolon/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2019-12-31T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">起因是因为代码的bug发现在SQL语句中夹杂了一个希腊文的问号（在IDEA编译器中跟……</summary><content type="html">&lt;p>起因是因为代码的bug发现在SQL语句中夹杂了一个希腊文的问号（在IDEA编译器中跟分号长的一模一样，无从分辨），遂整理了一下分号的几种编码格式。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">符号&lt;/th>
&lt;th style="text-align:center">Unicode编码&lt;/th>
&lt;th style="text-align:center">十进制编码&lt;/th>
&lt;th style="text-align:left">说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">;&lt;/td>
&lt;td style="text-align:center">&lt;code>\u003b&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>59&lt;/code>&lt;/td>
&lt;td style="text-align:left">普通分号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">;&lt;/td>
&lt;td style="text-align:center">&lt;code>\u37e&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>894&lt;/code>&lt;/td>
&lt;td style="text-align:left">希腊文的问号！！！，很容易和普通的分号混淆&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">；&lt;/td>
&lt;td style="text-align:center">&lt;code>\uff1b&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>65307&lt;/code>&lt;/td>
&lt;td style="text-align:left">全角分号，中文分号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">︔&lt;/td>
&lt;td style="text-align:center">&lt;code>\ufe14&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>65044&lt;/code>&lt;/td>
&lt;td style="text-align:left">垂直分号（&lt;code>PRESENTATION FORM FOR VERTICAL SEMICOLON&lt;/code>），以兼容 &lt;a href="https://zh.wikipedia.org/wiki/GB_18030">GB 18030&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">﹔&lt;/td>
&lt;td style="text-align:center">&lt;code>\ufe54&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>65108&lt;/code>&lt;/td>
&lt;td style="text-align:left">小分号（&lt;code>SMALL SEMICOLON&lt;/code>），源自 &lt;a href="https://zh.wikipedia.org/wiki/CNS11643">CNS11643&lt;/a> / &lt;a href="https://zh.wikipedia.org/wiki/Big5">Big5&lt;/a>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/></entry><entry><title type="text">获取YYYY-MM-dd所在月份的最后一天</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/js-lastday/"/><id>https://kiwi4814.github.io/posts/2019/js-lastday/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2019-12-31T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">获取日期格式为&amp;quot;YYYY-MM-dd&amp;quot;所在月份的最后一天 1 2 3 4……</summary><content type="html">&lt;h2 id="获取日期格式为yyyy-mm-dd所在月份的最后一天">获取日期格式为&lt;code>&amp;quot;YYYY-MM-dd&amp;quot;&lt;/code>所在月份的最后一天&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getLastDay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">year&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">month&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 取下一个月的第一天
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">new_year&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">year&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">new_month&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">month&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">month&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">new_month&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">new_year&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">new_date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">new_year&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">new_month&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取当前月的最后一天
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">new_date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;yyyy-MM-dd&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//获取当月最后一天日期
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;M+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMonth&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//月份
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;d+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDate&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="c1">//日
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;h+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getHours&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="c1">//小时
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;m+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMinutes&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="c1">//分
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;s+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getSeconds&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="c1">//秒
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;q+&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMonth&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">//季度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;S&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMilliseconds&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//毫秒
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/(y+)/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">RegExp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFullYear&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">k&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;(&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">k&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">RegExp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">RegExp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="s2">&amp;#34;00&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">]).&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">]).&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2019/12/javascript/" term="JavaScript" label="JavaScript"/></entry><entry><title type="text">Homebrew卡在 Updating Homebrew 的解决方法</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/brew-update/"/><id>https://kiwi4814.github.io/posts/2019/brew-update/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2019-12-19T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">在使用 Homebrew install的过程中，经常会卡在Updating Homebrew...这个……</summary><content type="html">&lt;p>在使用 Homebrew install的过程中，经常会卡在&lt;code>Updating Homebrew...&lt;/code>这个过程中。&lt;/p>
&lt;h2 id="解决办法一修改配置文件取消检查更新的操作">解决办法一：修改配置文件，取消检查更新的操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 新增一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">HOMEBREW_NO_AUTO_UPDATE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="解决办法二按住-control--c-取消本次更新操作">解决办法二：按住 &lt;code>control （⌃）+ c&lt;/code> 取消本次更新操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">brew install composer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Updating Homebrew...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^C
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>按住 control + c 之后命令行会显示 &lt;strong>^C&lt;/strong>，就代表已经取消了 Updating Homebrew 操作&lt;/p>
&lt;p>大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">~ brew install nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Updating Homebrew...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^C&lt;span class="o">==&lt;/span>&amp;gt; Installing dependencies &lt;span class="k">for&lt;/span> nginx: &lt;span class="nv">pcre&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Installing nginx dependency: &lt;span class="nv">pcre&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/bottles/pcre-8.43.catalina.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">######################################################################## 100.0%&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Pouring pcre-8.43.catalina.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">🍺 /usr/local/Cellar/pcre/8.43: &lt;span class="m">204&lt;/span> files, 5.5MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Installing &lt;span class="nv">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/bottles/nginx-1.17.6.catalina.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">######################################################################## 100.0%&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Pouring nginx-1.17.6.catalina.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&amp;gt; Caveats
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Docroot is: /usr/local/var/www
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The default port has been &lt;span class="nb">set&lt;/span> in /usr/local/etc/nginx/nginx.conf to &lt;span class="m">8080&lt;/span> so that
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx can run without sudo.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx will load all files in /usr/local/etc/nginx/servers/.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To have launchd start nginx now and restart at login:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> brew services start nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Or, &lt;span class="k">if&lt;/span> you don&lt;span class="s1">&amp;#39;t want/need a background service you can just run:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> nginx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">==&amp;gt; Summary
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">🍺 /usr/local/Cellar/nginx/1.17.6: 25 files, 2MB
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">==&amp;gt; Caveats
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">==&amp;gt; nginx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">Docroot is: /usr/local/var/www
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">nginx can run without sudo.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">nginx will load all files in /usr/local/etc/nginx/servers/.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">To have launchd start nginx now and restart at login:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> brew services start nginx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">Or, if you don&amp;#39;&lt;/span>t want/need a background service you can just run:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方法是临时的、一次性的&lt;/p>
&lt;h2 id="解决办法三替换镜像源推荐">解决办法三：替换镜像源（推荐）&lt;/h2>
&lt;p>平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：&lt;/p>
&lt;p>&lt;code>brew.git&lt;/code>&lt;/p>
&lt;p>&lt;code>homebrew-core.git&lt;/code>&lt;/p>
&lt;p>&lt;code>homebrew-bottles&lt;/code>&lt;/p>
&lt;p>通过以下代码依次将这三个仓库的镜像源更换为不同的国内镜像源（&lt;code>zsh&lt;/code>下）&lt;/p>
&lt;h3 id="1-官方镜像源">1. 官方镜像源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://github.com/Homebrew/brew.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/core&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://github.com/Homebrew/homebrew-core.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-cask.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/cask&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://github.com/Homebrew/homebrew-cask.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 应用生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除homebrew-bottles&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vi ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#### 按i进入输入模式，输入模式下删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置，然后按:wq保存并退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-阿里镜像源">2. 阿里镜像源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">/Library/Taps/homebrew/homebrew-core&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 应用生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-bottles:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-清华镜像源">3. 清华镜像源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/core&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-cask.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/cask&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 应用生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-bottles（根据镜像地址猜测）:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-中科大镜像源">4. 中科大镜像源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/core&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-cask.git:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -C &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo homebrew/cask&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 应用生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换homebrew-bottles:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关于&lt;code>homebrew-bottles&lt;/code>，分为以下两种情况：&lt;/p>
&lt;p>【1】&lt;code>bash&lt;/code>用户和&lt;code>zsh&lt;/code>用户的命令不同，以上示例中关于&lt;code>homebrew-bottles&lt;/code>的替换仅适用于&lt;code>zsh&lt;/code>用户。&lt;/p>
&lt;p>【2】&lt;code>bash&lt;/code>用户请将配置文件&lt;code>zshrc&lt;/code>换为&lt;code>bash_profile&lt;/code>&lt;/p>
&lt;p>下面给出清华大学镜像源给出的替换&lt;code>homebrew-bottles&lt;/code>在&lt;code>bash&lt;/code>下的代码，其他以此类推。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">### 临时替换&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">HOMEBREW_BOTTLE_DOMAIN&lt;/span>&lt;span class="o">=&lt;/span>https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">### 长期替换&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bash_profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.bash_profile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2019/12/homebrew/" term="Homebrew" label="Homebrew"/><category scheme="https://kiwi4814.github.io/tags/2019/12/macos/" term="MacOS" label="MacOS"/></entry><entry><title type="text">Camunda流程引擎简介及功能拓展</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/camunda/"/><id>https://kiwi4814.github.io/posts/2019/camunda/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2019-08-25T20:35:47+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一、流程引擎以及BPMN2.0规范 Camunda和BPMN Camunda BPM （BPM，Busine……</summary><content type="html">&lt;h2 id="一流程引擎以及bpmn20规范">一、流程引擎以及BPMN2.0规范&lt;/h2>
&lt;hr>
&lt;h3 id="camunda和bpmn">Camunda和BPMN&lt;/h3>
&lt;p>Camunda BPM （BPM，Business Process Manager，业务流程管理）是一个灵活的工作流和过程自动化框架，它的核心是一个在Java虚拟机内部运行的原生BPMN 2.0流程引擎，因此它可以嵌入到任何Java应用程序或运行时容器中。Camunda BPM与Java EE 6集成，并可以与Spring Framework完美匹配。 Camunda BPM附带了用于创建工作流和决策模型，在生产中操作已部署模型以及允许用户执行分配给他们的工作流任务的工具。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/architecture-overview.png" alt="流程引擎架构图（来源：官方文档）">&lt;/p>
&lt;p>流程引擎架构图（来源：官方文档）&lt;/p>
&lt;p>&lt;strong>下面我们来看下维基百科对于BPMN的定义：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>业务流程模型和标记法（BPMN，Business Process Model and Notation）是对象管理组织（OMG，Object Management Group）维护的关于业务流程建模的行业性标准。它创建在与UML的活动图非常相似的流程图法（flowcharting）基础上，为“业务流程图”（BPD, Business Process Diagram）中的特定业务流程提供一套图形化标记法。BPMN的目标是，通过提供一套既匹配业务人员直观又能表现复杂流程语义的标记法，同时为技术人员和业务人员从事业务流程管理提供支持。BPMN规范还提供从标记法的图到执行语言基础构造的映射，尤其是业务流程执行语言（BPEL）。&lt;/p>
&lt;/blockquote>
&lt;p>BPMN文件的底层数据格式是xml，定义了一些标签的标准含义和图形表示。一方面通过图形方便所有人理解流程，另一方面限制实现方必须按着流程的要求来实现。&lt;/p>
&lt;p>Camunda BPM官方提供了用于建模BPMN工作流和DMN决策的桌面应用程序Camunda Modeler。&lt;/p>
&lt;hr>
&lt;h3 id="camunda-modelerhttpscamundacomproductsmodeler">&lt;a href="https://camunda.com/products/modeler/">Camunda Modeler&lt;/a>&lt;/h3>
&lt;p>下面为使用Camunda Moleler设计的一张只含有基本元素的流程定义：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/1559570847866.png" alt="一个普通的流程图示例">&lt;/p>
&lt;p>一个普通的流程图示例&lt;/p>
&lt;p>对应的BPMN源码为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:process&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;Process_1em8emw&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;项目材料审核&amp;#34;&lt;/span> &lt;span class="na">isExecutable=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:startEvent&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;StartEvent_1&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;开始节点&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:outgoing&amp;gt;&lt;/span>SequenceFlow_1pagkpa&lt;span class="nt">&amp;lt;/bpmn:outgoing&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:startEvent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:sequenceFlow&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;SequenceFlow_1pagkpa&amp;#34;&lt;/span> &lt;span class="na">sourceRef=&lt;/span>&lt;span class="s">&amp;#34;StartEvent_1&amp;#34;&lt;/span> &lt;span class="na">targetRef=&lt;/span>&lt;span class="s">&amp;#34;Task_0hn604q&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:userTask&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;Task_0hn604q&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;填写材料&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_1pagkpa&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_058xsmq&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:outgoing&amp;gt;&lt;/span>SequenceFlow_0rs76c2&lt;span class="nt">&amp;lt;/bpmn:outgoing&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:multiInstanceLoopCharacteristics&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:userTask&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:exclusiveGateway&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;ExclusiveGateway_0ol3vgn&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;是否需要合伙人批阅&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_0icnkq2&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:outgoing&amp;gt;&lt;/span>SequenceFlow_1hoelow&lt;span class="nt">&amp;lt;/bpmn:outgoing&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:outgoing&amp;gt;&lt;/span>SequenceFlow_160qlaz&lt;span class="nt">&amp;lt;/bpmn:outgoing&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:exclusiveGateway&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:endEvent&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;EndEvent_1qn3z3o&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;结束&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_0ymsxgc&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;bpmn:incoming&amp;gt;&lt;/span>SequenceFlow_160qlaz&lt;span class="nt">&amp;lt;/bpmn:incoming&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:endEvent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/bpmn:process&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>开始事件 &lt;strong>StartEvent&lt;/strong>&lt;/p>
&lt;p>原型细线标记，标明一个流程的开始事件，分为空启动、异常启动、定时启动等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结束事件 &lt;strong>EndEvent&lt;/strong>&lt;/p>
&lt;p>原型粗线标记，标明一个流程的结束事件，分为空结束、异常结束、取消结束等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>顺序流 &lt;strong>SequenceFlow&lt;/strong>&lt;/p>
&lt;p>顺序流表明两个模型之间的连接线，分为标准顺序流和条件顺序流。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务 &lt;strong>Task&lt;/strong>&lt;/p>
&lt;p>最重要的业务模型，一般用一个矩形表示，根据矩形左上角小图标的不同可以分为用户任务、Service任务、脚本任务、邮件任务等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>网关 &lt;strong>Gateway&lt;/strong>&lt;/p>
&lt;p>网关是用于控制流程走向的执行令牌，根据功能的不同主要分为排他网关、并行网关、包容网关、事件网关。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>子流程 &lt;strong>Subprocess&lt;/strong>&lt;/p>
&lt;p>把一切需要处理的任务归结到一起作为作为一个大流程的一部分，因为子流程嵌入在主流程中，所有也叫“嵌入式子流程”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>边界事件 &lt;strong>Boundary Event&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>中间事件 &lt;strong>Intermediate Event&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>监听器 &lt;strong>Listener&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="uel表达式">UEL表达式&lt;/h3>
&lt;p>Camunda BPM支持统一表达式语言（EL），它是JSP 2.1标准（JSR-245）的一部分，使用开源JUEL（Java Unified Expression Language，EL的Java实现）实现。在Camunda BPM的绝大多数地方都可以使用UEL表达式，主要支持两个UEL表达式：UEL-value 和 UEL-method。&lt;/p>
&lt;hr>
&lt;h3 id="流程引擎的生命周期">流程引擎的生命周期&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/Camunda%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E7%AE%80%E4%BB%8B%20a4fe0f2279754a49b750f583f42fa27b.png" alt="流程引擎的生命周期">&lt;/p>
&lt;p>流程引擎的生命周期&lt;/p>
&lt;p>生命周期&lt;/p>
&lt;ul>
&lt;li>&lt;strong>定义&lt;/strong>：工作流的生命周期从定义开始，此阶段的主要任务是收集业务需求并且转化为流程定义。&lt;/li>
&lt;li>&lt;strong>发布&lt;/strong>：由开发人员打包各种资源，在流程引擎平台发布流程定义。在具体的流程引擎中包括流程定义文件（.bpmn结尾）、自定义表单、任务监听类等等。&lt;/li>
&lt;li>&lt;strong>执行&lt;/strong>：具体的流程引擎按照事先定义好的流程处理路线以任务驱动的方式执行业务流程。&lt;/li>
&lt;li>&lt;strong>监控&lt;/strong>：根据任务（Task）的结果做出相应的处理。&lt;/li>
&lt;li>&lt;strong>优化&lt;/strong>：不满足业务需求的流程或者需求变更的流程进行重新设计和发布。&lt;/li>
&lt;/ul>
&lt;h2 id="二流程引擎基础概念介绍">二、流程引擎基础概念介绍&lt;/h2>
&lt;hr>
&lt;h3 id="多租户-multitenancy">多租户 Multitenancy&lt;/h3>
&lt;p>总的来说，多租户是一个软件为多个不同组织提供服务的概念。其核心是数据是隔离的，一个组织不能看到其他组织的数据。在这个语境中，一个这样的组织（或部门、团队……）被称为一个&lt;em>租户（tenant）&lt;/em>。&lt;/p>
&lt;p>在Camunda流程引擎中部署流程定义时，可以传递一个&lt;em>租户标识符（tenant identifier）&lt;/em>，当然为了实际使用流程数据上的租户标识符，所有查询API都可以通过租户过滤。&lt;/p>
&lt;hr>
&lt;h3 id="流程定义-process-definitions">流程定义 Process Definitions&lt;/h3>
&lt;p>一个流程定义规定了整个流程的结构，Camunda BPM使用BPMN 2.0规范作为它的主要设计语言，并在此基础上扩展了新的元素和属性。&lt;/p>
&lt;p>主要属性：tenant，processDefinitionKey，version，processDefinitionId&lt;/p>
&lt;hr>
&lt;h3 id="流程实例-process-instances">流程实例 Process Instances&lt;/h3>
&lt;p>流程实例是一个流程定义（Process Definitions）与业务对象联系的入口，也就是说是流程定义的实际应用。&lt;/p>
&lt;p>流程实例与流程定义的关系与面向对象编程中的对象和类之间的关系相同。&lt;/p>
&lt;p>关键属性：processInstanceId、instanceRemark&lt;/p>
&lt;hr>
&lt;h3 id="流程执行对象-execution">流程执行对象 Execution&lt;/h3>
&lt;p>Execution的含义就是一个流程实例（Process Instances）具体要执行的过程对象。一个流程实例中，流程实例本身也是一条Execution，作为所有Execution的根节点一起形成一个树状结构。&lt;/p>
&lt;hr>
&lt;h3 id="活动实例-activity-instances">活动实例 Activity Instances&lt;/h3>
&lt;p>Activity Instances的概念与Execution比较像，不同的是Exectuion是把Activity Instances串起来的线的唯一标识。Activity Instances也是树状结构的，可能是Task、Subprocess、MuiltiInstance等等。&lt;/p>
&lt;hr>
&lt;h3 id="用户任务-usertask">用户任务 UserTask&lt;/h3>
&lt;p>顾名思义，表示需要人员去审批的任务。&lt;/p>
&lt;p>根据任务的处理方式的不同，可以分为单人审批，多人审批（并行），多人审批（串行）等。&lt;/p>
&lt;p>任务可以设置的主要属性有审批人，任务到期日，任务优先级等。其中关于审批人的设置，除了直接填写用户之外，还可以填写UEL表达式来支持从流程变量中获取审批人或者组以及从JavaBean中获取审批人。&lt;/p>
&lt;hr>
&lt;h3 id="任务和任务定义-jobs-and-job-definitions">任务和任务定义 Jobs and Job Definitions&lt;/h3>
&lt;hr>
&lt;h3 id="流程变量-process-variables">流程变量 Process Variables&lt;/h3>
&lt;p>流程变量是指在流程运行状态的时候（ProcessInstance而不是ProcessDefinition）存储的数据，它的数据结构本质为&lt;code>Map&amp;lt;String, Object&amp;gt;&lt;/code>，可以通过流程引擎提供的API进行数据的修改。流程变量是范围性的，也就是说可以为某个任务节点单独设置流程变量，这个值仅仅存在于当前的任务节点。也可以为整个流程设置全局性的流程变量，在整个流程的运行过程中都是可以查看并使用的。&lt;/p>
&lt;h2 id="三表结构及接口设计">三、表结构及接口设计&lt;/h2>
&lt;hr>
&lt;h3 id="流程引擎表结构">流程引擎表结构&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/erd_710_bpmn.svg" alt="流程引擎的表结构（来源：官方文档）">&lt;/p>
&lt;p>流程引擎的表结构（来源：官方文档）&lt;/p>
&lt;p>根据前缀的不同，这些表可以分为以下几类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ACT_GE_&lt;/strong>：General，存储通用的配置&lt;/li>
&lt;li>&lt;strong>ACT_ID_&lt;/strong>：Identity，存储身份相关的数据&lt;/li>
&lt;li>&lt;strong>ACT_RE_&lt;/strong>：Repository，存储静态信息，如流程定义和流程资源等&lt;/li>
&lt;li>&lt;strong>ACT_HI_&lt;/strong>：History，这些表中保存的都是历史数据，比如执行过的流程实例、变量、任务，等等。&lt;/li>
&lt;li>&lt;strong>ACT_RU_&lt;/strong>：只保存流程实例在执行过程中的运行时数据，并且当流程结束后会立即移除这些数据，这是为了保证运行时表尽量的小并运行的足够快。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="拓展表表结构">拓展表表结构&lt;/h3>
&lt;p>自定义拓展表的表结构以GC开头，主要用于存储流程引擎拓展功能的数据、投资管理系统特殊的业务逻辑以及前端在线画图功能的数据等。&lt;/p>
&lt;p>&lt;a href="https://www.notion.so/a28f6f1ec71f42f6874f176ef24a77a8">拓展表部分表结构展示&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="流程引擎api">流程引擎API&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/kiwi4814/pictures/raw/master/img/api.services.png" alt="流程引擎API（来源：官方文档）">&lt;/p>
&lt;p>流程引擎API（来源：官方文档）&lt;/p>
&lt;ul>
&lt;li>&lt;strong>RepositoryService&lt;/strong>提供了管理和控制发布包和流程定义的操作，发布一个流程定义意味着把它上传到引擎中，所有流程都会在保存进数据库之前分析解析好。
&lt;ul>
&lt;li>查询引擎中的流程定义和部署信息。&lt;/li>
&lt;li>暂停或激活流程定义，对应全部和特定流程定义。&lt;/li>
&lt;li>获得流程定义的文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>IdentityService&lt;/strong>可以管理（创建，更新，删除，查询…）群组和用户。&lt;/li>
&lt;li>&lt;strong>TaskService&lt;/strong>主要涉及关于任务的操作。
&lt;ul>
&lt;li>查询分配给用户或组的任务&lt;/li>
&lt;li>创建独立运行任务&lt;/li>
&lt;li>手工设置任务的审批人&lt;/li>
&lt;li>认领并完成一个任务，对任务进行多样化的操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>HistoryService&lt;/strong>提供了流程引擎的所有历史数据的查询，比如历史流程实例、历史任务实例、历史流程变量等。&lt;/li>
&lt;/ul>
&lt;h2 id="四流程功能设计">四、流程功能设计&lt;/h2>
&lt;hr>
&lt;h3 id="选人">选人&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>设置审批人&lt;/strong>&lt;/p>
&lt;p>在流程设计的时候预先选好节点审批人，可以选用户、角色、部门、团队、团队-角色等等，也可自己实现接口用于选人。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态选人（自选审批人）&lt;/strong>&lt;/p>
&lt;p>在流程运行的时候动态的选择下一节点的审批人。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="监听">监听&lt;/h3>
&lt;p>流程引擎本身提供了在流程运行过程中各个节点的监听的实现，可以在捕捉到这些事件之后执行Java代码或者计算表达式。这些事件包括流程开始和结束，网关，节点，顺序流，任务的创建和完成等等。可以执行的代码包括UEL表达式、实现了对应监听接口的Java Class等。&lt;/p>
&lt;hr>
&lt;h3 id="会签">会签&lt;/h3>
&lt;p>在多人审批的情况下，会存在会签的情况，比如投决会审批，当投委会成员投票数大于等于2/3时，流程就可以通过并且自动跳入下一个节点。针对这种情况，流程引擎本身提供了任务模型（Task）上的完成条件&lt;code>completionCondition&lt;/code>以及顺序流（SequenceFlow）上的条件表达式&lt;code>conditionExpression&lt;/code>。这两者都支持UEL表达式的条件判断，其中UEL表达式中可以使用流程变量。在Task上还可以使用流程引擎内置的额外四个变量：&lt;/p>
&lt;ul>
&lt;li>nrOfInstances 节点的所有的实例数量&lt;/li>
&lt;li>nrOfCompletedInstances 已经完成的实例数量&lt;/li>
&lt;li>nrOfActiveInstances 当前激活的实例数量，当&lt;code>isSequential=true&lt;/code>时， nrOfActiveInstances的值永远为1&lt;/li>
&lt;li>loopCounter 实例循环的次数，依次递减&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="代理">代理&lt;/h3>
&lt;p>任务可交由代理人来代为审批&lt;/p>
&lt;hr>
&lt;h3 id="打回">打回&lt;/h3>
&lt;p>流程审批人将流程打回至流程发起人那里，等待重新发起&lt;/p>
&lt;hr>
&lt;h3 id="撤回">撤回&lt;/h3>
&lt;p>流程发起人撤回发起的流程&lt;/p>
&lt;hr>
&lt;h3 id="跳转">跳转&lt;/h3>
&lt;p>流程在执行中可以任意跳转到其他节点&lt;/p>
&lt;hr>
&lt;h3 id="加签">加签&lt;/h3>
&lt;ul>
&lt;li>前加签&lt;/li>
&lt;li>后加签&lt;/li>
&lt;li>中间加签&lt;/li>
&lt;/ul>
&lt;h2 id="五提供的接口">五、提供的接口&lt;/h2>
&lt;p>&lt;a href="https://www.notion.so/9ba42812297746d492be6bc27f356f5a">通用的参数名称说明&lt;/a>&lt;/p>
&lt;p>下面只列几个常用的接口，其他详见接口文档。&lt;/p>
&lt;hr>
&lt;h3 id="1-查询流程定义列表">1. 查询流程定义列表&lt;/h3>
&lt;p>功能：用于在发起流程时候选择合适的流程去发起，比如过阶段审批、现金流审批、会议室申请等等。&lt;/p>
&lt;p>接口地址：&lt;code>/api/definition/findProcessDefinitionWithType.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：租户ID（&lt;code>tenantId&lt;/code>），流程类型（&lt;code>processType&lt;/code>）【表示类型】&lt;/p>
&lt;hr>
&lt;h3 id="2-查询流程实例列表">2. 查询流程实例列表&lt;/h3>
&lt;p>功能：用于客户端查看和管理已发起的流程&lt;/p>
&lt;p>接口地址：&lt;code>/api/instance/findHisInstanceList.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：详见&lt;code>ProcessSearch&lt;/code>类&lt;/p>
&lt;hr>
&lt;h3 id="3-查询单个流程实例详情">3. 查询单个流程实例详情&lt;/h3>
&lt;p>功能：查询单个流程实例的详情，包括流程定义的xml字符串、流程实例的属性、流程实例已经生成的Activity instance列表等。&lt;/p>
&lt;p>接口地址：&lt;code>/api/instance/findInstanceInfo.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：流程实例ID（&lt;code>processInstanceId&lt;/code>）&lt;/p>
&lt;hr>
&lt;h3 id="4-发起一个流程实例">4. 发起一个流程实例&lt;/h3>
&lt;p>功能：根据流程的定义发起一个流程实例，是客户端发起流程的入口。&lt;/p>
&lt;p>接口地址：&lt;code>/api/instance/startProcessInstance.json&lt;/code>&lt;/p>
&lt;p>参数：租户ID（&lt;code>tenantId&lt;/code>），流程唯一Key（&lt;code>processDefinitionKey&lt;/code>）&lt;/p>
&lt;hr>
&lt;h3 id="5-查询待办列表">5. 查询待办列表&lt;/h3>
&lt;p>功能：查询待办列表&lt;/p>
&lt;p>接口地址：&lt;code>/api/task/findTasks.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：租户ID（&lt;code>tenantId&lt;/code>），流程实例ID（&lt;code>instanceId&lt;/code>），审批人（&lt;code>userId&lt;/code>），任务定义Key（&lt;code>taskDefinitionKey&lt;/code>）&lt;/p>
&lt;hr>
&lt;h3 id="6-查询单个待办详情">6. 查询单个待办详情&lt;/h3>
&lt;p>功能：用于审批人登录系统审批的时候查看审批的详细情况以及表单等等。&lt;/p>
&lt;p>接口地址：&lt;code>/api/task/selectTaskInfoById.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：待办ID（&lt;code>taskId&lt;/code>）&lt;/p>
&lt;hr>
&lt;h3 id="7-待办审批">7. 待办审批&lt;/h3>
&lt;p>功能：客户端审批待办的入口&lt;/p>
&lt;p>接口地址：&lt;code>/api/task/audit.json&lt;/code>&lt;/p>
&lt;p>参数：审批结果，审批意见&lt;/p>
&lt;hr>
&lt;h3 id="8-查询操作日志">8. 查询操作日志&lt;/h3>
&lt;p>功能：查询流程的操作日志&lt;/p>
&lt;p>接口地址：&lt;code>/api/process/findProcessOperHistoryList.json&lt;/code>&lt;/p>
&lt;p>主要查询条件：租户ID（&lt;code>tenantId&lt;/code>），流程实例ID（&lt;code>processInstanceId&lt;/code>），任务定义Key（&lt;code>taskDefinitionKey&lt;/code>）&lt;/p>
&lt;h2 id="参考文档">&lt;strong>参考文档&lt;/strong>&lt;/h2>
&lt;p>&lt;em>&lt;strong>Camunda BPM版本：7.10&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://docs.camunda.org/manual/7.10/">【Camunda Docs】&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.camunda.org/javadoc/camunda-bpm-platform/7.10/org/camunda/bpm/engine/">【Camunda BPM Javadocs】&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.camunda.org/javadoc/camunda-bpm-platform/7.10/org/camunda/bpm/engine/">【BPMN 2.0规范】&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html">【UEL Docs】&lt;/a>&lt;/p>
&lt;p>【Activiti相关博文】自行百度&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2019/08/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/" term="流程引擎" label="流程引擎"/><category scheme="https://kiwi4814.github.io/tags/2019/08/camunda/" term="Camunda" label="Camunda"/></entry><entry><title type="text">Java和Javascript去除字符串空格的方法</title><link rel="alternate" type="text/html" href="https://kiwi4814.github.io/posts/2019/space-remove/"/><id>https://kiwi4814.github.io/posts/2019/space-remove/</id><updated>2022-03-13T08:51:18+00:00</updated><published>2019-06-05T23:46:30+08:00</published><author><name>kiwi4814</name><uri>https://kiwi4814.github.io/</uri><email>m4814@outlook.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">正则表达式详解 解析常用空格的正则表达式为： 1 [ *| *|\s*]* 其中正则表达式\s等同于[ \r\n\f\t\v] 1 2 3……</summary><content type="html">&lt;h3 id="正则表达式详解">正则表达式详解&lt;/h3>
&lt;p>&lt;strong>解析常用空格的正则表达式&lt;/strong>为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>　&lt;span class="o">*|&lt;/span> &lt;span class="o">*|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">*]*&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中正则表达式&lt;code>\s&lt;/code>等同于&lt;code>[ \r\n\f\t\v]&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">空格：为U&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mo">00&lt;/span>&lt;span class="nx">A0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">不换行空格&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\r：回车符&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">CARRIAGE_RETURN&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nx">，使光标到行首，ASCII&lt;/span> &lt;span class="nx">代码&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="nx">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\n：换行符&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">LINE_FEED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nx">，使光标下移一格，ASCII&lt;/span> &lt;span class="nx">代码&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="nx">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\f：换页符&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">ASCII&lt;/span> &lt;span class="nx">代码&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="nx">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\t：横向跳进字符，ASCII&lt;/span> &lt;span class="nx">代码&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="nx">，即水平制表符；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">\v：纵向跳进字符，即垂直制表符。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上述正则表达式中，另有两个空格，分别为&lt;/p>
&lt;pre tabindex="0">&lt;code>U+3000 12288 全角空格，表意文字空格，CJK（中日韩）符号及标点
U+0020 160 无中断空格（SPACE），可命名文件的空格类型
&lt;/code>&lt;/pre>&lt;p>另外正则表达式中&lt;code>\s&lt;/code>中包含的空格为：
&lt;code>U+00A0&lt;/code>，十进制为&lt;code>32&lt;/code>，&lt;code>HTML&lt;/code>代码为&lt;code>&amp;amp;nbsp;&lt;/code>，为最常用的不换行空格（NO-BREAK SPACE），即正常编译器中空格键打出的空格。
此外还有其他很多空格类型，都不包含在&lt;code>\s&lt;/code>，由于不常用所以并未列在正则表达式中。&lt;/p>
&lt;h3 id="java去空格">Java去空格&lt;/h3>
&lt;h4 id="去除所有空格">去除所有空格&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">str&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;[　*| *|\\s*]*&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="去除句首句尾空格">去除句首句尾空格&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">str&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;^[　*| *|\\s*]*&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;[　*| *|\\s*]*$&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="javascript的正则表达式">Javascript的正则表达式&lt;/h3>
&lt;h5 id="直接量语法">直接量语法&lt;/h5>
&lt;p>&lt;strong>&lt;code>/pattern/attributes&lt;/code>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>js&lt;/code>中使用&lt;code>//&lt;/code>定义的pattern不需要任何转义，只有&lt;code>&amp;quot;&amp;quot;&lt;/code>定义的字符串才需要转义字符。&lt;/li>
&lt;/ul>
&lt;h5 id="构造函数">构造函数&lt;/h5>
&lt;p>&lt;strong>&lt;code>new RegExp(pattern, attributes);&lt;/code>&lt;/strong>&lt;/p>
&lt;h5 id="参数">参数&lt;/h5>
&lt;p>参数 &lt;code>pattern&lt;/code> 是一个字符串，指定了正则表达式的模式或其他正则表达式。
参数 &lt;code>attributes&lt;/code> 是一个可选的字符串，包含属性 &amp;quot;g&amp;quot;、&amp;quot;i&amp;quot; 和 &amp;quot;m&amp;quot;，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 m 属性。如果 pattern 是正则表达式，而不是字符串，则必须省略该参数。&lt;/p>
&lt;h5 id="返回值">返回值&lt;/h5>
&lt;p>一个新的 &lt;code>RegExp&lt;/code> 对象，具有指定的模式和标志。如果参数 &lt;code>pattern&lt;/code> 是正则表达式而不是字符串，那么 &lt;code>RegExp()&lt;/code> 构造函数将用与指定的 &lt;code>RegExp&lt;/code> 相同的模式和标志创建一个新的 &lt;code>RegExp&lt;/code> 对象。
如果不用 &lt;code>new&lt;/code> 运算符，而将 &lt;code>RegExp()&lt;/code> 作为函数调用，那么它的行为与用 &lt;code>new&lt;/code> 运算符调用时一样，只是当 &lt;code>pattern&lt;/code> 是正则表达式时，它只返回 &lt;code>pattern&lt;/code>，而不再创建一个新的 &lt;code>RegExp&lt;/code> 对象。&lt;/p>
&lt;h5 id="抛出">抛出&lt;/h5>
&lt;p>&lt;code>SyntaxError&lt;/code> - 如果 &lt;code>pattern&lt;/code> 不是合法的正则表达式，或 &lt;code>attributes&lt;/code> 含有 &lt;code>&amp;quot;g&amp;quot;&lt;/code>、&lt;code>&amp;quot;i&amp;quot;&lt;/code> 和 &lt;code>&amp;quot;m&amp;quot;&lt;/code> 之外的字符，抛出该异常。
&lt;code>TypeError&lt;/code> - 如果 &lt;code>pattern&lt;/code> 是 RegExp 对象，但没有省略 &lt;code>attributes&lt;/code> 参数，抛出该异常。&lt;/p>
&lt;h3 id="javascript去空格">Javascript去空格&lt;/h3>
&lt;p>&lt;code>JS&lt;/code> 字符串替换操作有&lt;code>replace()&lt;/code> 方法，但是这个方法只能替换目标字符串中第一个匹配的字符串。
如果要将目标字符串全部替换的话，&lt;code>java&lt;/code>里可以用&lt;code>replaceAll&lt;/code>，但是&lt;code>JS&lt;/code> 没有提供这样的方法，所以使用正则表达式来达到&lt;code>replaceAll()&lt;/code>的效果：&lt;/p>
&lt;h4 id="全局匹配的写法1">全局匹配的写法1&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[　*| *|\s*]*/g&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>g&lt;/code> 的意义是：执行全局匹配（查找所有匹配而不是在找到第一个匹配后停止）。&lt;/p>
&lt;h4 id="全局匹配的写法2">全局匹配的写法2&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[　*| *|\\s*]*&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;gm&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="增加string-对象原型方法">增加String 对象原型方法&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">s2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;gm&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="nx">s2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就可以在&lt;code>js&lt;/code>代码中使用&lt;code>replaceAll&lt;/code>方法了。&lt;/p>
&lt;p>oracle去空格&lt;/p>
&lt;p>&lt;code>SELECT REGEXP_REPLACE('dark souls sin', '\s', NULL) FROM DUAL;&lt;/code>&lt;/p></content><category scheme="https://kiwi4814.github.io/categories/2022/03/%E6%8A%80%E6%9C%AF/" term="技术" label="技术"/><category scheme="https://kiwi4814.github.io/tags/2020/06/java/" term="Java" label="Java"/><category scheme="https://kiwi4814.github.io/tags/2019/12/javascript/" term="JavaScript" label="JavaScript"/></entry></feed>